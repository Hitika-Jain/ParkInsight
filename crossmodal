{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11630448,"sourceType":"datasetVersion","datasetId":7297055}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-30T20:20:36.496749Z","iopub.execute_input":"2025-04-30T20:20:36.497388Z","iopub.status.idle":"2025-04-30T20:20:38.872286Z","shell.execute_reply.started":"2025-04-30T20:20:36.497365Z","shell.execute_reply":"2025-04-30T20:20:38.871360Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/parkinsons/data/audio_pd/AH_545616858-3A749CBC-3FEB-4D35-820E-E45C3E5B9B6A.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545841227-5C77713A-66F1-49D0-BC8A-702C152E668D.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545753014-C68926CC-AB91-49AF-90A6-BB5C434283DB.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545622719-52C23861-6E0D-41E0-A3D8-9358C28C019B.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545643618-82A143AC-B643-4273-A923-C42A83AEEC5F.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545789674-53885025-35F1-48C1-9826-BAAEB8BEAF58.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545841226-C699FC9E-1E0C-474D-A12A-936DD92B8980.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545789675-243F18DB-4432-4C87-B12C-6EEC2D2D30D6.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545648867-CB17D873-1CEA-492A-B5B0-93C7463F516C.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545789671-794D2256-DDFF-4009-8BA8-8A306C8FA14F.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545622717-461DFFFE-54AF-42AF-BA78-528BD505D624.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545629296-C2C009C6-8C17-42EA-B6BE-362942FC4692.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545789680-7FF9D4F1-DDCC-4CB6-8668-76530D670FA5.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545841221-6FC57E6E-65B6-4859-A15A-55856D7E75C0.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545789682-7554E0C7-4E25-49C3-9E6C-04D525455E28.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545692309-EA8C4DC0-9B2A-4CC7-A490-851A2129A733.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545789677-D381D801-B073-4945-BE0D-E250126EA6B1.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545622720-E1486AF6-8C95-47EB-829B-4D62698C987A.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545812844-DFBCDA22-CADB-444A-9623-16A39D45E9E7.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545841223-24FB0419-5BAE-4F9C-8EBC-CD62DA6590D2.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545806325-8A17002B-CFD3-4DCF-8854-04F0F2BFF21B.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545834603-857E007F-1CCF-4249-8160-3A0F3F5AB58D.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545812846-0C14B32A-6C50-4B62-BC89-0A815C2DEEFA.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545841222-DE5AEF27-7F4E-45A4-BF7D-9E87E7A786AE.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545880204-EE87D3E2-0D4C-4EAA-ACD7-C3F177AFF62F.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545713222-DA13DC3A-F24B-454E-984F-19DF19328D39.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545713223-E6D59EE5-4C3F-4B40-AE8F-0657EF94DB66.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545622718-C052AD58-5E6B-4ADC-855C-F76B66BAFA6E.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545692315-C2972597-9AEC-4060-A186-F1F59340640C.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545713224-1B3708B0-8792-4FEE-B03B-C7CB9CB03D58.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545789690-DA26461A-AF40-4A43-9662-3A93EE872359.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545753015-58CAA743-BA9A-47E0-B9EF-CC35E9EFB839.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545743929-E2EAE1A3-7E46-4DCF-8DB7-37A5CA47DB9D.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545789668-A4F6069C-5E1A-49F5-9EDC-59C6EB833E42.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545806326-BD0FE665-1AD5-4F55-8342-0FAB8B15680B.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545753013-FCFF8F46-08FF-4C87-B443-D2039E5DA945.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545789670-C297FD53-BF71-4183-86A0-58E5E1EB0DF8.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545847410-D1BA3BB4-1F61-44CA-ACDE-455A8E97E04B.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545622722-3C79DA68-36BB-43A2-B29C-61AEF480E07E.wav\n/kaggle/input/parkinsons/data/audio_pd/AH_545713221-1E77C030-4558-4A88-B1A2-6AB777ACAE61.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_114S_A89F3548-0B61-4770-B800-2E26AB3908B6.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_678A_2E7AFA48-34C1-4DAD-A73C-95F7ABF6B138.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_538M_AE709CB7-1123-47F8-8BD2-000158BDBC01.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_667J_605FB4D5-E0DB-4B9B-8F58-784561C51693.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_743R_66BD23F9-D685-4315-86F8-7697B5084F7B.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_264Z_593C20CD-0A54-4177-B031-26EE147080A3.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_888A_7F1444B0-B12C-4B55-AF2A-463395DCAF3C.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_325J_7F5F27AA-5A93-43CF-AB17-FC53940BF4B0.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_292J_201CB911-31C1-4CD0-BD73-4FBA4A16C21F.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_378G_3C2A05CE-36E4-4956-8FC2-0494B27D3EA8.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_473R_E4947FD3-23C1-44F1-BCE4-DC59D8269FDE.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_444B_E1586F09-1BF5-408D-A55E-96D9E8B76A43.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_121A_BD5BA248-E807-4CB9-8B53-47E7FFE5F8E2.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_420J_07C96C2C-6E96-4A2F-BEC9-5CB71DB309B6.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_777G_4C8ACC89-7FE2-4174-AE3A-B21B39A0C869.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_596S_BBE9779F-C440-42D3-9C96-4CD6121D1F7E.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_322A_C3BF5535-A11E-498E-94EB-BE7E74099FFB.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_789Y_20CB672C-5F66-425E-8707-BE5B7FF807E2.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_325A_3EB21DC7-C340-4D0E-AC9E-0EABF217BBEE.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_064F_7AB034C9-72E4-438B-A9B3-AD7FDA1596C5.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_942A_3F7867F3-1AE2-4BE6-B5EC-AC3157D310CF.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_562E_151814F5-BB0F-44EF-9A22-FE2862FC3411.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_469Z_5BB05B2C-39C4-434D-9445-244E7580F840.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_523T_66147C3C-938A-4CF9-913E-5D49D72BD8B6.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_569E_B26CCA1E-29AD-48DD-9947-48DB8A56CA31.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_456K_CBF60DD0-82AA-430E-A5E9-E1D3AE175CCB.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_803T_66094C40-AE64-4AD3-AA97-B052C69DA3EF.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_621N_204CF3E2-1DA0-4908-A47F-78997B1BAFC2.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_197T_7552379A-2310-46E1-9466-9D8045C990B8.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_777R_A36CF7FA-37FD-483E-98FE-040942B1DF49.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_619B_5CF9C4CA-31AA-4F22-8E57-8E53618CC224.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_753G_073DCC32-4397-4719-A019-DDD41F30F5F1.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_904H_85B22FC1-BA09-4A17-A374-B00B2445CD27.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_821C_8F9D5EF0-18B2-4967-B36D-82E014792BC3.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_195B_39DA6A45-F4CC-492A-80D4-FB79049ACC22.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_528T_6A746E6E-FB60-4363-842F-A7368A1E5B2C.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_501F_4BDDBB93-EA99-4B1C-AD7F-4D874F39FB0C.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_511K_DDC6D065-56B3-436B-9D08-73326C791B69.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_222K_FC9D2763-1836-460B-954F-37F23D6CD81D.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_333L_6C551A6E-CC47-410E-AA49-2DC0A86E6489.wav\n/kaggle/input/parkinsons/data/audio_hc/AH_123G_559F0706-2238-447C-BA39-DB5933BA619D.wav\n/kaggle/input/parkinsons/data/mri_pd/pd_subject23.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject32.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject20.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject43.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject34.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject5.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject26.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject27.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject36.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject37.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject41.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject49.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject8.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject25.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject22.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject33.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject11.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject40.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject18.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject12.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject13.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject9.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject10.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject46.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject2.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject14.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject3.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject17.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject4.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject42.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject45.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject24.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject21.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject39.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject47.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject1.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject29.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject7.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject6.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject44.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject16.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject48.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject35.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject19.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject15.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject31.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject28.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject38.npy\n/kaggle/input/parkinsons/data/mri_pd/pd_subject30.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject9.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject10.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject15.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject22.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject46.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject48.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject42.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject5.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject41.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject12.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject14.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject24.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject20.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject4.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject31.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject43.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject38.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject45.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject47.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject26.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject2.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject39.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject29.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject13.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject11.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject30.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject49.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject7.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject44.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject37.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject40.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject8.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject6.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject23.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject36.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject33.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject32.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject19.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject3.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject21.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject16.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject17.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject25.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject18.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject28.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject27.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject35.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject34.npy\n/kaggle/input/parkinsons/data/mri_hc/hc_subject1.npy\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"#import os\nimport random\nimport pandas as pd\n\n# Directories\nMRI_PD_DIR = \"/kaggle/input/parkinsons/data/mri_pd\"\nMRI_HC_DIR = \"/kaggle/input/parkinsons/data/mri_hc\"\nAUDIO_PD_DIR = \"/kaggle/input/parkinsons/data/audio_pd\"\nAUDIO_HC_DIR = \"/kaggle/input/parkinsons/data/audio_hc\"\nOUTPUT_CSV = \"/kaggle/working/synthetic_dataset.csv\"\n\n# Config\nMRI_WEIGHT = 0.7\nAUDIO_WEIGHT = 0.3\nNUM_PAIRS = 75  # adjust as needed\n\n# Labelled lists\nmri_files = [(os.path.join(MRI_PD_DIR, f), 1) for f in os.listdir(MRI_PD_DIR) if f.endswith('.npy')] + \\\n            [(os.path.join(MRI_HC_DIR, f), 0) for f in os.listdir(MRI_HC_DIR) if f.endswith('.npy')]\n\naudio_files = [(os.path.join(AUDIO_PD_DIR, f), 1) for f in os.listdir(AUDIO_PD_DIR) if f.endswith('.wav')] + \\\n              [(os.path.join(AUDIO_HC_DIR, f), 0) for f in os.listdir(AUDIO_HC_DIR) if f.endswith('.wav')]\n\n# Generate synthetic pairs\nsynthetic_data = []\nfor _ in range(NUM_PAIRS):\n    mri_file, mri_label = random.choice(mri_files)\n    audio_file, audio_label = random.choice(audio_files)\n\n    score = MRI_WEIGHT * mri_label + AUDIO_WEIGHT * audio_label\n    final_label = 1 if score >= 0.5 else 0\n\n    synthetic_data.append({\n        \"mri_file\": mri_file,\n        \"audio_file\": audio_file,\n        \"mri_label\": mri_label,\n        \"audio_label\": audio_label,\n        \"combined_label\": final_label\n    })\n\n# Save to CSV\ndf = pd.DataFrame(synthetic_data)\ndf.to_csv(OUTPUT_CSV, index=False)\nprint(f\"Synthetic dataset saved to {OUTPUT_CSV}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T20:20:54.122238Z","iopub.execute_input":"2025-04-30T20:20:54.122980Z","iopub.status.idle":"2025-04-30T20:20:54.148065Z","shell.execute_reply.started":"2025-04-30T20:20:54.122951Z","shell.execute_reply":"2025-04-30T20:20:54.147307Z"}},"outputs":[{"name":"stdout","text":"Synthetic dataset saved to /kaggle/working/synthetic_dataset.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import pandas as pd\n\n# Load the dataset\ndf = pd.read_csv('/kaggle/working/synthetic_dataset.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T20:21:51.560716Z","iopub.execute_input":"2025-04-30T20:21:51.561411Z","iopub.status.idle":"2025-04-30T20:21:51.573585Z","shell.execute_reply.started":"2025-04-30T20:21:51.561384Z","shell.execute_reply":"2025-04-30T20:21:51.572690Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"import torch\nfrom torch.utils.data import Dataset\nimport numpy as np\nimport librosa\nimport scipy.ndimage\n\nclass MultimodalDataset(Dataset):\n    def __init__(self, dataframe, mri_center, mri_size=(64, 64, 64), audio_pad_len=100):\n        self.dataframe = dataframe\n        self.mri_center = mri_center\n        self.mri_size = mri_size\n        self.audio_pad_len = audio_pad_len\n\n    def __len__(self):\n        return len(self.dataframe)\n\n    def extract_mri_region(self, volume):\n        x_center, y_center, z_center = self.mri_center\n        d, h, w = self.mri_size\n        x_start, y_start, z_start = max(x_center - d//2, 0), max(y_center - h//2, 0), max(z_center - w//2, 0)\n        x_end, y_end, z_end = x_start + d, y_start + h, z_start + w\n        region = volume[x_start:x_end, y_start:y_end, z_start:z_end]\n        region = scipy.ndimage.zoom(region, np.array((64, 64, 64)) / np.array(region.shape), order=1)\n        region = (region - np.min(region)) / (np.max(region) - np.min(region) + 1e-8)\n        return torch.tensor(region, dtype=torch.float32).unsqueeze(0)\n\n    def extract_audio_features(self, file_path):\n        y, sr = librosa.load(file_path, sr=22050)\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr)\n        spec_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)\n        tonnetz = librosa.feature.tonnetz(y=librosa.effects.harmonic(y), sr=sr)\n        features = np.vstack([mfcc, chroma, spec_contrast, tonnetz])\n        if features.shape[1] < self.audio_pad_len:\n            pad_width = self.audio_pad_len - features.shape[1]\n            features = np.pad(features, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            features = features[:, :self.audio_pad_len]\n        return torch.tensor(features.T, dtype=torch.float32)\n\n    def __getitem__(self, idx):\n        row = self.dataframe.iloc[idx]\n        mri_volume = np.load(row['mri_file'])\n        if mri_volume.ndim == 4:\n            mri_volume = mri_volume.squeeze(0)\n        mri_tensor = self.extract_mri_region(mri_volume)\n        audio_tensor = self.extract_audio_features(row['audio_file'])\n        label = torch.tensor(row['label'], dtype=torch.long)\n        return mri_tensor, audio_tensor, label","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T20:22:44.139815Z","iopub.execute_input":"2025-04-30T20:22:44.140475Z","iopub.status.idle":"2025-04-30T20:22:52.661409Z","shell.execute_reply.started":"2025-04-30T20:22:44.140444Z","shell.execute_reply":"2025-04-30T20:22:52.660705Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"import torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision import models\n\nclass CustomResNet3D(nn.Module):\n    def __init__(self):\n        super(CustomResNet3D, self).__init__()\n        self.model = models.video.r3d_18(pretrained=True)\n        self.model.stem[0] = nn.Conv3d(1, 64, kernel_size=7, stride=2, padding=3, bias=False)\n        self.model.fc = nn.Identity()\n\n    def forward(self, x):\n        return self.model(x)\n\nclass AudioEncoder(nn.Module):\n    def __init__(self, input_size=65, hidden_size=128):\n        super(AudioEncoder, self).__init__()\n        self.lstm = nn.LSTM(input_size, hidden_size, batch_first=True)\n        self.fc = nn.Linear(hidden_size, 128)\n\n    def forward(self, x):\n        _, (h_n, _) = self.lstm(x)\n        return self.fc(h_n[-1])\n\nclass CrossModalAttention(nn.Module):\n    def __init__(self, mri_dim=512, audio_dim=128, hidden_dim=256):\n        super(CrossModalAttention, self).__init__()\n        self.mri_proj = nn.Linear(mri_dim, hidden_dim)\n        self.audio_proj = nn.Linear(audio_dim, hidden_dim)\n        self.attn = nn.MultiheadAttention(embed_dim=hidden_dim, num_heads=4, batch_first=True)\n        self.classifier = nn.Sequential(\n            nn.Linear(hidden_dim, 64),\n            nn.ReLU(),\n            nn.Dropout(0.3),\n            nn.Linear(64, 2)\n        )\n\n    def forward(self, mri_feat, audio_feat):\n        mri_proj = self.mri_proj(mri_feat).unsqueeze(1)\n        audio_proj = self.audio_proj(audio_feat).unsqueeze(1)\n        attn_output, _ = self.attn(mri_proj, audio_proj, audio_proj)\n        combined = mri_proj + attn_output\n        combined = combined.squeeze(1)\n        return self.classifier(combined)\n\nclass MultimodalModel(nn.Module):\n    def __init__(self):\n        super(MultimodalModel, self).__init__()\n        self.mri_encoder = CustomResNet3D()\n        self.audio_encoder = AudioEncoder()\n        self.cross_modal = CrossModalAttention()\n\n    def forward(self, mri, audio):\n        mri_feat = self.mri_encoder(mri)\n        audio_feat = self.audio_encoder(audio)\n        return self.cross_modal(mri_feat, audio_feat)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T20:23:26.932385Z","iopub.execute_input":"2025-04-30T20:23:26.933242Z","iopub.status.idle":"2025-04-30T20:23:31.151037Z","shell.execute_reply.started":"2025-04-30T20:23:26.933216Z","shell.execute_reply":"2025-04-30T20:23:31.150209Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"from torch.utils.data import DataLoader\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score, classification_report\nimport torch.optim as optim\nimport matplotlib.pyplot as plt\n\ndef train_model(model, train_loader, val_loader, criterion, optimizer, num_epochs=25, patience=5):\n    best_model_wts = model.state_dict()\n    best_acc = 0.0\n    train_losses, val_losses = [], []\n    train_accuracies, val_accuracies = [], []\n    patience_counter = 0\n\n    for epoch in range(num_epochs):\n        model.train()\n        running_loss = 0.0\n        correct_preds = 0\n        total_preds = 0\n        for mri, audio, labels in train_loader:\n            mri, audio, labels = mri.to(device), audio.to(device), labels.to(device)\n            optimizer.zero_grad()\n            outputs = model(mri, audio)\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n            running_loss += loss.item() * mri.size(0)\n            _, preds = torch.max(outputs, 1)\n            correct_preds += torch.sum(preds == labels.data)\n            total_preds += labels.size(0)\n        epoch_loss = running_loss / total_preds\n        epoch_acc = correct_preds.double() / total_preds\n        train_losses.append(epoch_loss)\n        train_accuracies.append(epoch_acc.item())\n\n        model.eval()\n        val_running_loss = 0.0\n        val_correct_preds = 0\n        val_total_preds = 0\n        with torch.no_grad():\n            for mri, audio, labels in val_loader:\n                mri, audio, labels = mri.to(device), audio.to(device), labels.to(device)\n                outputs = model(mri, audio)\n                loss = criterion(outputs, labels)\n                val_running_loss += loss.item() * mri.size(0)\n                _, preds = torch.max(outputs, 1)\n                val_correct_preds += torch.sum(preds == labels.data)\n                val_total_preds += labels.size(0)\n        val_epoch_loss = val_running_loss / val_total_preds\n        val_epoch_acc = val_correct_preds.double() / val_total_preds\n        val_losses.append(val_epoch_loss)\n        val_accuracies.append(val_epoch_acc.item())\n\n        print(f'Epoch {epoch+1}/{num_epochs}, Train Loss: {epoch_loss:.4f}, Train Acc: {epoch_acc:.4f}, '\n              f'Val Loss: {val_epoch_loss:.4f}, Val Acc: {val_epoch_acc:.4f}')\n\n        if val_epoch_acc > best_acc:\n            best_acc = val_epoch_acc\n            best_model_wts = model.state_dict()\n            patience_counter = 0\n        else:\n            patience_counter += 1\n            if patience_counter >= patience:\n                print(\"Early stopping\")\n                break\n\n    model.load_state_dict(best_model_wts)\n    return model, train_losses, val_losses, train_accuracies, val_accuracies\n\n# Stratified K-Fold Cross-Validation\nfrom torch.utils.data import Subset\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\nlabels = df['label'].values\nfold = 1\n\nfor train_index, val_index in skf.split(df, labels):\n    print(f'Fold {fold}')\n    train_df = df.iloc[train_index]\n    val_df = df.iloc[val_index]\n    train_dataset = MultimodalDataset(train_df, mri_center=(64, 64, 64))\n    val_dataset = MultimodalDataset(val_df, mri_center=(64, 64, 64))\n        train_loader = DataLoader(train_dataset, batch_size=4, shuffle=True)\n    val_loader = DataLoader(val_dataset, batch_size=4, shuffle=False)\n\n    model = MultimodalModel().to(device)\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.Adam(model.parameters(), lr=1e-4)\n\n    model, train_losses, val_losses, train_accuracies, val_accuracies = train_model(\n        model, train_loader, val_loader, criterion, optimizer, num_epochs=25, patience=5\n    )\n\n    # Evaluate on validation set\n    model.eval()\n    all_preds, all_labels = [], []\n    with torch.no_grad():\n        for mri, audio, labels in val_loader:\n            mri, audio = mri.to(device), audio.to(device)\n            outputs = model(mri, audio)\n            _, preds = torch.max(outputs, 1)\n            all_preds.extend(preds.cpu().numpy())\n            all_labels.extend(labels.numpy())\n\n    print(f'Classification Report for Fold {fold}:\\n')\n    print(classification_report(all_labels, all_preds))\n    fold += 1\n\n    # Optionally plot training curves\n    plt.figure(figsize=(10, 4))\n    plt.subplot(1, 2, 1)\n    plt.plot(train_losses, label='Train Loss')\n    plt.plot(val_losses, label='Val Loss')\n    plt.title('Loss Curve')\n    plt.legend()\n\n    plt.subplot(1, 2, 2)\n    plt.plot(train_accuracies, label='Train Acc')\n    plt.plot(val_accuracies, label='Val Acc')\n    plt.title('Accuracy Curve')\n    plt.legend()\n\n    plt.suptitle(f'Training Curves - Fold {fold-1}')\n    plt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nfrom tqdm import tqdm\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, Concatenate\nfrom keras.callbacks import EarlyStopping\nimport tensorflow as tf\n\n# Dataset paths\nmri_dataset_path = \"/path/to/mri/data\"\naudio_dataset_path = \"/path/to/audio/data\"\ncsv_path = \"/kaggle/working/synthetic_dataset.csv\"  # CSV with columns: mri_file, audio_file, mri_label, audio_label, combined_label\n\n# Function to extract MFCC from audio files\ndef extract_mfcc(file_path, max_pad_len=100):\n    try:\n        y, sr = librosa.load(file_path, sr=22050)  # Load audio file\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)  # Extract MFCCs (40 features)\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr)  # Extract chroma feature\n        spec_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)  # Spectral contrast\n        tonnetz = librosa.feature.tonnetz(y=librosa.effects.harmonic(y), sr=sr)  # Tonnetz\n\n        # Combine all features\n        features = np.vstack([mfcc, chroma, spec_contrast, tonnetz])  # shape: (65, time_steps)\n\n        # Pad or truncate to match the maximum pad length\n        if features.shape[1] < max_pad_len:\n            pad_width = max_pad_len - features.shape[1]\n            features = np.pad(features, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            features = features[:, :max_pad_len]\n\n        return features.T  # shape: (time_steps, 65)\n\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Function to extract and load MRI data\ndef load_mri_data(mri_file_path):\n    try:\n        mri_data = np.load(mri_file_path)  # shape should be (64, 64, 64) for each sample\n        # Normalize MRI data (optional, can adjust based on model requirements)\n        mri_data = mri_data.astype('float32') / np.max(mri_data)\n        return mri_data\n    except Exception as e:\n        print(f\"Error loading MRI file {mri_file_path}: {e}\")\n        return None\n\n# Initialize data lists\nmri_data = []\naudio_data = []\nlabels = []\n\n# Load the synthetic data CSV\nimport pandas as pd\ndf = pd.read_csv(csv_path)\n\n# Process each row in the CSV\nfor _, row in tqdm(df.iterrows(), total=df.shape[0]):\n    # Load MRI and Audio data\n    mri_file = row['mri_file']\n    audio_file = row['audio_file']\n    \n    # Load MRI data (should be 3D: 64x64x64)\n    mri_voxel_data = load_mri_data(mri_file)\n    if mri_voxel_data is None:\n        continue\n    \n    # Extract audio features (MFCCs)\n    audio_features = extract_mfcc(audio_file)\n    if audio_features is None:\n        continue\n\n    # Add the MRI and audio features to their respective lists\n    mri_data.append(mri_voxel_data)\n    audio_data.append(audio_features)\n    labels.append(row['combined_label'])\n\n# Convert data to NumPy arrays\nX_mri = np.array(mri_data)  # shape: (samples, 64, 64, 64)\nX_audio = np.array(audio_data)  # shape: (samples, time_steps, features)\ny = np.array(labels)\n\n# Ensure the data shapes are consistent\nprint(f\"MRI Data Shape: {X_mri.shape}\")\nprint(f\"Audio Data Shape: {X_audio.shape}\")\nprint(f\"Labels Shape: {y.shape}\")\n\n# Now we will split the data and train the multimodal model using cross-validation\n\n# Initialize Stratified K-Fold\nn_splits = 5\nskf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n\n# Define the model\ndef create_multimodal_model():\n    # MRI Model (3D CNN)\n    mri_input = Input(shape=(64, 64, 64, 1))\n    x1 = Conv3D(32, (3, 3, 3), activation='relu')(mri_input)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    x1 = Conv3D(64, (3, 3, 3), activation='relu')(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    x1 = Flatten()(x1)\n\n    # Audio Model (LSTM)\n    audio_input = Input(shape=(X_audio.shape[1], X_audio.shape[2]))\n    x2 = LSTM(64)(audio_input)\n    x2 = Dense(32, activation='relu')(x2)\n\n    # Concatenate MRI and Audio Models\n    combined = Concatenate()([x1, x2])\n    combined = Dense(64, activation='relu')(combined)\n    combined = Dropout(0.3)(combined)\n    output = Dense(1, activation='sigmoid')(combined)\n\n    # Create final model\n    model = Model(inputs=[mri_input, audio_input], outputs=output)\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model\n\n# Training loop with Stratified K-Fold cross-validation\nfold_no = 1\nall_fold_acc = []\n\nfor train_index, val_index in skf.split(X_mri, y):\n    print(f\"\\n--- Fold {fold_no} ---\")\n    \n    # Split the data into training and validation sets\n    X_mri_train, X_mri_val = X_mri[train_index], X_mri[val_index]\n    X_audio_train, X_audio_val = X_audio[train_index], X_audio[val_index]\n    y_train, y_val = y[train_index], y[val_index]\n    \n    # Reshape MRI data to add the channel dimension (e.g., (64, 64, 64, 1))\n    X_mri_train = np.expand_dims(X_mri_train, axis=-1)\n    X_mri_val = np.expand_dims(X_mri_val, axis=-1)\n\n    # Create the multimodal model\n    model = create_multimodal_model()\n\n    # Early stopping\n    early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n\n    # Train the model\n    model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        validation_data=([X_mri_val, X_audio_val], y_val),\n        epochs=50,\n        batch_size=8,\n        callbacks=[early_stop],\n        verbose=1\n    )\n\n    # Evaluate the model\n    y_val_pred = (model.predict([X_mri_val, X_audio_val]) > 0.5).astype(int)\n    acc = accuracy_score(y_val, y_val_pred)\n    print(f\"Fold {fold_no} - Accuracy: {acc:.4f}\")\n\n    all_fold_acc.append(acc)\n    fold_no += 1\n\n# Final Results\nprint(\"\\nAverage Accuracy across all folds: {:.4f}\".format(np.mean(all_fold_acc)))\n\n\n  # The CSV combining MRI and audio labels\n\n# Function to extract MFCC features from audio\ndef extract_mfcc(file_path, max_pad_len=100):\n    try:\n        y, sr = librosa.load(file_path, sr=22050)  # Load audio\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)  # 40 MFCCs\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr)  # 12 chroma\n        spec_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)  # 7 spectral contrast\n        tonnetz = librosa.feature.tonnetz(y=librosa.effects.harmonic(y), sr=sr)  # 6 tonnetz\n\n        # Stack vertically\n        features = np.vstack([mfcc, chroma, spec_contrast, tonnetz])  # shape (65, time_steps)\n\n        # Pad or truncate\n        if features.shape[1] < max_pad_len:\n            pad_width = max_pad_len - features.shape[1]\n            features = np.pad(features, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            features = features[:, :max_pad_len]\n\n        return features.T  # (time_steps, features)\n\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Load the CSV with MRI and audio file mappings\ndf = pd.read_csv(csv_path)\n\n# Load MRI and audio data\nfor _, row in tqdm(df.iterrows(), desc=\"Loading data\"):\n    mri_file = row['mri_file']\n    audio_file = row['audio_file']\n    label = row['combined_label']\n\n    # Load MRI data (assuming they're already saved as .npy)\n    mri_voxels = np.load(mri_file)  # shape (64, 64, 64)\n\n    # Extract audio features (MFCC, etc.)\n    audio_features = extract_mfcc(audio_file)\n\n    if mri_voxels is not None and audio_features is not None:\n        mri_data.append(mri_voxels)\n        audio_data.append(audio_features)\n        labels.append(label)\n\n# Convert to numpy arrays\nX_mri = np.array(mri_data)  # shape (samples, 64, 64, 64)\nX_audio = np.array(audio_data)  # shape (samples, time_steps, features)\ny = np.array(labels)\n\n# Split using Stratified K-Fold\nn_splits = 5\nskf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n\nfold_no = 1\nall_fold_acc = []\nall_fold_thresh = []\n\n# Build Multimodal Model\ndef build_multimodal_model():\n    # MRI Input (3D ResNet)\n    mri_input = Input(shape=(64, 64, 64, 1), name=\"mri_input\")\n    x = Conv3D(32, (3, 3, 3), activation='relu', padding='same')(mri_input)\n    x = MaxPooling3D((2, 2, 2))(x)\n    x = Conv3D(64, (3, 3, 3), activation='relu', padding='same')(x)\n    x = MaxPooling3D((2, 2, 2))(x)\n    x = Conv3D(128, (3, 3, 3), activation='relu', padding='same')(x)\n    x = GlobalAveragePooling3D()(x)\n    x = Flatten()(x)\n\n    # Audio Input (LSTM)\n    audio_input = Input(shape=(100, 65), name=\"audio_input\")\n    y = LSTM(64)(audio_input)\n    y = Dropout(0.3)(y)\n    y = Dense(32, activation='relu')(y)\n\n    # Concatenate MRI and Audio Branches\n    combined = Concatenate()([x, y])\n    z = Dense(32, activation='relu')(combined)\n    z = Dropout(0.5)(z)\n    output = Dense(1, activation='sigmoid')(z)\n\n    model = Model(inputs=[mri_input, audio_input], outputs=output)\n    model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])\n    return model\n\n# Training loop with Stratified K-Fold\nfor train_index, val_index in skf.split(X_mri, y):\n    print(f\"\\n--- Fold {fold_no} ---\")\n    \n    # Split data\n    X_mri_train, X_mri_val = X_mri[train_index], X_mri[val_index]\n    X_audio_train, X_audio_val = X_audio[train_index], X_audio[val_index]\n    y_train, y_val = y[train_index], y[val_index]\n\n    # Build model\n    model = build_multimodal_model()\n\n    # Early stopping\n    early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n    \n    # Train\n    history = model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        validation_data=([X_mri_val, X_audio_val], y_val),\n        epochs=50,\n        batch_size=8,\n        callbacks=[early_stop],\n        verbose=1\n    )\n\n    # Predict probabilities\n    y_val_probs = model.predict([X_mri_val, X_audio_val]).ravel()\n\n    # Find best threshold\n    best_acc = 0\n    best_thresh = 0.5\n    for thresh in np.arange(0.3, 0.91, 0.01):\n        y_pred = (y_val_probs > thresh).astype(int)\n        acc = accuracy_score(y_val, y_pred)\n        if acc > best_acc:\n            best_acc = acc\n            best_thresh = thresh\n\n    print(f\"Fold {fold_no} - Best threshold: {best_thresh:.2f}, Accuracy: {best_acc:.4f}\")\n\n    all_fold_acc.append(best_acc)\n    all_fold_thresh.append(best_thresh)\n\n    fold_no += 1\n\n# After all folds\nprint(\"\\n====== Final Results ======\")\nprint(f\"Average Accuracy across {n_splits} folds: {np.mean(all_fold_acc):.4f}\")\nprint(f\"Average Best Threshold: {np.mean(all_fold_thresh):.2f}\")\n\n# Optionally plot training/validation accuracy/loss curves (similar to before)\nimport matplotlib.pyplot as plt\n\n# Assume you have a history object from the training\nplt.plot(history.history['accuracy'], label='train_accuracy')\nplt.plot(history.history['val_accuracy'], label='val_accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Accuracy during training')\nplt.legend()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T20:31:31.797488Z","iopub.execute_input":"2025-04-30T20:31:31.798293Z","iopub.status.idle":"2025-04-30T20:32:53.349678Z","shell.execute_reply.started":"2025-04-30T20:31:31.798268Z","shell.execute_reply":"2025-04-30T20:32:53.348698Z"}},"outputs":[{"name":"stderr","text":"2025-04-30 20:31:36.908074: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1746045097.437510      31 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1746045097.598234      31 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\nLoading data: 2it [00:18,  7.86s/it]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=590\n  warnings.warn(\nLoading data: 4it [00:19,  2.94s/it]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=681\n  warnings.warn(\nLoading data: 5it [00:20,  2.06s/it]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=586\n  warnings.warn(\nLoading data: 10it [00:23,  1.18it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=875\n  warnings.warn(\nLoading data: 11it [00:23,  1.34it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=987\n  warnings.warn(\nLoading data: 14it [00:25,  1.68it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=782\n  warnings.warn(\nLoading data: 15it [00:25,  1.75it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=666\n  warnings.warn(\nLoading data: 17it [00:27,  1.78it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=560\n  warnings.warn(\nLoading data: 20it [00:28,  1.78it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=851\n  warnings.warn(\nLoading data: 21it [00:30,  1.07s/it]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=649\n  warnings.warn(\nLoading data: 22it [00:31,  1.13it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=840\n  warnings.warn(\nLoading data: 26it [00:33,  1.45it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=906\n  warnings.warn(\nLoading data: 27it [00:34,  1.58it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=803\n  warnings.warn(\nLoading data: 28it [00:34,  1.68it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=766\n  warnings.warn(\nLoading data: 31it [00:36,  2.00it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=993\n  warnings.warn(\nLoading data: 32it [00:36,  1.95it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=781\n  warnings.warn(\nLoading data: 36it [00:38,  1.69it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=988\n  warnings.warn(\nLoading data: 40it [00:40,  1.77it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=547\n  warnings.warn(\nLoading data: 41it [00:41,  2.11it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=826\n  warnings.warn(\nLoading data: 43it [00:42,  2.02it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=853\n  warnings.warn(\nLoading data: 47it [00:43,  2.15it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=718\n  warnings.warn(\nLoading data: 52it [00:46,  1.93it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=939\n  warnings.warn(\nLoading data: 57it [00:48,  2.75it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=803\n  warnings.warn(\nLoading data: 62it [00:51,  1.60it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=752\n  warnings.warn(\nLoading data: 65it [00:52,  1.89it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=782\n  warnings.warn(\nLoading data: 66it [00:53,  1.89it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=574\n  warnings.warn(\nLoading data: 68it [00:54,  1.88it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=851\n  warnings.warn(\nLoading data: 75it [00:58,  1.29it/s]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/2236897871.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m \u001b[0;31m# Convert to numpy arrays\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m \u001b[0mX_mri\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmri_data\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# shape (samples, 64, 64, 64)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m \u001b[0mX_audio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maudio_data\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# shape (samples, time_steps, features)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (75,) + inhomogeneous part."],"ename":"ValueError","evalue":"setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (75,) + inhomogeneous part.","output_type":"error"}],"execution_count":6},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nfrom tqdm import tqdm\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, Concatenate\nfrom keras.callbacks import EarlyStopping\nimport tensorflow as tf\n\n# Dataset paths\nmri_hc_path = \"/data/mri_hc/\"\nmri_pd_path = \"/data/mri_pd/\"\naudio_hc_path = \"/data/audio_hc/\"\naudio_pd_path = \"/data/audio_pd/\"\n\n# Function to extract MFCC from audio files\ndef extract_mfcc(file_path, max_pad_len=100):\n    try:\n        y, sr = librosa.load(file_path, sr=22050)  # Load audio file\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)  # Extract MFCCs (40 features)\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr)  # Extract chroma feature\n        spec_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)  # Spectral contrast\n        tonnetz = librosa.feature.tonnetz(y=librosa.effects.harmonic(y), sr=sr)  # Tonnetz\n\n        # Combine all features\n        features = np.vstack([mfcc, chroma, spec_contrast, tonnetz])  # shape: (65, time_steps)\n\n        # Pad or truncate to match the maximum pad length\n        if features.shape[1] < max_pad_len:\n            pad_width = max_pad_len - features.shape[1]\n            features = np.pad(features, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            features = features[:, :max_pad_len]\n\n        return features.T  # shape: (time_steps, 65)\n\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Function to extract and load MRI data\ndef load_mri_data(mri_file_path):\n    try:\n        mri_data = np.load(mri_file_path)  # shape should be (64, 64, 64) for each sample\n        # Normalize MRI data (optional, can adjust based on model requirements)\n        mri_data = mri_data.astype('float32') / np.max(mri_data)\n        return mri_data\n    except Exception as e:\n        print(f\"Error loading MRI file {mri_file_path}: {e}\")\n        return None\n\n# Initialize data lists\nmri_data = []\naudio_data = []\nlabels = []\n\n# Load and process MRI and Audio data for Healthy and Parkinson's samples\nfor label, (mri_path, audio_path) in enumerate([(\"hc\", mri_hc_path, audio_hc_path), (\"pd\", mri_pd_path, audio_pd_path)]):\n    # Process MRI data files\n    for mri_file in tqdm(os.listdir(mri_path)):\n        if mri_file.endswith('.npy'):\n            mri_file_path = os.path.join(mri_path, mri_file)\n            mri_voxel_data = load_mri_data(mri_file_path)\n            if mri_voxel_data is not None:\n                mri_data.append(mri_voxel_data)\n                labels.append(label)  # 0 for healthy, 1 for Parkinson's\n\n    # Process Audio data files\n    for audio_file in tqdm(os.listdir(audio_path)):\n        if audio_file.endswith('.wav'):\n            audio_file_path = os.path.join(audio_path, audio_file)\n            audio_features = extract_mfcc(audio_file_path)\n            if audio_features is not None:\n                audio_data.append(audio_features)\n\n# Convert data to NumPy arrays\nX_mri = np.array(mri_data)  # shape: (samples, 64, 64, 64)\nX_audio = np.array(audio_data)  # shape: (samples, time_steps, features)\ny = np.array(labels)\n\n# Ensure the data shapes are consistent\nprint(f\"MRI Data Shape: {X_mri.shape}\")\nprint(f\"Audio Data Shape: {X_audio.shape}\")\nprint(f\"Labels Shape: {y.shape}\")\n\n# Now we will split the data and train the multimodal model using cross-validation\n\n# Initialize Stratified K-Fold\nn_splits = 5\nskf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n\n# Define the model\ndef create_multimodal_model():\n    # MRI Model (3D CNN)\n    mri_input = Input(shape=(64, 64, 64, 1))\n    x1 = Conv3D(32, (3, 3, 3), activation='relu')(mri_input)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    x1 = Conv3D(64, (3, 3, 3), activation='relu')(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    x1 = Flatten()(x1)\n\n    # Audio Model (LSTM)\n    audio_input = Input(shape=(X_audio.shape[1], X_audio.shape[2]))\n    x2 = LSTM(64)(audio_input)\n    x2 = Dense(32, activation='relu')(x2)\n\n    # Concatenate MRI and Audio Models\n    combined = Concatenate()([x1, x2])\n    combined = Dense(64, activation='relu')(combined)\n    combined = Dropout(0.3)(combined)\n    output = Dense(1, activation='sigmoid')(combined)\n\n    # Create final model\n    model = Model(inputs=[mri_input, audio_input], outputs=output)\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model\n\n# Training loop with Stratified K-Fold cross-validation\nfold_no = 1\nall_fold_acc = []\n\nfor train_index, val_index in skf.split(X_mri, y):\n    print(f\"\\n--- Fold {fold_no} ---\")\n    \n    # Split the data into training and validation sets\n    X_mri_train, X_mri_val = X_mri[train_index], X_mri[val_index]\n    X_audio_train, X_audio_val = X_audio[train_index], X_audio[val_index]\n    y_train, y_val = y[train_index], y[val_index]\n    \n    # Reshape MRI data to add the channel dimension (e.g., (64, 64, 64, 1))\n    X_mri_train = np.expand_dims(X_mri_train, axis=-1)\n    X_mri_val = np.expand_dims(X_mri_val, axis=-1)\n\n    # Create the multimodal model\n    model = create_multimodal_model()\n\n    # Early stopping\n    early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n\n    # Train the model\n    model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        validation_data=([X_mri_val, X_audio_val], y_val),\n        epochs=50,\n        batch_size=8,\n        callbacks=[early_stop],\n        verbose=1\n    )\n\n    # Evaluate the model\n    y_val_pred = (model.predict([X_mri_val, X_audio_val]) > 0.5).astype(int)\n    acc = accuracy_score(y_val, y_val_pred)\n    print(f\"Fold {fold_no} - Accuracy: {acc:.4f}\")\n\n    all_fold_acc.append(acc)\n    fold_no += 1\n\n# Final Results\nprint(\"\\nAverage Accuracy across all folds: {:.4f}\".format(np.mean(all_fold_acc)))\nprint(f\"Average Best Threshold: {np.mean(all_fold_thresh):.2f}\")\n\n# Optionally plot training/validation accuracy/loss curves (similar to before)\nimport matplotlib.pyplot as plt\n\n# Assume you have a history object from the training\nplt.plot(history.history['accuracy'], label='train_accuracy')\nplt.plot(history.history['val_accuracy'], label='val_accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Accuracy during training')\nplt.legend()\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nfrom tqdm import tqdm\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, Concatenate\nfrom keras.callbacks import EarlyStopping\nimport tensorflow as tf\n\n# Dataset paths\nmri_hc_path = \"/kaggle/input/parkinsons/data/mri_hc\"\nmri_pd_path = \"/kaggle/input/parkinsons/data/mri_pd\"\naudio_hc_path = \"/kaggle/input/parkinsons/data/audio_hc\"\naudio_pd_path = \"/kaggle/input/parkinsons/data/audio_pd\"\n\n# Function to extract MFCC from audio files\ndef extract_mfcc(file_path, max_pad_len=100):\n    try:\n        y, sr = librosa.load(file_path, sr=22050)  # Load audio file\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)  # Extract MFCCs (40 features)\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr)  # Extract chroma feature\n        spec_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)  # Spectral contrast\n        tonnetz = librosa.feature.tonnetz(y=librosa.effects.harmonic(y), sr=sr)  # Tonnetz\n\n        # Combine all features\n        features = np.vstack([mfcc, chroma, spec_contrast, tonnetz])  # shape: (65, time_steps)\n\n        # Pad or truncate to match the maximum pad length\n        if features.shape[1] < max_pad_len:\n            pad_width = max_pad_len - features.shape[1]\n            features = np.pad(features, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            features = features[:, :max_pad_len]\n\n        return features.T  # shape: (time_steps, 65)\n\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Function to extract a 64x64x64 voxel from specific brain region coordinates\ndef extract_voxel(mri_data, center_coords, voxel_size=(64, 64, 64)):\n    \"\"\"\n    Extracts a voxel of size `voxel_size` from the MRI scan around `center_coords`.\n    mri_data: 3D MRI volume (height, width, depth)\n    center_coords: Tuple of (z, y, x) coordinates (e.g., (85, 130, 110) for the midbrain)\n    voxel_size: Size of the desired voxel (default is 64x64x64)\n    \"\"\"\n    z, y, x = center_coords\n    dz, dy, dx = voxel_size\n    \n    # Ensure the region stays within bounds\n    z_start = max(z - dz//2, 0)\n    z_end = min(z + dz//2, mri_data.shape[0])\n    y_start = max(y - dy//2, 0)\n    y_end = min(y + dy//2, mri_data.shape[1])\n    x_start = max(x - dx//2, 0)\n    x_end = min(x + dx//2, mri_data.shape[2])\n    \n    # Extract the region\n    extracted_voxel = mri_data[z_start:z_end, y_start:y_end, x_start:x_end]\n    \n    # Resize the extracted region to exactly (64, 64, 64)\n    if extracted_voxel.shape != voxel_size:\n        extracted_voxel = np.resize(extracted_voxel, voxel_size)\n    \n    return extracted_voxel\n\n# Function to extract and load MRI data using brainregiondataset method\ndef brainregiondataset(mri_file_path, regions={'midbrain': (85, 130, 110)}):\n    try:\n        mri_data = np.load(mri_file_path)  # shape should be (192, 256, 256) or similar\n        extracted_data = []\n        \n        # Extract region for each given region\n        for region, coords in regions.items():\n            # Extract voxel for each region based on its specific coordinates\n            voxel = extract_voxel(mri_data, center_coords=coords, voxel_size=(64, 64, 64))\n            extracted_data.append(voxel)\n\n        # Convert to numpy array\n        extracted_data = np.array(extracted_data)\n        return extracted_data  # shape: (num_regions, 64, 64, 64)\n    \n    except Exception as e:\n        print(f\"Error loading MRI file {mri_file_path}: {e}\")\n        return None\n\n# Initialize data lists\nmri_data = []\naudio_data = []\nlabels = []\n\n# Load and process MRI and Audio data for Healthy and Parkinson's samples\nfor label, (mri_path, audio_path) in enumerate([(\"hc\", mri_hc_path, audio_hc_path), (\"pd\", mri_pd_path, audio_pd_path)]):\n    # Process MRI data files\n    for mri_file in tqdm(os.listdir(mri_path)):\n        if mri_file.endswith('.npy'):\n            mri_file_path = os.path.join(mri_path, mri_file)\n            mri_voxel_data = brainregiondataset(mri_file_path)  # Use brainregiondataset to extract regions\n            if mri_voxel_data is not None:\n                mri_data.append(mri_voxel_data)\n                labels.append(label)  # 0 for healthy, 1 for Parkinson's\n\n    # Process Audio data files\n    for audio_file in tqdm(os.listdir(audio_path)):\n        if audio_file.endswith('.wav'):\n            audio_file_path = os.path.join(audio_path, audio_file)\n            audio_features = extract_mfcc(audio_file_path)\n            if audio_features is not None:\n                audio_data.append(audio_features)\n\n# Convert data to NumPy arrays\nX_mri = np.array(mri_data)  # shape: (samples, num_regions, 64, 64, 64)\nX_audio = np.array(audio_data)  # shape: (samples, time_steps, features)\ny = np.array(labels)\n\n# Ensure the data shapes are consistent\nprint(f\"MRI Data Shape: {X_mri.shape}\")\nprint(f\"Audio Data Shape: {X_audio.shape}\")\nprint(f\"Labels Shape: {y.shape}\")\n\n# Now we will split the data and train the multimodal model using cross-validation\n\n# Initialize Stratified K-Fold\nn_splits = 5\nskf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n\n# Define the model\ndef create_multimodal_model():\n    # MRI Model (3D CNN)\n    mri_input = Input(shape=(X_mri.shape[1], 64, 64, 64, 1))  # num_regions is the new axis\n    x1 = Conv3D(32, (3, 3, 3), activation='relu')(mri_input)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    x1 = Conv3D(64, (3, 3, 3), activation='relu')(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    x1 = Flatten()(x1)\n\n    # Audio Model (LSTM)\n    audio_input = Input(shape=(X_audio.shape[1], X_audio.shape[2]))\n    x2 = LSTM(64)(audio_input)\n    x2 = Dense(32, activation='relu')(x2)\n\n    # Concatenate MRI and Audio Models\n    combined = Concatenate()([x1, x2])\n    combined = Dense(64, activation='relu')(combined)\n    combined = Dropout(0.3)(combined)\n    output = Dense(1, activation='sigmoid')(combined)\n\n    # Create final model\n    model = Model(inputs=[mri_input, audio_input], outputs=output)\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model\n\n# Training loop with Stratified K-Fold cross-validation\nfold_no = 1\nall_fold_acc = []\n\nfor train_index, val_index in skf.split(X_mri, y):\n    print(f\"\\n--- Fold {fold_no} ---\")\n    \n    # Split the data into training and validation sets\n    X_mri_train, X_mri_val = X_mri[train_index], X_mri[val_index]\n    X_audio_train, X_audio_val = X_audio[train_index], X_audio[val_index]\n    y_train, y_val = y[train_index], y[val_index]\n    \n    # Reshape MRI data to add the channel dimension (e.g., (num_regions, 64, 64, 64, 1))\n    X_mri_train = np.expand_dims(X_mri_train, axis=-1)\n    X_mri_val = np.expand_dims(X_mri_val, axis=-1)\n\n    # Create the multimodal model\n    model = create_multimodal_model()\n\n    # Early stopping\n    early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n\n    # Train the model\n    model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        validation_data=([X_mri_val, X_audio_val], y_val),\n        epochs=50,\n        batch_size=8,\n        callbacks=[early_stop],\n        verbose=1\n    )\n\n    # Evaluate the model\n    y_val_pred = (model.predict([X_mri_val, X_audio_val]) > 0.5).astype(int)\n    acc = accuracy_score(y_val, y_val_pred)\n    print(f\"Fold {fold_no} - Accuracy: {acc:.4f}\")\n\n    all_fold_acc.append(acc)\n    fold_no += 1\n\n# Final Results\nprint(\"\\nAverage Accuracy across all folds: {:.4f}\".format(np.mean(all_fold_acc)))\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport random\nimport pandas as pd\n\n# Directories\nMRI_PD_DIR = \"/kaggle/input/parkinsons/data/mri_pd\"\nMRI_HC_DIR = \"/kaggle/input/parkinsons/data/mri_hc\"\nAUDIO_PD_DIR = \"/kaggle/input/parkinsons/data/audio_pd\"\nAUDIO_HC_DIR = \"/kaggle/input/parkinsons/data/audio_hc\"\nOUTPUT_CSV = \"/kaggle/working/synthetic_dataset.csv\"\n\n# Config\nNUM_PAIRS = 100  # Ensure 80 instances with equal number of 0 and 1 labels\n\n# Labelled lists\nmri_files = [(os.path.join(MRI_PD_DIR, f), 1) for f in os.listdir(MRI_PD_DIR) if f.endswith('.npy')] + \\\n            [(os.path.join(MRI_HC_DIR, f), 0) for f in os.listdir(MRI_HC_DIR) if f.endswith('.npy')]\n\naudio_files = [(os.path.join(AUDIO_PD_DIR, f), 1) for f in os.listdir(AUDIO_PD_DIR) if f.endswith('.wav')] + \\\n              [(os.path.join(AUDIO_HC_DIR, f), 0) for f in os.listdir(AUDIO_HC_DIR) if f.endswith('.wav')]\n\n# Generate synthetic pairs with balanced labels\nsynthetic_data = []\n\n# Add 50 instances where both MRI and Audio have label 1 (label 1)\nfor _ in range(NUM_PAIRS // 2):\n    mri_file, mri_label = random.choice([x for x in mri_files if x[1] == 1])\n    audio_file, audio_label = random.choice([x for x in audio_files if x[1] == 1])\n    synthetic_data.append({\n        \"mri_file\": mri_file,\n        \"audio_file\": audio_file,\n        \"mri_label\": mri_label,\n        \"audio_label\": audio_label,\n        \"combined_label\": 1\n    })\n\n# Add 50 instances where both MRI or Audio has label 0 (label 0)\nfor _ in range(NUM_PAIRS // 2):\n    mri_file, mri_label = random.choice([x for x in mri_files if x[1] == 0])\n    audio_file, audio_label = random.choice([x for x in audio_files if x[1] == 0])\n    synthetic_data.append({\n        \"mri_file\": mri_file,\n        \"audio_file\": audio_file,\n        \"mri_label\": mri_label,\n        \"audio_label\": audio_label,\n        \"combined_label\": 0\n    })\n\n# Save to CSV\ndf = pd.DataFrame(synthetic_data)\ndf.to_csv(OUTPUT_CSV, index=False)\nprint(f\"Synthetic dataset saved to {OUTPUT_CSV}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T22:18:39.257408Z","iopub.execute_input":"2025-04-30T22:18:39.257700Z","iopub.status.idle":"2025-04-30T22:18:39.272409Z","shell.execute_reply.started":"2025-04-30T22:18:39.257680Z","shell.execute_reply":"2025-04-30T22:18:39.271768Z"}},"outputs":[{"name":"stdout","text":"Synthetic dataset saved to /kaggle/working/synthetic_dataset.csv\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nimport matplotlib.pyplot as plt\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, BatchNormalization, Concatenate\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom keras.utils import to_categorical\nimport tensorflow as tf\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import LearningRateScheduler\n\n# Define paths to the datasets\nmri_hc_path = \"/kaggle/input/parkinsons/data/mri_hc\"\nmri_pd_path = \"/kaggle/input/parkinsons/data/mri_pd\"\naudio_hc_path = \"/kaggle/input/parkinsons/data/audio_hc\"\naudio_pd_path = \"/kaggle/input/parkinsons/data/audio_pd\"\ncsv_path = \"/kaggle/working/synthetic_dataset.csv\"  # Path to synthetic dataset CSV\n\ndef lr_schedule(epoch):\n    initial_lr = 0.001\n    drop_factor = 0.5\n    epoch_drop = 5\n    return initial_lr * (drop_factor ** (epoch // epoch_drop))\n\n# Function to extract MFCC from audio files\ndef extract_mfcc(file_path, max_pad_len=100):\n    try:\n        y, sr = librosa.load(file_path, sr=22050)  # Load audio file\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)  # Extract MFCCs (40 features)\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr)  # Extract chroma feature\n        spec_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)  # Spectral contrast\n        tonnetz = librosa.feature.tonnetz(y=librosa.effects.harmonic(y), sr=sr)  # Tonnetz\n\n        # Combine all features\n        features = np.vstack([mfcc, chroma, spec_contrast, tonnetz])  # shape: (65, time_steps)\n\n        # Pad or truncate to match the maximum pad length\n        if features.shape[1] < max_pad_len:\n            pad_width = max_pad_len - features.shape[1]\n            features = np.pad(features, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            features = features[:, :max_pad_len]\n\n        return features.T  # shape: (time_steps, 65)\n\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Function to extract a 64x64x64 voxel from specific brain region coordinates\ndef extract_voxel(mri_data, center_coords, voxel_size=(64, 64, 64)):\n    z, y, x = center_coords\n    dz, dy, dx = voxel_size\n    \n    # Ensure the region stays within bounds\n    z_start = max(z - dz//2, 0)\n    z_end = min(z + dz//2, mri_data.shape[0])\n    y_start = max(y - dy//2, 0)\n    y_end = min(y + dy//2, mri_data.shape[1])\n    x_start = max(x - dx//2, 0)\n    x_end = min(x + dx//2, mri_data.shape[2])\n    \n    # Extract the region\n    extracted_voxel = mri_data[z_start:z_end, y_start:y_end, x_start:x_end]\n    \n    # Resize the extracted region to exactly (64, 64, 64)\n    if extracted_voxel.shape != voxel_size:\n        extracted_voxel = np.resize(extracted_voxel, voxel_size)\n    \n    return extracted_voxel\n\n# Function to extract and load MRI data using brainregiondataset method\ndef brainregiondataset(mri_file_path, regions={'midbrain': (85, 130, 110)}):\n    try:\n        mri_data = np.load(mri_file_path)  # shape should be (192, 256, 256) or similar\n        extracted_data = []\n        \n        # Extract region for each given region\n        for region, coords in regions.items():\n            # Extract voxel for each region based on its specific coordinates\n            voxel = extract_voxel(mri_data, center_coords=coords, voxel_size=(64, 64, 64))\n            extracted_data.append(voxel)\n\n        # Convert to numpy array\n        extracted_data = np.array(extracted_data)\n        return extracted_data  # shape: (num_regions, 64, 64, 64)\n    \n    except Exception as e:\n        print(f\"Error loading MRI file {mri_file_path}: {e}\")\n        return None\n\n# Load synthetic dataset CSV\ndf = pd.read_csv(\"/kaggle/working/synthetic_dataset.csv\")\n# Assume CSV columns: ['mri_file', 'audio_file', 'label']\n\n# Initialize data lists\nmri_data = []\naudio_data = []\nlabels = []\n\n# Load and process data from CSV\nfor _, row in tqdm(df.iterrows(), total=df.shape[0]):\n    # Get MRI and audio file paths\n    mri_file_path = row['mri_file']\n    audio_file_path = row['audio_file']\n    label = row['combined_label']\n    \n    # Process MRI data files\n    mri_voxel_data = brainregiondataset(mri_file_path)  # Use brainregiondataset to extract regions\n    if mri_voxel_data is not None:\n        mri_data.append(mri_voxel_data)\n        labels.append(label)  # 0 for healthy, 1 for Parkinson's\n    \n    # Process Audio data files\n    audio_features = extract_mfcc(audio_file_path)\n    if audio_features is not None:\n        audio_data.append(audio_features)\n\n# Convert data to NumPy arrays\nX_mri = np.array(mri_data)  # shape: (samples, num_regions, 64, 64, 64)\nX_audio = np.array(audio_data)  # shape: (samples, time_steps, features)\ny = np.array(labels)\n\n# Ensure the data shapes are consistent\nprint(f\"MRI Data Shape: {X_mri.shape}\")\nprint(f\"Audio Data Shape: {X_audio.shape}\")\nprint(f\"Labels Shape: {y.shape}\")\n\n# Split dataset into train, validation, and test sets (80% train, 10% validation, 10% test)\nX_mri_train, X_mri_test, X_audio_train, X_audio_test, y_train, y_test = train_test_split(\n    X_mri, X_audio, y, test_size=0.2, random_state=42, stratify=y)\n\nX_mri_train, X_mri_val, X_audio_train, X_audio_val, y_train, y_val = train_test_split(\n    X_mri_train, X_audio_train, y_train, test_size=0.1, random_state=42, stratify=y_train)\nX_mri_train = X_mri_train.squeeze(axis=1)\nX_mri_val = X_mri_val.squeeze(axis=1)\nX_mri_test = X_mri_test.squeeze(axis=1)\n\n# Define the model\ndef create_complex_multimodal_model():\n    # MRI Model (3D CNN with more complexity)\n    mri_input = Input(shape=(64, 64, 64, 1))  # Corrected shape for a single region (64x64x64)\n    x1 = Conv3D(64, (3, 3, 3), activation='relu', padding='same')(mri_input)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    x1 = Conv3D(128, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    x1 = Conv3D(256, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    x1 = Flatten()(x1)\n\n    # Audio Model (LSTM with more complexity)\n    audio_input = Input(shape=(X_audio.shape[1], X_audio.shape[2]))\n    x2 = LSTM(256, return_sequences=True)(audio_input)  # Increased complexity\n    x2 = LSTM(128)(x2)\n    x2 = Dropout(0.5)(x2)\n    x2 = Dense(128, activation='relu')(x2)\n\n    # Combine the MRI and Audio models\n    combined = Concatenate()([x1, x2])\n    z = Dense(64, activation='relu')(combined)\n    z = Dropout(0.5)(z)\n    z = Dense(1, activation='sigmoid')(z)  # Binary classification: Healthy or Parkinson's\n\n    model = Model(inputs=[mri_input, audio_input], outputs=z)\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n    return model\n\n# K-fold cross-validation setup\nkf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\nfold = 1\nval_acc = []\n\n# Train the model with k-fold cross-validation\nfor train_index, val_index in kf.split(X_mri_train, y_train):\n    print(f\"Training fold {fold}...\")\n    \n    # Split data into training and validation sets for this fold\n    X_mri_fold_train, X_mri_fold_val = X_mri_train[train_index], X_mri_train[val_index]\n    X_audio_fold_train, X_audio_fold_val = X_audio_train[train_index], X_audio_train[val_index]\n    y_fold_train, y_fold_val = y_train[train_index], y_train[val_index]\n    \n    model = create_complex_multimodal_model()\n    \n    # Callbacks\n    callbacks = [\n        EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True),\n        ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=0.0001),\n        LearningRateScheduler(lr_schedule)\n    ]\n    \n    # Train the model\n    model.fit(\n        [X_mri_fold_train, X_audio_fold_train], y_fold_train,\n        validation_data=([X_mri_fold_val, X_audio_fold_val], y_fold_val),\n        epochs=30, batch_size=8, callbacks=callbacks\n    )\n\n    # Evaluate on validation data\n    val_loss, val_accuracy = model.evaluate([X_mri_fold_val, X_audio_fold_val], y_fold_val)\n    print(f\"Validation Accuracy for fold {fold}: {val_accuracy:.4f}\")\n    val_acc.append(val_accuracy)\n    fold += 1\n\n# Compute the average validation accuracy\navg_val_acc = np.mean(val_acc)\nprint(f\"Average Validation Accuracy: {avg_val_acc:.4f}\")\n\n# Final evaluation on test data\nfinal_model = create_complex_multimodal_model()\nfinal_model.fit([X_mri_train, X_audio_train], y_train, epochs=30, batch_size=32, validation_data=([X_mri_val, X_audio_val], y_val), callbacks=callbacks)\ny_pred = final_model.predict([X_mri_test, X_audio_test])\ny_pred = (y_pred > 0.3).astype(int)\n\n# Calculate test accuracy and other metrics\ntest_accuracy = accuracy_score(y_test, y_pred)\nprint(f\"Test Accuracy: {test_accuracy:.4f}\")\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\nprint(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n\n# Save the final model\nfinal_model.save('/kaggle/working/multimodal_parkinsons_detection_model.h5')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-01T02:17:10.289133Z","iopub.execute_input":"2025-05-01T02:17:10.289410Z","iopub.status.idle":"2025-05-01T02:19:15.323373Z","shell.execute_reply.started":"2025-05-01T02:17:10.289391Z","shell.execute_reply":"2025-05-01T02:19:15.322250Z"}},"outputs":[{"name":"stderr","text":"  1%|▏         | 1/80 [00:00<00:24,  3.28it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=681\n  warnings.warn(\n  2%|▎         | 2/80 [00:00<00:24,  3.14it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=523\n  warnings.warn(\n  4%|▍         | 3/80 [00:00<00:19,  3.86it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=649\n  warnings.warn(\n  8%|▊         | 6/80 [00:01<00:23,  3.15it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=718\n  warnings.warn(\n 11%|█▏        | 9/80 [00:02<00:20,  3.41it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=567\n  warnings.warn(\n 12%|█▎        | 10/80 [00:02<00:21,  3.24it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=781\n  warnings.warn(\n 14%|█▍        | 11/80 [00:03<00:19,  3.49it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=666\n  warnings.warn(\n 18%|█▊        | 14/80 [00:03<00:16,  3.89it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=851\n  warnings.warn(\n 19%|█▉        | 15/80 [00:04<00:16,  3.93it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=708\n  warnings.warn(\n 20%|██        | 16/80 [00:04<00:15,  4.07it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=625\n  warnings.warn(\n 24%|██▍       | 19/80 [00:05<00:15,  3.85it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=574\n  warnings.warn(\n 29%|██▉       | 23/80 [00:06<00:17,  3.19it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=704\n  warnings.warn(\n 30%|███       | 24/80 [00:06<00:17,  3.15it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=939\n  warnings.warn(\n 31%|███▏      | 25/80 [00:07<00:16,  3.35it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=664\n  warnings.warn(\n 35%|███▌      | 28/80 [00:07<00:14,  3.63it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=547\n  warnings.warn(\n 36%|███▋      | 29/80 [00:08<00:12,  4.01it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=906\n  warnings.warn(\n 38%|███▊      | 30/80 [00:08<00:12,  4.01it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=766\n  warnings.warn(\n 51%|█████▏    | 41/80 [00:11<00:12,  3.08it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=618\n  warnings.warn(\n 52%|█████▎    | 42/80 [00:12<00:11,  3.29it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=800\n  warnings.warn(\n 54%|█████▍    | 43/80 [00:12<00:10,  3.38it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=988\n  warnings.warn(\n 56%|█████▋    | 45/80 [00:13<00:13,  2.52it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=782\n  warnings.warn(\n 64%|██████▍   | 51/80 [00:15<00:08,  3.38it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=987\n  warnings.warn(\n 82%|████████▎ | 66/80 [00:19<00:04,  3.50it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=840\n  warnings.warn(\n 89%|████████▉ | 71/80 [00:21<00:03,  2.96it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=875\n  warnings.warn(\n 92%|█████████▎| 74/80 [00:21<00:01,  3.57it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=846\n  warnings.warn(\n100%|██████████| 80/80 [00:24<00:00,  3.31it/s]\n","output_type":"stream"},{"name":"stdout","text":"MRI Data Shape: (80, 1, 64, 64, 64)\nAudio Data Shape: (80, 100, 65)\nLabels Shape: (80,)\nTraining fold 1...\nEpoch 1/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 354ms/step - accuracy: 0.3826 - loss: 40.9456 - val_accuracy: 0.5000 - val_loss: 13.4436 - learning_rate: 0.0010\nEpoch 2/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 241ms/step - accuracy: 0.5628 - loss: 31.2492 - val_accuracy: 0.6667 - val_loss: 10.2813 - learning_rate: 0.0010\nEpoch 3/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 242ms/step - accuracy: 0.6827 - loss: 11.4992 - val_accuracy: 0.7500 - val_loss: 4.6231 - learning_rate: 0.0010\nEpoch 4/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 230ms/step - accuracy: 0.8545 - loss: 16.5954 - val_accuracy: 0.5833 - val_loss: 6.6731 - learning_rate: 0.0010\nEpoch 5/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 230ms/step - accuracy: 0.6634 - loss: 28.6836 - val_accuracy: 0.6667 - val_loss: 10.2234 - learning_rate: 0.0010\nEpoch 6/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 229ms/step - accuracy: 0.6493 - loss: 35.0167 - val_accuracy: 0.5833 - val_loss: 35.4701 - learning_rate: 2.5000e-04\nEpoch 7/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 230ms/step - accuracy: 0.7202 - loss: 13.2613 - val_accuracy: 0.5000 - val_loss: 73.0033 - learning_rate: 5.0000e-04\nEpoch 8/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 231ms/step - accuracy: 0.7551 - loss: 8.1727 - val_accuracy: 0.5000 - val_loss: 127.6703 - learning_rate: 5.0000e-04\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 107ms/step - accuracy: 0.7500 - loss: 4.6231\nValidation Accuracy for fold 1: 0.7500\nTraining fold 2...\nEpoch 1/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 360ms/step - accuracy: 0.5990 - loss: 18.3729 - val_accuracy: 0.3333 - val_loss: 2.1882 - learning_rate: 0.0010\nEpoch 2/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 231ms/step - accuracy: 0.5696 - loss: 37.1165 - val_accuracy: 0.5000 - val_loss: 31.4795 - learning_rate: 0.0010\nEpoch 3/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 231ms/step - accuracy: 0.7073 - loss: 25.3517 - val_accuracy: 0.4167 - val_loss: 28.9247 - learning_rate: 0.0010\nEpoch 4/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 231ms/step - accuracy: 0.7824 - loss: 21.5922 - val_accuracy: 0.4167 - val_loss: 34.8968 - learning_rate: 5.0000e-04\nEpoch 5/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 230ms/step - accuracy: 0.7972 - loss: 31.5009 - val_accuracy: 0.5833 - val_loss: 28.7668 - learning_rate: 0.0010\nEpoch 6/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 230ms/step - accuracy: 0.7651 - loss: 17.0834 - val_accuracy: 0.5000 - val_loss: 44.0865 - learning_rate: 5.0000e-04\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 107ms/step - accuracy: 0.3333 - loss: 2.1882\nValidation Accuracy for fold 2: 0.3333\nTraining fold 3...\nEpoch 1/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 356ms/step - accuracy: 0.5924 - loss: 22.0734 - val_accuracy: 0.5455 - val_loss: 8.4902 - learning_rate: 0.0010\nEpoch 2/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 246ms/step - accuracy: 0.5298 - loss: 45.6525 - val_accuracy: 0.5455 - val_loss: 6.1226 - learning_rate: 0.0010\nEpoch 3/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 233ms/step - accuracy: 0.6274 - loss: 26.9762 - val_accuracy: 0.5455 - val_loss: 48.0366 - learning_rate: 0.0010\nEpoch 4/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 234ms/step - accuracy: 0.5879 - loss: 10.3697 - val_accuracy: 0.5455 - val_loss: 75.5182 - learning_rate: 0.0010\nEpoch 5/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 234ms/step - accuracy: 0.6449 - loss: 22.7619 - val_accuracy: 0.5455 - val_loss: 37.5201 - learning_rate: 5.0000e-04\nEpoch 6/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 233ms/step - accuracy: 0.7810 - loss: 11.9938 - val_accuracy: 0.5455 - val_loss: 53.3974 - learning_rate: 5.0000e-04\nEpoch 7/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 234ms/step - accuracy: 0.7316 - loss: 18.5344 - val_accuracy: 0.5455 - val_loss: 86.8100 - learning_rate: 5.0000e-04\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 101ms/step - accuracy: 0.5455 - loss: 6.1226\nValidation Accuracy for fold 3: 0.5455\nTraining fold 4...\nEpoch 1/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 352ms/step - accuracy: 0.4750 - loss: 49.7555 - val_accuracy: 0.4545 - val_loss: 5.1681 - learning_rate: 0.0010\nEpoch 2/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 232ms/step - accuracy: 0.6771 - loss: 29.9020 - val_accuracy: 0.4545 - val_loss: 19.6603 - learning_rate: 0.0010\nEpoch 3/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 234ms/step - accuracy: 0.5846 - loss: 27.4519 - val_accuracy: 0.5455 - val_loss: 10.0101 - learning_rate: 0.0010\nEpoch 4/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 233ms/step - accuracy: 0.5560 - loss: 30.2662 - val_accuracy: 0.4545 - val_loss: 46.3407 - learning_rate: 5.0000e-04\nEpoch 5/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 232ms/step - accuracy: 0.7107 - loss: 12.2880 - val_accuracy: 0.4545 - val_loss: 85.4613 - learning_rate: 0.0010\nEpoch 6/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 232ms/step - accuracy: 0.5967 - loss: 16.3878 - val_accuracy: 0.4545 - val_loss: 133.6457 - learning_rate: 5.0000e-04\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 99ms/step - accuracy: 0.4545 - loss: 5.1681\nValidation Accuracy for fold 4: 0.4545\nTraining fold 5...\nEpoch 1/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 355ms/step - accuracy: 0.4328 - loss: 32.6171 - val_accuracy: 0.4545 - val_loss: 6.3472 - learning_rate: 0.0010\nEpoch 2/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 233ms/step - accuracy: 0.6316 - loss: 30.8829 - val_accuracy: 0.4545 - val_loss: 26.0030 - learning_rate: 0.0010\nEpoch 3/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 232ms/step - accuracy: 0.6438 - loss: 35.3774 - val_accuracy: 0.5455 - val_loss: 10.6710 - learning_rate: 0.0010\nEpoch 4/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 233ms/step - accuracy: 0.5730 - loss: 23.4245 - val_accuracy: 0.4545 - val_loss: 19.8581 - learning_rate: 5.0000e-04\nEpoch 5/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 233ms/step - accuracy: 0.6869 - loss: 34.4191 - val_accuracy: 0.4545 - val_loss: 31.8844 - learning_rate: 0.0010\nEpoch 6/30\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 232ms/step - accuracy: 0.7965 - loss: 13.9503 - val_accuracy: 0.4545 - val_loss: 54.6571 - learning_rate: 5.0000e-04\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 100ms/step - accuracy: 0.4545 - loss: 6.3472\nValidation Accuracy for fold 5: 0.4545\nAverage Validation Accuracy: 0.5076\nEpoch 1/30\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mResourceExhaustedError\u001b[0m                    Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/3368298572.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    219\u001b[0m \u001b[0;31m# Final evaluation on test data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    220\u001b[0m \u001b[0mfinal_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcreate_complex_multimodal_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 221\u001b[0;31m \u001b[0mfinal_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mX_mri_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_audio_train\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mX_mri_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_audio_val\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    222\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfinal_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mX_mri_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_audio_test\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    223\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0.3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    120\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0;31m# `keras.config.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 122\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    123\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     57\u001b[0m       \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\" name: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;32mraise\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_status_to_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m   \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m     \u001b[0mkeras_symbolic_tensors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0minputs\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m_is_keras_symbolic_tensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mkeras_symbolic_tensors\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mResourceExhaustedError\u001b[0m: Graph execution error:\n\nDetected at node gradient_tape/functional_51_1/max_pooling3d_122_1/MaxPool3DGrad defined at (most recent call last):\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\n\n  File \"<frozen runpy>\", line 88, in _run_code\n\n  File \"/usr/local/lib/python3.11/dist-packages/colab_kernel_launcher.py\", line 37, in <module>\n\n  File \"/usr/local/lib/python3.11/dist-packages/traitlets/config/application.py\", line 992, in launch_instance\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/kernelapp.py\", line 712, in start\n\n  File \"/usr/local/lib/python3.11/dist-packages/tornado/platform/asyncio.py\", line 205, in start\n\n  File \"/usr/lib/python3.11/asyncio/base_events.py\", line 608, in run_forever\n\n  File \"/usr/lib/python3.11/asyncio/base_events.py\", line 1936, in _run_once\n\n  File \"/usr/lib/python3.11/asyncio/events.py\", line 84, in _run\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\", line 510, in dispatch_queue\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\", line 499, in process_one\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\", line 406, in dispatch_shell\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\", line 730, in execute_request\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py\", line 383, in do_execute\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/zmqshell.py\", line 528, in run_cell\n\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 2975, in run_cell\n\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 3030, in _run_cell\n\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/async_helpers.py\", line 78, in _pseudo_sync_runner\n\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 3257, in run_cell_async\n\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 3473, in run_ast_nodes\n\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 3553, in run_code\n\n  File \"/tmp/ipykernel_31/3368298572.py\", line 221, in <cell line: 0>\n\n  File \"/usr/local/lib/python3.11/dist-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/trainer.py\", line 320, in fit\n\n  File \"/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/trainer.py\", line 121, in one_step_on_iterator\n\n  File \"/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/trainer.py\", line 108, in one_step_on_data\n\n  File \"/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/trainer.py\", line 70, in train_step\n\nOOM when allocating tensor with shape[32,64,64,64,64] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[{{node gradient_tape/functional_51_1/max_pooling3d_122_1/MaxPool3DGrad}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.\n [Op:__inference_one_step_on_iterator_638170]"],"ename":"ResourceExhaustedError","evalue":"Graph execution error:\n\nDetected at node gradient_tape/functional_51_1/max_pooling3d_122_1/MaxPool3DGrad defined at (most recent call last):\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\n\n  File \"<frozen runpy>\", line 88, in _run_code\n\n  File \"/usr/local/lib/python3.11/dist-packages/colab_kernel_launcher.py\", line 37, in <module>\n\n  File \"/usr/local/lib/python3.11/dist-packages/traitlets/config/application.py\", line 992, in launch_instance\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/kernelapp.py\", line 712, in start\n\n  File \"/usr/local/lib/python3.11/dist-packages/tornado/platform/asyncio.py\", line 205, in start\n\n  File \"/usr/lib/python3.11/asyncio/base_events.py\", line 608, in run_forever\n\n  File \"/usr/lib/python3.11/asyncio/base_events.py\", line 1936, in _run_once\n\n  File \"/usr/lib/python3.11/asyncio/events.py\", line 84, in _run\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\", line 510, in dispatch_queue\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\", line 499, in process_one\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\", line 406, in dispatch_shell\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\", line 730, in execute_request\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py\", line 383, in do_execute\n\n  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/zmqshell.py\", line 528, in run_cell\n\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 2975, in run_cell\n\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 3030, in _run_cell\n\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/async_helpers.py\", line 78, in _pseudo_sync_runner\n\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 3257, in run_cell_async\n\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 3473, in run_ast_nodes\n\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 3553, in run_code\n\n  File \"/tmp/ipykernel_31/3368298572.py\", line 221, in <cell line: 0>\n\n  File \"/usr/local/lib/python3.11/dist-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/trainer.py\", line 320, in fit\n\n  File \"/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/trainer.py\", line 121, in one_step_on_iterator\n\n  File \"/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/trainer.py\", line 108, in one_step_on_data\n\n  File \"/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/trainer.py\", line 70, in train_step\n\nOOM when allocating tensor with shape[32,64,64,64,64] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[{{node gradient_tape/functional_51_1/max_pooling3d_122_1/MaxPool3DGrad}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.\n [Op:__inference_one_step_on_iterator_638170]","output_type":"error"}],"execution_count":56},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, auc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, BatchNormalization, Concatenate\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom keras.utils import to_categorical\nimport tensorflow as tf\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import LearningRateScheduler\n\n# Define paths to the datasets\nmri_hc_path = \"/kaggle/input/parkinsons/data/mri_hc\"\nmri_pd_path = \"/kaggle/input/parkinsons/data/mri_pd\"\naudio_hc_path = \"/kaggle/input/parkinsons/data/audio_hc\"\naudio_pd_path = \"/kaggle/input/parkinsons/data/audio_pd\"\ncsv_path = \"/kaggle/working/synthetic_dataset.csv\"  # Path to synthetic dataset CSV\n\ndef lr_schedule(epoch):\n    initial_lr = 0.001\n    drop_factor = 0.5\n    epoch_drop = 5\n    return initial_lr * (drop_factor ** (epoch // epoch_drop))\n\n# Function to extract MFCC from audio files\ndef extract_mfcc(file_path, max_pad_len=100):\n    try:\n        y, sr = librosa.load(file_path, sr=22050)  # Load audio file\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)  # Extract MFCCs (40 features)\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr)  # Extract chroma feature\n        spec_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)  # Spectral contrast\n        tonnetz = librosa.feature.tonnetz(y=librosa.effects.harmonic(y), sr=sr)  # Tonnetz\n\n        # Combine all features\n        features = np.vstack([mfcc, chroma, spec_contrast, tonnetz])  # shape: (65, time_steps)\n\n        # Pad or truncate to match the maximum pad length\n        if features.shape[1] < max_pad_len:\n            pad_width = max_pad_len - features.shape[1]\n            features = np.pad(features, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            features = features[:, :max_pad_len]\n\n        return features.T  # shape: (time_steps, 65)\n\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Function to extract a 64x64x64 voxel from specific brain region coordinates\ndef extract_voxel(mri_data, center_coords, voxel_size=(64, 64, 64)):\n    z, y, x = center_coords\n    dz, dy, dx = voxel_size\n    \n    # Ensure the region stays within bounds\n    z_start = max(z - dz//2, 0)\n    z_end = min(z + dz//2, mri_data.shape[0])\n    y_start = max(y - dy//2, 0)\n    y_end = min(y + dy//2, mri_data.shape[1])\n    x_start = max(x - dx//2, 0)\n    x_end = min(x + dx//2, mri_data.shape[2])\n    \n    # Extract the region\n    extracted_voxel = mri_data[z_start:z_end, y_start:y_end, x_start:x_end]\n    \n    # Resize the extracted region to exactly (64, 64, 64)\n    if extracted_voxel.shape != voxel_size:\n        extracted_voxel = np.resize(extracted_voxel, voxel_size)\n    \n    return extracted_voxel\n\n# Function to extract and load MRI data using brainregiondataset method\ndef brainregiondataset(mri_file_path, regions={'midbrain': (85, 130, 110), 'striatum': (95, 150, 120)}):\n    try:\n        mri_data = np.load(mri_file_path)  # shape should be (192, 256, 256) or similar\n        extracted_data = []\n        \n        # Extract region for each given region\n        for region, coords in regions.items():\n            # Extract voxel for each region based on its specific coordinates\n            voxel = extract_voxel(mri_data, center_coords=coords, voxel_size=(64, 64, 64))\n            extracted_data.append(voxel)\n\n        # Convert to numpy array\n        extracted_data = np.array(extracted_data)\n        return extracted_data  # shape: (num_regions, 64, 64, 64)\n    \n    except Exception as e:\n        print(f\"Error loading MRI file {mri_file_path}: {e}\")\n        return None\n\n# Load synthetic dataset CSV\ndf = pd.read_csv(csv_path)\n\n# Check class distribution to confirm imbalance\nprint(\"Class distribution in original data:\")\nprint(df['combined_label'].value_counts())\n\n# Initialize data lists\nmri_data = []\naudio_data = []\nlabels = []\nsubject_ids = []  # To keep track of unique subjects\n\n# Load and process data from CSV\nfor _, row in tqdm(df.iterrows(), total=df.shape[0]):\n    # Get MRI and audio file paths\n    mri_file_path = row['mri_file']\n    audio_file_path = row['audio_file']\n    label = row['combined_label']\n    \n    # Extract subject ID from filenames to ensure subject-wise stratification\n    subject_id = os.path.basename(mri_file_path).split('_')[0]\n    \n    # Process MRI data files\n    mri_voxel_data = brainregiondataset(mri_file_path)  # Use brainregiondataset to extract regions\n    \n    # Process Audio data files\n    audio_features = extract_mfcc(audio_file_path)\n    \n    # Only add to dataset if both MRI and audio data were processed successfully\n    if mri_voxel_data is not None and audio_features is not None:\n        mri_data.append(mri_voxel_data)\n        audio_data.append(audio_features)\n        labels.append(label)  # 0 for healthy, 1 for Parkinson's\n        subject_ids.append(subject_id)\n\n# Convert data to NumPy arrays\nX_mri = np.array(mri_data)  # shape: (samples, num_regions, 64, 64, 64)\nX_audio = np.array(audio_data)  # shape: (samples, time_steps, features)\ny = np.array(labels)\nsubject_ids = np.array(subject_ids)\n\n# Ensure the data shapes are consistent\nprint(f\"MRI Data Shape: {X_mri.shape}\")\nprint(f\"Audio Data Shape: {X_audio.shape}\")\nprint(f\"Labels Shape: {y.shape}\")\n\n# Create a DataFrame for stratified splits by subject ID\ndf_split = pd.DataFrame({\n    'subject_id': subject_ids,\n    'label': y\n})\n\n# Get unique subject IDs for stratified splitting\nunique_subjects = df_split.drop_duplicates('subject_id')\nprint(f\"Unique subjects: {len(unique_subjects)}\")\nprint(\"Class distribution among unique subjects:\")\nprint(unique_subjects['label'].value_counts())\n\n# Create train, val, test indices by subject ID (stratified)\nsubjects_train, subjects_temp = train_test_split(\n    unique_subjects, test_size=0.2, random_state=42, stratify=unique_subjects['label'])\nsubjects_val, subjects_test = train_test_split(\n    subjects_temp, test_size=0.5, random_state=42, stratify=subjects_temp['label'])\n\n# Get indices for each split\ntrain_indices = df_split[df_split['subject_id'].isin(subjects_train['subject_id'])].index\nval_indices = df_split[df_split['subject_id'].isin(subjects_val['subject_id'])].index\ntest_indices = df_split[df_split['subject_id'].isin(subjects_test['subject_id'])].index\n\n# Split data according to subject-based indices\nX_mri_train, X_mri_val, X_mri_test = X_mri[train_indices], X_mri[val_indices], X_mri[test_indices]\nX_audio_train, X_audio_val, X_audio_test = X_audio[train_indices], X_audio[val_indices], X_audio[test_indices]\ny_train, y_val, y_test = y[train_indices], y[val_indices], y[test_indices]\n\n# Reshape the MRI data for each split\nX_mri_train = X_mri_train.reshape(-1, 64, 64, 64, 1)\nX_mri_val = X_mri_val.reshape(-1, 64, 64, 64, 1)\nX_mri_test = X_mri_test.reshape(-1, 64, 64, 64, 1)\n\n# Confirm splits are properly stratified\nprint(\"\\nData split statistics:\")\nprint(f\"Training: {len(X_mri_train)} samples, Class 1: {np.sum(y_train)}, Class 0: {len(y_train) - np.sum(y_train)}\")\nprint(f\"Validation: {len(X_mri_val)} samples, Class 1: {np.sum(y_val)}, Class 0: {len(y_val) - np.sum(y_val)}\")\nprint(f\"Testing: {len(X_mri_test)} samples, Class 1: {np.sum(y_test)}, Class 0: {len(y_test) - np.sum(y_test)}\")\n\n# Calculate class weights to handle class imbalance\nclass_weights = compute_class_weight(\n    class_weight='balanced',\n    classes=np.unique(y_train),\n    y=y_train\n)\nclass_weight_dict = {i: class_weights[i] for i in range(len(class_weights))}\nprint(f\"Class weights: {class_weight_dict}\")\n\n# Define the improved multimodal model\ndef create_improved_multimodal_model(dropout_rate=0.5):\n    # MRI Model (3D CNN with residual connections)\n    mri_input = Input(shape=(64, 64, 64, 1))\n    \n    # First block\n    x1 = Conv3D(32, (3, 3, 3), activation='relu', padding='same')(mri_input)\n    x1 = BatchNormalization()(x1)\n    x1 = Conv3D(32, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    skip1 = x1  # Save for residual connection\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Second block with residual connection\n    x1 = Conv3D(64, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = Conv3D(64, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    skip2 = x1  # Save for residual connection\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Third block with residual connection\n    x1 = Conv3D(128, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = Conv3D(128, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Flatten and fully connected layers\n    x1 = Flatten()(x1)\n    x1 = Dense(512, activation='relu')(x1)\n    x1 = Dropout(dropout_rate)(x1)\n    \n    # Audio Model (Bidirectional LSTM)\n    audio_input = Input(shape=(X_audio.shape[1], X_audio.shape[2]))\n    x2 = tf.keras.layers.Bidirectional(LSTM(128, return_sequences=True))(audio_input)\n    x2 = tf.keras.layers.Bidirectional(LSTM(64))(x2)\n    x2 = Dense(256, activation='relu')(x2)\n    x2 = Dropout(dropout_rate)(x2)\n    \n    # Combine the MRI and Audio models with attention mechanism\n    combined = Concatenate()([x1, x2])\n    \n    # Add attention layer\n    attention = Dense(256, activation='tanh')(combined)\n    attention = Dense(1, activation='sigmoid')(attention)\n    attention_output = tf.keras.layers.Multiply()([combined, attention])\n    \n    # Final classification layers\n    z = Dense(128, activation='relu')(attention_output)\n    z = Dropout(dropout_rate)(z)\n    z = Dense(64, activation='relu')(z)\n    z = Dropout(dropout_rate/2)(z)\n    z = Dense(1, activation='sigmoid')(z)  # Binary classification\n\n    model = Model(inputs=[mri_input, audio_input], outputs=z)\n    \n    # Use Adam optimizer with learning rate schedule\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\n    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy', \n                                                                          tf.keras.metrics.AUC(), \n                                                                          tf.keras.metrics.Precision(), \n                                                                          tf.keras.metrics.Recall()])\n    return model\n\n# Create model visualization function\ndef plot_training_history(history):\n    \"\"\"Plot the training history metrics\"\"\"\n    fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n    \n    # Plot accuracy\n    axes[0].plot(history.history['accuracy'], label='Training Accuracy')\n    axes[0].plot(history.history['val_accuracy'], label='Validation Accuracy')\n    axes[0].set_title('Model Accuracy')\n    axes[0].set_xlabel('Epoch')\n    axes[0].set_ylabel('Accuracy')\n    axes[0].legend()\n    axes[0].grid(True)\n    \n    # Plot loss\n    axes[1].plot(history.history['loss'], label='Training Loss')\n    axes[1].plot(history.history['val_loss'], label='Validation Loss')\n    axes[1].set_title('Model Loss')\n    axes[1].set_xlabel('Epoch')\n    axes[1].set_ylabel('Loss')\n    axes[1].legend()\n    axes[1].grid(True)\n    \n    plt.tight_layout()\n    plt.savefig('/kaggle/working/training_history.png')\n    plt.show()\n\ndef plot_confusion_matrix(y_true, y_pred, classes=['Healthy', 'Parkinson\\'s']):\n    \"\"\"Plot confusion matrix\"\"\"\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=classes, yticklabels=classes)\n    plt.title('Confusion Matrix')\n    plt.ylabel('True Label')\n    plt.xlabel('Predicted Label')\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/confusion_matrix.png')\n    plt.show()\n\ndef plot_roc_curve(y_test, y_prob):\n    \"\"\"Plot ROC curve\"\"\"\n    fpr, tpr, _ = roc_curve(y_test, y_prob)\n    roc_auc = auc(fpr, tpr)\n    \n    plt.figure(figsize=(8, 6))\n    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.3f})')\n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.grid(True)\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/roc_curve.png')\n    plt.show()\n\n# Data augmentation for MRI (only for training data)\ndef augment_mri_data(X_mri, y, augmentation_factor=2):\n    datagen = ImageDataGenerator(\n        rotation_range=10,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        zoom_range=0.1,\n        horizontal_flip=True,\n        fill_mode='nearest'\n    )\n    \n    # Only augment the minority class (assuming class 1 is the minority)\n    minority_indices = np.where(y == 1)[0]\n    X_augmented = []\n    y_augmented = []\n    \n    for idx in minority_indices:\n        # Original sample\n        X_augmented.append(X_mri[idx])\n        y_augmented.append(1)\n        \n        # Generate augmented samples\n        for _ in range(augmentation_factor - 1):\n            # Apply augmentation\n            aug_img = datagen.random_transform(X_mri[idx])\n            X_augmented.append(aug_img)\n            y_augmented.append(1)\n    \n    # Add all majority class samples\n    majority_indices = np.where(y == 0)[0]\n    for idx in majority_indices:\n        X_augmented.append(X_mri[idx])\n        y_augmented.append(0)\n    \n    return np.array(X_augmented), np.array(y_augmented)\n\n# Apply augmentation to training data only if class imbalance exists\nif np.sum(y_train) / len(y_train) < 0.4:  # If minority class is less than 40%\n    print(\"Applying data augmentation to balance classes...\")\n    X_mri_train_aug, y_train_aug = augment_mri_data(X_mri_train, y_train)\n    print(f\"After augmentation - Training: {len(X_mri_train_aug)} samples, Class 1: {np.sum(y_train_aug)}, Class 0: {len(y_train_aug) - np.sum(y_train_aug)}\")\nelse:\n    X_mri_train_aug, y_train_aug = X_mri_train, y_train\n    print(\"Data is relatively balanced. Skipping augmentation.\")\n\n# Implement K-fold cross-validation and grid search for hyperparameters\ndef perform_kfold_cv(X_mri, X_audio, y, n_splits=5):\n    kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n    fold_metrics = {\n        'accuracy': [],\n        'auc': [],\n        'precision': [],\n        'recall': []\n    }\n    \n    for fold, (train_idx, val_idx) in enumerate(kf.split(X_mri, y)):\n        print(f\"\\nTraining fold {fold+1}/{n_splits}...\")\n        \n        # Split data for this fold\n        X_mri_fold_train, X_mri_fold_val = X_mri[train_idx], X_mri[val_idx]\n        X_audio_fold_train, X_audio_fold_val = X_audio[train_idx], X_audio[val_idx]\n        y_fold_train, y_fold_val = y[train_idx], y[val_idx]\n        \n        # Create and train model for this fold\n        model = create_improved_multimodal_model(dropout_rate=0.5)\n        \n        # Callbacks for training\n        callbacks = [\n            EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True),\n            ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=0.00001),\n            ModelCheckpoint(filepath=f'/kaggle/working/model_fold_{fold+1}.h5', save_best_only=True),\n        ]\n        \n        # Train model\n        history = model.fit(\n            [X_mri_fold_train, X_audio_fold_train], y_fold_train,\n            validation_data=([X_mri_fold_val, X_audio_fold_val], y_fold_val),\n            epochs=50, batch_size=16, callbacks=callbacks,\n            class_weight=class_weight_dict\n        )\n        \n        # Evaluate on validation data\n        metrics = model.evaluate([X_mri_fold_val, X_audio_fold_val], y_fold_val)\n        \n        # Store fold metrics\n        fold_metrics['accuracy'].append(metrics[1])\n        fold_metrics['auc'].append(metrics[2])\n        fold_metrics['precision'].append(metrics[3])\n        fold_metrics['recall'].append(metrics[4])\n        \n        print(f\"Fold {fold+1} Metrics - Accuracy: {metrics[1]:.4f}, AUC: {metrics[2]:.4f}, Precision: {metrics[3]:.4f}, Recall: {metrics[4]:.4f}\")\n    \n    # Calculate and display average metrics\n    for metric, values in fold_metrics.items():\n        mean_value = np.mean(values)\n        std_value = np.std(values)\n        print(f\"Average {metric}: {mean_value:.4f} ± {std_value:.4f}\")\n    \n    return fold_metrics\n\n# Perform k-fold cross-validation on training data\nprint(\"\\nPerforming 5-fold cross-validation...\")\nfold_metrics = perform_kfold_cv(X_mri_train_aug, X_audio_train, y_train_aug)\n\n# Train final model with best hyperparameters\nprint(\"\\nTraining final model on all training data...\")\nfinal_model = create_improved_multimodal_model(dropout_rate=0.5)\n\n# Callbacks for final model\ncallbacks = [\n    EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True),\n    ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=0.00001),\n    ModelCheckpoint(filepath='/kaggle/working/final_model.h5', save_best_only=True),\n]\n\n# Train final model\nhistory = final_model.fit(\n    [X_mri_train_aug, X_audio_train], y_train_aug,\n    validation_data=([X_mri_val, X_audio_val], y_val),\n    epochs=100, batch_size=16, callbacks=callbacks,\n    class_weight=class_weight_dict\n)\n\n# Plot training history\nplot_training_history(history)\n\n# Evaluate on test data\ntest_metrics = final_model.evaluate([X_mri_test, X_audio_test], y_test)\nprint(\"\\nTest Metrics:\")\nprint(f\"Loss: {test_metrics[0]:.4f}\")\nprint(f\"Accuracy: {test_metrics[1]:.4f}\")\nprint(f\"AUC: {test_metrics[2]:.4f}\")\nprint(f\"Precision: {test_metrics[3]:.4f}\")\nprint(f\"Recall: {test_metrics[4]:.4f}\")\n\n# Generate predictions\ny_prob = final_model.predict([X_mri_test, X_audio_test])\ny_pred = (y_prob > 0.5).astype(int)\n\n# Plot confusion matrix\nplot_confusion_matrix(y_test, y_pred)\n\n# Plot ROC curve\nplot_roc_curve(y_test, y_prob)\n\n# Additional visualization: Feature importance analysis\n# Using a technique called Permutation Importance\ndef plot_feature_importance():\n    plt.figure(figsize=(10, 6))\n    \n    # This is a placeholder for actual feature importance\n    # In a real scenario, you would calculate permutation importance\n    features = ['MRI Features', 'Audio MFCC', 'Audio Chroma', 'Audio Spectral', 'Audio Tonnetz']\n    importance = [0.45, 0.25, 0.1, 0.15, 0.05]  # Placeholder values\n    \n    plt.bar(features, importance, color='skyblue')\n    plt.title('Estimated Feature Importance')\n    plt.xlabel('Feature')\n    plt.ylabel('Importance Score')\n    plt.ylim(0, 0.5)\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/feature_importance.png')\n    plt.show()\n\nplot_feature_importance()\n\n# Generate comprehensive classification report\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred, target_names=['Healthy', \"Parkinson's\"]))\n\n# Save the final model\nfinal_model.save('/kaggle/working/improved_multimodal_parkinsons_model.h5')\n\nprint(\"\\nModel training and evaluation complete!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T22:19:08.247697Z","iopub.execute_input":"2025-04-30T22:19:08.247982Z","iopub.status.idle":"2025-04-30T22:19:46.752245Z","shell.execute_reply.started":"2025-04-30T22:19:08.247960Z","shell.execute_reply":"2025-04-30T22:19:46.751407Z"}},"outputs":[{"name":"stdout","text":"Class distribution in original data:\ncombined_label\n1    50\n0    50\nName: count, dtype: int64\n","output_type":"stream"},{"name":"stderr","text":"  2%|▏         | 2/100 [00:00<00:42,  2.32it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=523\n  warnings.warn(\n  8%|▊         | 8/100 [00:03<00:49,  1.87it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=851\n  warnings.warn(\n 10%|█         | 10/100 [00:04<00:36,  2.44it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=547\n  warnings.warn(\n 13%|█▎        | 13/100 [00:05<00:43,  1.99it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=752\n  warnings.warn(\n 14%|█▍        | 14/100 [00:06<00:36,  2.38it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=766\n  warnings.warn(\n 18%|█▊        | 18/100 [00:07<00:29,  2.81it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=800\n  warnings.warn(\n 19%|█▉        | 19/100 [00:07<00:25,  3.13it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=826\n  warnings.warn(\n 22%|██▏       | 22/100 [00:09<00:36,  2.14it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=993\n  warnings.warn(\n 23%|██▎       | 23/100 [00:09<00:38,  2.01it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=625\n  warnings.warn(\n 27%|██▋       | 27/100 [00:11<00:25,  2.87it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=547\n  warnings.warn(\n 32%|███▏      | 32/100 [00:12<00:26,  2.60it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=853\n  warnings.warn(\n 35%|███▌      | 35/100 [00:13<00:24,  2.64it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=718\n  warnings.warn(\n 36%|███▌      | 36/100 [00:14<00:21,  3.02it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=590\n  warnings.warn(\n 39%|███▉      | 39/100 [00:14<00:17,  3.49it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=840\n  warnings.warn(\n 41%|████      | 41/100 [00:15<00:17,  3.35it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=939\n  warnings.warn(\n 54%|█████▍    | 54/100 [00:20<00:18,  2.50it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=560\n  warnings.warn(\n 56%|█████▌    | 56/100 [00:20<00:14,  2.98it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=649\n  warnings.warn(\n 57%|█████▋    | 57/100 [00:21<00:12,  3.33it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=618\n  warnings.warn(\n 58%|█████▊    | 58/100 [00:21<00:11,  3.67it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=988\n  warnings.warn(\n 60%|██████    | 60/100 [00:21<00:12,  3.12it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=803\n  warnings.warn(\n 63%|██████▎   | 63/100 [00:23<00:15,  2.34it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=987\n  warnings.warn(\n 65%|██████▌   | 65/100 [00:24<00:16,  2.13it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=574\n  warnings.warn(\n 72%|███████▏  | 72/100 [00:26<00:07,  3.54it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=704\n  warnings.warn(\n 74%|███████▍  | 74/100 [00:27<00:07,  3.25it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=681\n  warnings.warn(\n 76%|███████▌  | 76/100 [00:30<00:26,  1.10s/it]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=708\n  warnings.warn(\n 79%|███████▉  | 79/100 [00:31<00:11,  1.80it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=664\n  warnings.warn(\n 84%|████████▍ | 84/100 [00:33<00:07,  2.27it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=906\n  warnings.warn(\n 86%|████████▌ | 86/100 [00:33<00:04,  2.93it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=567\n  warnings.warn(\n 89%|████████▉ | 89/100 [00:34<00:03,  3.18it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=875\n  warnings.warn(\n 90%|█████████ | 90/100 [00:34<00:02,  3.41it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=666\n  warnings.warn(\n 99%|█████████▉| 99/100 [00:38<00:00,  2.56it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=979\n  warnings.warn(\n100%|██████████| 100/100 [00:38<00:00,  2.61it/s]","output_type":"stream"},{"name":"stdout","text":"MRI Data Shape: (100, 2, 64, 64, 64)\nAudio Data Shape: (100, 100, 65)\nLabels Shape: (100,)\nUnique subjects: 2\nClass distribution among unique subjects:\nlabel\n1    1\n0    1\nName: count, dtype: int64\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/2818755992.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    159\u001b[0m \u001b[0;31m# Create train, val, test indices by subject ID (stratified)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 160\u001b[0;31m subjects_train, subjects_temp = train_test_split(\n\u001b[0m\u001b[1;32m    161\u001b[0m     unique_subjects, test_size=0.2, random_state=42, stratify=unique_subjects['label'])\n\u001b[1;32m    162\u001b[0m subjects_val, subjects_test = train_test_split(\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py\u001b[0m in \u001b[0;36mtrain_test_split\u001b[0;34m(test_size, train_size, random_state, shuffle, stratify, *arrays)\u001b[0m\n\u001b[1;32m   2581\u001b[0m         \u001b[0mcv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCVClass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2582\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2583\u001b[0;31m         \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstratify\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2584\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2585\u001b[0m     return list(\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py\u001b[0m in \u001b[0;36msplit\u001b[0;34m(self, X, y, groups)\u001b[0m\n\u001b[1;32m   1687\u001b[0m         \"\"\"\n\u001b[1;32m   1688\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1689\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iter_indices\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1690\u001b[0m             \u001b[0;32myield\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1691\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py\u001b[0m in \u001b[0;36m_iter_indices\u001b[0;34m(self, X, y, groups)\u001b[0m\n\u001b[1;32m   2076\u001b[0m         \u001b[0mclass_counts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbincount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_indices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2077\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclass_counts\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2078\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m   2079\u001b[0m                 \u001b[0;34m\"The least populated class in y has only 1\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2080\u001b[0m                 \u001b[0;34m\" member, which is too few. The minimum\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: The least populated class in y has only 1 member, which is too few. The minimum number of groups for any class cannot be less than 2."],"ename":"ValueError","evalue":"The least populated class in y has only 1 member, which is too few. The minimum number of groups for any class cannot be less than 2.","output_type":"error"}],"execution_count":8},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, auc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, BatchNormalization, Concatenate\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom keras.utils import to_categorical\nimport tensorflow as tf\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import LearningRateScheduler\n\n# Define paths to the datasets\nmri_hc_path = \"/kaggle/input/parkinsons/data/mri_hc\"\nmri_pd_path = \"/kaggle/input/parkinsons/data/mri_pd\"\naudio_hc_path = \"/kaggle/input/parkinsons/data/audio_hc\"\naudio_pd_path = \"/kaggle/input/parkinsons/data/audio_pd\"\ncsv_path = \"/kaggle/working/synthetic_dataset.csv\"  # Path to synthetic dataset CSV\n\ndef lr_schedule(epoch):\n    initial_lr = 0.001\n    drop_factor = 0.5\n    epoch_drop = 5\n    return initial_lr * (drop_factor ** (epoch // epoch_drop))\n\n# Function to extract MFCC from audio files\ndef extract_mfcc(file_path, max_pad_len=100):\n    try:\n        y, sr = librosa.load(file_path, sr=22050)  # Load audio file\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)  # Extract MFCCs (40 features)\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr)  # Extract chroma feature\n        spec_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)  # Spectral contrast\n        tonnetz = librosa.feature.tonnetz(y=librosa.effects.harmonic(y), sr=sr)  # Tonnetz\n\n        # Combine all features\n        features = np.vstack([mfcc, chroma, spec_contrast, tonnetz])  # shape: (65, time_steps)\n\n        # Pad or truncate to match the maximum pad length\n        if features.shape[1] < max_pad_len:\n            pad_width = max_pad_len - features.shape[1]\n            features = np.pad(features, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            features = features[:, :max_pad_len]\n\n        return features.T  # shape: (time_steps, 65)\n\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Function to extract a 64x64x64 voxel from specific brain region coordinates\ndef extract_voxel(mri_data, center_coords, voxel_size=(64, 64, 64)):\n    z, y, x = center_coords\n    dz, dy, dx = voxel_size\n    \n    # Ensure the region stays within bounds\n    z_start = max(z - dz//2, 0)\n    z_end = min(z + dz//2, mri_data.shape[0])\n    y_start = max(y - dy//2, 0)\n    y_end = min(y + dy//2, mri_data.shape[1])\n    x_start = max(x - dx//2, 0)\n    x_end = min(x + dx//2, mri_data.shape[2])\n    \n    # Extract the region\n    extracted_voxel = mri_data[z_start:z_end, y_start:y_end, x_start:x_end]\n    \n    # Resize the extracted region to exactly (64, 64, 64)\n    if extracted_voxel.shape != voxel_size:\n        extracted_voxel = np.resize(extracted_voxel, voxel_size)\n    \n    return extracted_voxel\n\n# Function to extract and load MRI data using brainregiondataset method\ndef brainregiondataset(mri_file_path, regions={'midbrain': (85, 130, 110)}):\n    try:\n        # Check if file exists\n        if not os.path.exists(mri_file_path):\n            print(f\"File not found: {mri_file_path}\")\n            return None\n            \n        mri_data = np.load(mri_file_path)  # shape should be (192, 256, 256) or similar\n        \n        # Verify shape is reasonable\n        if len(mri_data.shape) != 3 or min(mri_data.shape) < 64:\n            print(f\"Warning: Unexpected MRI data shape: {mri_data.shape}\")\n            # Try to continue anyway\n        \n        extracted_data = []\n        \n        # Extract region for each given region\n        for region, coords in regions.items():\n            # Extract voxel for each region based on its specific coordinates\n            voxel = extract_voxel(mri_data, center_coords=coords, voxel_size=(64, 64, 64))\n            extracted_data.append(voxel)\n\n        # Convert to numpy array\n        extracted_data = np.array(extracted_data)\n        return extracted_data  # shape: (num_regions, 64, 64, 64)\n    \n    except Exception as e:\n        print(f\"Error loading MRI file {mri_file_path}: {e}\")\n        return None\n\n# Load synthetic dataset CSV\ndf = pd.read_csv(csv_path)\n\n# Check class distribution to confirm imbalance\nprint(\"Class distribution in original data:\")\nprint(df['combined_label'].value_counts())\n\n# Initialize data lists\nmri_data = []\naudio_data = []\nlabels = []\nsubject_ids = []  # To keep track of unique subjects\n\n# Load and process data from CSV\nfor _, row in tqdm(df.iterrows(), total=df.shape[0]):\n    # Get MRI and audio file paths\n    mri_file_path = row['mri_file']\n    audio_file_path = row['audio_file']\n    label = row['combined_label']\n    \n    # Extract subject ID from filenames to ensure subject-wise stratification\n    subject_id = os.path.basename(mri_file_path).split('_')[0]\n    \n    # Process MRI data files\n    mri_voxel_data = brainregiondataset(mri_file_path)  # Use brainregiondataset to extract regions\n    \n    # Process Audio data files\n    audio_features = extract_mfcc(audio_file_path)\n    \n    # Only add to dataset if both MRI and audio data were processed successfully\n    if mri_voxel_data is not None and audio_features is not None:\n        mri_data.append(mri_voxel_data)\n        audio_data.append(audio_features)\n        labels.append(label)  # 0 for healthy, 1 for Parkinson's\n        subject_ids.append(subject_id)\n\n# Convert data to NumPy arrays\nX_mri = np.array(mri_data)  # shape: (samples, num_regions, 64, 64, 64)\nX_audio = np.array(audio_data)  # shape: (samples, time_steps, features)\ny = np.array(labels)\nsubject_ids = np.array(subject_ids)\n\n# Ensure the data shapes are consistent\nprint(f\"MRI Data Shape: {X_mri.shape}\")\nprint(f\"Audio Data Shape: {X_audio.shape}\")\nprint(f\"Labels Shape: {y.shape}\")\n\n# Create a DataFrame for stratified splits by subject ID\ndf_split = pd.DataFrame({\n    'subject_id': subject_ids,\n    'label': y\n})\n\n# Get unique subject IDs for stratified splitting\nunique_subjects = df_split.drop_duplicates('subject_id')\nprint(f\"Unique subjects: {len(unique_subjects)}\")\nprint(\"Class distribution among unique subjects:\")\nprint(unique_subjects['label'].value_counts())\n\n# Create a more robust split that handles potential low-count classes\nprint(\"\\nAttempting stratified split by subject...\")\n\n# Check if stratified split is possible (at least 2 subjects per class)\nclass_counts = unique_subjects['label'].value_counts()\nprint(f\"Subject counts per class: {class_counts.to_dict()}\")\n\n# If we have at least 2 subjects per class, do stratified split\nif class_counts.min() >= 2:\n    subjects_train, subjects_temp = train_test_split(\n        unique_subjects, test_size=0.2, random_state=42, stratify=unique_subjects['label'])\n    if len(subjects_temp) > 1:\n        # Split the remaining subjects into validation and test sets\n        subjects_val, subjects_test = train_test_split(\n        subjects_temp, test_size=0.5, random_state=42)\n    else:\n        # If only 1 sample, handle it as needed (could assign to one of the sets)\n        print(\"Not enough samples in subjects_temp for a 50-50 split\")\n        subjects_val = subjects_temp\n        subjects_test = []\n    subjects_val, subjects_test = train_test_split(\n        subjects_temp, test_size=0.5, random_state=42, stratify=subjects_temp['label'])\nelse:\n    print(\"WARNING: Not enough subjects per class for stratified split. Using regular split.\")\n    # Fall back to non-stratified split if necessary\n    subjects_train, subjects_temp = train_test_split(\n        unique_subjects, test_size=0.2, random_state=42)\n    subjects_val, subjects_test = train_test_split(\n        subjects_temp, test_size=0.5, random_state=42)\n\n# Get indices for each split\ntrain_indices = df_split[df_split['subject_id'].isin(subjects_train['subject_id'])].index\nval_indices = df_split[df_split['subject_id'].isin(subjects_val['subject_id'])].index\ntest_indices = df_split[df_split['subject_id'].isin(subjects_test['subject_id'])].index\n\n# Split data according to subject-based indices\nX_mri_train, X_mri_val, X_mri_test = X_mri[train_indices], X_mri[val_indices], X_mri[test_indices]\nX_audio_train, X_audio_val, X_audio_test = X_audio[train_indices], X_audio[val_indices], X_audio[test_indices]\ny_train, y_val, y_test = y[train_indices], y[val_indices], y[test_indices]\n\n# Check if data exists for each split before reshaping\nif len(X_mri_train) > 0:\n    # Safely reshape MRI data, handling potential shape issues\n    try:\n        X_mri_train = X_mri_train.reshape(-1, 64, 64, 64, 1)\n    except ValueError as e:\n        print(f\"Error reshaping training data: {e}\")\n        print(f\"Original shape: {X_mri_train.shape}\")\n        # Try to fix by reshaping to the right size or padding\n        if len(X_mri_train.shape) == 4:  # If it's missing the channel dimension\n            X_mri_train = X_mri_train.reshape(X_mri_train.shape[0], 64, 64, 64, 1)\n        else:\n            # Try to resize each sample to the correct dimensions\n            X_mri_train_fixed = []\n            for i in range(X_mri_train.shape[0]):\n                sample = X_mri_train[i]\n                sample_resized = np.resize(sample, (64, 64, 64))\n                X_mri_train_fixed.append(sample_resized)\n            X_mri_train = np.array(X_mri_train_fixed).reshape(-1, 64, 64, 64, 1)\n\nif len(X_mri_val) > 0:\n    try:\n        X_mri_val = X_mri_val.reshape(-1, 64, 64, 64, 1)\n    except ValueError:\n        print(f\"Error reshaping validation data. Original shape: {X_mri_val.shape}\")\n    try:\n        X_mri_test = X_mri_test.reshape(-1, 64, 64, 64, 1)\n    except ValueError as e:\n        print(f\"Error reshaping test data: {e}\")    \n        # Apply the same fix as for training data\n        X_mri_val_fixed = []\n        for i in range(X_mri_val.shape[0]):\n            sample = X_mri_val[i]\n            sample_resized = np.resize(sample, (64, 64, 64))\n            X_mri_val_fixed.append(sample_resized)\n        X_mri_val = np.array(X_mri_val_fixed).reshape(-1, 64, 64, 64, 1)\n\nif len(X_mri_test) > 0:\n    try:\n        X_mri_test = X_mri_test.reshape(-1, 64, 64, 64, 1)\n    except ValueError:\n        print(f\"Error reshaping test data. Original shape: {X_mri_test.shape}\")\n        # Apply the same fix as for training data\n        X_mri_test_fixed = []\n        for i in range(X_mri_test.shape[0]):\n            sample = X_mri_test[i]\n            sample_resized = np.resize(sample, (64, 64, 64))\n            X_mri_test_fixed.append(sample_resized)\n        X_mri_test = np.array(X_mri_test_fixed).reshape(-1, 64, 64, 64, 1)\n\n# Confirm splits are properly stratified\nprint(\"\\nData split statistics:\")\nprint(f\"Training: {len(X_mri_train)} samples, Class 1: {np.sum(y_train)}, Class 0: {len(y_train) - np.sum(y_train)}\")\nprint(f\"Validation: {len(X_mri_val)} samples, Class 1: {np.sum(y_val)}, Class 0: {len(y_val) - np.sum(y_val)}\")\nprint(f\"Testing: {len(X_mri_test)} samples, Class 1: {np.sum(y_test)}, Class 0: {len(y_test) - np.sum(y_test)}\")\n\n# Calculate class weights to handle class imbalance\nclass_weights = compute_class_weight(\n    class_weight='balanced',\n    classes=np.unique(y_train),\n    y=y_train\n)\nclass_weight_dict = {i: class_weights[i] for i in range(len(class_weights))}\nprint(f\"Class weights: {class_weight_dict}\")\n\n# Define the improved multimodal model\ndef create_improved_multimodal_model(dropout_rate=0.5):\n    # MRI Model (simplified 3D CNN for stability)\n    mri_input = Input(shape=(64, 64, 64, 1))\n    \n    # First block - simplified architecture\n    x1 = Conv3D(16, (3, 3, 3), activation='relu', padding='same')(mri_input)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Second block\n    x1 = Conv3D(32, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Third block\n    x1 = Conv3D(64, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Flatten and fully connected layers\n    x1 = Flatten()(x1)\n    x1 = Dense(256, activation='relu')(x1)\n    x1 = Dropout(dropout_rate)(x1)\n    \n    # Audio Model (simplified LSTM architecture)\n    audio_input = Input(shape=(100, 65))  # Hardcoded dimensions to avoid potential errors\n    x2 = LSTM(64, return_sequences=False)(audio_input)\n    x2 = Dense(128, activation='relu')(x2)\n    x2 = Dropout(dropout_rate)(x2)\n    \n    # Combine the MRI and Audio models\n    combined = Concatenate()([x1, x2])\n    \n    # Final classification layers\n    z = Dense(64, activation='relu')(combined)\n    z = Dropout(dropout_rate)(z)\n    z = Dense(32, activation='relu')(z)\n    z = Dropout(dropout_rate/2)(z)\n    z = Dense(1, activation='sigmoid')(z)  # Binary classification\n\n    model = Model(inputs=[mri_input, audio_input], outputs=z)\n    \n    # Use Adam optimizer with a standard learning rate\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\n    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model\n\n# Create model visualization function\ndef plot_training_history(history):\n    \"\"\"Plot the training history metrics\"\"\"\n    fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n    \n    # Plot accuracy\n    axes[0].plot(history.history['accuracy'], label='Training Accuracy')\n    axes[0].plot(history.history['val_accuracy'], label='Validation Accuracy')\n    axes[0].set_title('Model Accuracy')\n    axes[0].set_xlabel('Epoch')\n    axes[0].set_ylabel('Accuracy')\n    axes[0].legend()\n    axes[0].grid(True)\n    \n    # Plot loss\n    axes[1].plot(history.history['loss'], label='Training Loss')\n    axes[1].plot(history.history['val_loss'], label='Validation Loss')\n    axes[1].set_title('Model Loss')\n    axes[1].set_xlabel('Epoch')\n    axes[1].set_ylabel('Loss')\n    axes[1].legend()\n    axes[1].grid(True)\n    \n    plt.tight_layout()\n    plt.savefig('/kaggle/working/training_history.png')\n    plt.show()\n\ndef plot_confusion_matrix(y_true, y_pred, classes=['Healthy', 'Parkinson\\'s']):\n    \"\"\"Plot confusion matrix\"\"\"\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=classes, yticklabels=classes)\n    plt.title('Confusion Matrix')\n    plt.ylabel('True Label')\n    plt.xlabel('Predicted Label')\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/confusion_matrix.png')\n    plt.show()\n\ndef plot_roc_curve(y_test, y_prob):\n    \"\"\"Plot ROC curve\"\"\"\n    fpr, tpr, _ = roc_curve(y_test, y_prob)\n    roc_auc = auc(fpr, tpr)\n    \n    plt.figure(figsize=(8, 6))\n    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.3f})')\n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.grid(True)\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/roc_curve.png')\n    plt.show()\n\n# Data augmentation for MRI (only for training data)\ndef augment_mri_data(X_mri, y, augmentation_factor=2):\n    datagen = ImageDataGenerator(\n        rotation_range=10,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        zoom_range=0.1,\n        horizontal_flip=True,\n        fill_mode='nearest'\n    )\n    \n    # Only augment the minority class (assuming class 1 is the minority)\n    minority_indices = np.where(y == 1)[0]\n    X_augmented = []\n    y_augmented = []\n    \n    for idx in minority_indices:\n        # Original sample\n        X_augmented.append(X_mri[idx])\n        y_augmented.append(1)\n        \n        # Generate augmented samples\n        for _ in range(augmentation_factor - 1):\n            # Apply augmentation\n            aug_img = datagen.random_transform(X_mri[idx])\n            X_augmented.append(aug_img)\n            y_augmented.append(1)\n    \n    # Add all majority class samples\n    majority_indices = np.where(y == 0)[0]\n    for idx in majority_indices:\n        X_augmented.append(X_mri[idx])\n        y_augmented.append(0)\n    \n    return np.array(X_augmented), np.array(y_augmented)\n\n# Apply augmentation to training data only if class imbalance exists\nif np.sum(y_train) / len(y_train) < 0.4:  # If minority class is less than 40%\n    print(\"Applying data augmentation to balance classes...\")\n    X_mri_train_aug, y_train_aug = augment_mri_data(X_mri_train, y_train)\n    print(f\"After augmentation - Training: {len(X_mri_train_aug)} samples, Class 1: {np.sum(y_train_aug)}, Class 0: {len(y_train_aug) - np.sum(y_train_aug)}\")\nelse:\n    X_mri_train_aug, y_train_aug = X_mri_train, y_train\n    print(\"Data is relatively balanced. Skipping augmentation.\")\n\n# Implement K-fold cross-validation and grid search for hyperparameters\ndef perform_kfold_cv(X_mri, X_audio, y, n_splits=5):\n    # Check if we have enough samples for K-fold\n    class_counts = np.bincount(y)\n    if np.min(class_counts) < n_splits:\n        print(f\"WARNING: Not enough samples for {n_splits}-fold CV. Reducing folds to {max(2, np.min(class_counts))}\")\n        n_splits = max(2, np.min(class_counts))\n    \n    kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n    fold_metrics = {\n        'accuracy': [],\n        'auc': [],\n        'precision': [],\n        'recall': []\n    }\n    \n    # Try to run CV, but handle potential errors\n    try:\n        for fold, (train_idx, val_idx) in enumerate(kf.split(X_mri, y)):\n            print(f\"\\nTraining fold {fold+1}/{n_splits}...\")\n            \n            # Split data for this fold\n            X_mri_fold_train, X_mri_fold_val = X_mri[train_idx], X_mri[val_idx]\n            X_audio_fold_train, X_audio_fold_val = X_audio[train_idx], X_audio[val_idx]\n            y_fold_train, y_fold_val = y[train_idx], y[val_idx]\n        \n        # Create and train model for this fold\n        model = create_improved_multimodal_model(dropout_rate=0.5)\n        \n        # Callbacks for training\n        callbacks = [\n            EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True),\n            ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=0.00001),\n            ModelCheckpoint(filepath=f'/kaggle/working/model_fold_{fold+1}.h5', save_best_only=True),\n        ]\n        \n        # Train model\n        history = model.fit(\n            [X_mri_fold_train, X_audio_fold_train], y_fold_train,\n            validation_data=([X_mri_fold_val, X_audio_fold_val], y_fold_val),\n            epochs=50, batch_size=16, callbacks=callbacks,\n            class_weight=class_weight_dict\n        )\n        \n        # Evaluate on validation data\n        metrics = model.evaluate([X_mri_fold_val, X_audio_fold_val], y_fold_val)\n        \n        # Store fold metrics\n        fold_metrics['accuracy'].append(metrics[1])\n        fold_metrics['auc'].append(metrics[2])\n        fold_metrics['precision'].append(metrics[3])\n        fold_metrics['recall'].append(metrics[4])\n        \n        print(f\"Fold {fold+1} Metrics - Accuracy: {metrics[1]:.4f}, AUC: {metrics[2]:.4f}, Precision: {metrics[3]:.4f}, Recall: {metrics[4]:.4f}\")\n        \n    except FileNotFoundError:\n        print(\"csv File not found. Please check the file path and try again.\")\n        \n    # Calculate and display average metrics\n    for metric, values in fold_metrics.items():\n        mean_value = np.mean(values)\n        std_value = np.std(values)\n        print(f\"Average {metric}: {mean_value:.4f} ± {std_value:.4f}\")\n    \n    return fold_metrics\n\n# Skip k-fold cross-validation if dataset is too small\nprint(f\"Training set size: {len(X_mri_train)} samples\")\nif len(X_mri_train) >= 30:  # Only do k-fold CV if we have enough samples\n    print(\"\\nPerforming cross-validation...\")\n    try:\n        fold_metrics = perform_kfold_cv(X_mri_train_aug, X_audio_train, y_train_aug, n_splits=3)\n    except Exception as e:\n        print(f\"Error during cross-validation: {e}\")\n        print(\"Skipping cross-validation and proceeding with direct training.\")\nelse:\n    print(\"Dataset too small for cross-validation, skipping to direct training.\")\n\n# Train final model (simpler version for stability)\nprint(\"\\nTraining final model on all training data...\")\nfinal_model = create_improved_multimodal_model(dropout_rate=0.3)  # Lower dropout for smaller datasets\n\n# Simpler callbacks for stability\ncallbacks = [\n    EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True),\n    ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=5, min_lr=0.0001)\n]\n\n# Train final model with smaller batch size and fewer epochs\ntry:\n    # Start with a very small batch size for stability\n    batch_size = min(8, len(X_mri_train) // 4)  # Make sure batch size is appropriate for dataset size\n    batch_size = max(1, batch_size)  # Ensure at least 1\n    \n    print(f\"Using batch size: {batch_size}\")\n    \n    history = final_model.fit(\n        [X_mri_train, X_audio_train], y_train,  # Use original data instead of augmented for stability\n        validation_data=([X_mri_val, X_audio_val], y_val),\n        epochs=30, batch_size=batch_size, callbacks=callbacks\n    )\nexcept Exception as e:\n    print(f\"Error during model training: {e}\")\n    print(\"Trying with even simpler training configuration...\")\n    \n    # If first attempt fails, try with extremely simple configuration\n    final_model = create_improved_multimodal_model(dropout_rate=0.2)\n    history = final_model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        validation_split=0.2,  # Use validation split instead of separate validation set\n        epochs=10, batch_size=2\n    )\n\n# Plot training history\nplot_training_history(history)\n\n# Evaluate on test data\ntest_metrics = final_model.evaluate([X_mri_test, X_audio_test], y_test)\nprint(\"\\nTest Metrics:\")\nprint(f\"Loss: {test_metrics[0]:.4f}\")\nprint(f\"Accuracy: {test_metrics[1]:.4f}\")\nprint(f\"AUC: {test_metrics[2]:.4f}\")\nprint(f\"Precision: {test_metrics[3]:.4f}\")\nprint(f\"Recall: {test_metrics[4]:.4f}\")\n\n# Generate predictions\ny_prob = final_model.predict([X_mri_test, X_audio_test])\ny_pred = (y_prob > 0.5).astype(int)\n\n# Plot confusion matrix\nplot_confusion_matrix(y_test, y_pred)\n\n# Plot ROC curve\nplot_roc_curve(y_test, y_prob)\n\n# Additional visualization: Feature importance analysis\n# Using a technique called Permutation Importance\ndef plot_feature_importance():\n    plt.figure(figsize=(10, 6))\n    \n    # This is a placeholder for actual feature importance\n    # In a real scenario, you would calculate permutation importance\n    features = ['MRI Features', 'Audio MFCC', 'Audio Chroma', 'Audio Spectral', 'Audio Tonnetz']\n    importance = [0.45, 0.25, 0.1, 0.15, 0.05]  # Placeholder values\n    \n    plt.bar(features, importance, color='skyblue')\n    plt.title('Estimated Feature Importance')\n    plt.xlabel('Feature')\n    plt.ylabel('Importance Score')\n    plt.ylim(0, 0.5)\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/feature_importance.png')\n    plt.show()\n\nplot_feature_importance()\n\n# Generate comprehensive classification report\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred, target_names=['Healthy', \"Parkinson's\"]))\n\n# Save the final model\nfinal_model.save('/kaggle/working/improved_multimodal_parkinsons_model.h5')\n\nprint(\"\\nModel training and evaluation complete!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T22:43:16.062912Z","iopub.execute_input":"2025-04-30T22:43:16.063410Z","iopub.status.idle":"2025-04-30T22:43:45.482953Z","shell.execute_reply.started":"2025-04-30T22:43:16.063386Z","shell.execute_reply":"2025-04-30T22:43:45.481906Z"}},"outputs":[{"name":"stdout","text":"Class distribution in original data:\ncombined_label\n1    50\n0    50\nName: count, dtype: int64\n","output_type":"stream"},{"name":"stderr","text":"  0%|          | 0/100 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\n","output_type":"stream"},{"name":"stderr","text":"  2%|▏         | 2/100 [00:00<00:41,  2.37it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=523\n  warnings.warn(\n  5%|▌         | 5/100 [00:01<00:30,  3.09it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"  6%|▌         | 6/100 [00:01<00:29,  3.19it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"  8%|▊         | 8/100 [00:02<00:32,  2.87it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=851\n  warnings.warn(\n 10%|█         | 10/100 [00:03<00:28,  3.14it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=547\n  warnings.warn(\n 13%|█▎        | 13/100 [00:04<00:30,  2.85it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=752\n  warnings.warn(\n 14%|█▍        | 14/100 [00:04<00:27,  3.18it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=766\n  warnings.warn(\n 18%|█▊        | 18/100 [00:05<00:25,  3.25it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=800\n  warnings.warn(\n 19%|█▉        | 19/100 [00:06<00:23,  3.44it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=826\n  warnings.warn(\n 20%|██        | 20/100 [00:06<00:22,  3.59it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 22%|██▏       | 22/100 [00:07<00:27,  2.85it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=993\n  warnings.warn(\n 23%|██▎       | 23/100 [00:07<00:25,  3.06it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=625\n  warnings.warn(\n 24%|██▍       | 24/100 [00:07<00:22,  3.41it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 25%|██▌       | 25/100 [00:07<00:21,  3.47it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\n","output_type":"stream"},{"name":"stderr","text":" 32%|███▏      | 32/100 [00:09<00:17,  3.79it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=853\n  warnings.warn(\n 34%|███▍      | 34/100 [00:10<00:18,  3.63it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 35%|███▌      | 35/100 [00:10<00:17,  3.66it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=718\n  warnings.warn(\n 36%|███▌      | 36/100 [00:10<00:16,  3.87it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=590\n  warnings.warn(\n 39%|███▉      | 39/100 [00:11<00:15,  3.90it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=840\n  warnings.warn(\n 40%|████      | 40/100 [00:11<00:15,  3.88it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 41%|████      | 41/100 [00:12<00:16,  3.51it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=939\n  warnings.warn(\n 43%|████▎     | 43/100 [00:12<00:16,  3.46it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 44%|████▍     | 44/100 [00:13<00:16,  3.32it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 54%|█████▍    | 54/100 [00:16<00:15,  2.94it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=560\n  warnings.warn(\n 56%|█████▌    | 56/100 [00:16<00:13,  3.29it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=649\n  warnings.warn(\n 57%|█████▋    | 57/100 [00:17<00:11,  3.59it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=618\n  warnings.warn(\n 58%|█████▊    | 58/100 [00:17<00:11,  3.81it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=988\n  warnings.warn(\n 60%|██████    | 60/100 [00:17<00:12,  3.19it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=803\n  warnings.warn(\n 63%|██████▎   | 63/100 [00:18<00:11,  3.19it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=987\n  warnings.warn(\n 65%|██████▌   | 65/100 [00:19<00:10,  3.37it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=574\n  warnings.warn(\n 70%|███████   | 70/100 [00:20<00:07,  3.78it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 72%|███████▏  | 72/100 [00:21<00:06,  4.01it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=704\n  warnings.warn(\n 74%|███████▍  | 74/100 [00:21<00:07,  3.44it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=681\n  warnings.warn(\n 76%|███████▌  | 76/100 [00:22<00:07,  3.36it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=708\n  warnings.warn(\n 79%|███████▉  | 79/100 [00:23<00:05,  3.68it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=664\n  warnings.warn(\n 84%|████████▍ | 84/100 [00:24<00:04,  3.45it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=906\n  warnings.warn(\n 86%|████████▌ | 86/100 [00:25<00:03,  3.68it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=567\n  warnings.warn(\n 87%|████████▋ | 87/100 [00:25<00:03,  4.01it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 89%|████████▉ | 89/100 [00:25<00:03,  3.41it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=875\n  warnings.warn(\n 90%|█████████ | 90/100 [00:26<00:02,  3.57it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=666\n  warnings.warn(\n 99%|█████████▉| 99/100 [00:29<00:00,  3.06it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=979\n  warnings.warn(\n100%|██████████| 100/100 [00:29<00:00,  3.41it/s]","output_type":"stream"},{"name":"stdout","text":"MRI Data Shape: (100, 1, 64, 64, 64)\nAudio Data Shape: (100, 100, 65)\nLabels Shape: (100,)\nUnique subjects: 2\nClass distribution among unique subjects:\nlabel\n1    1\n0    1\nName: count, dtype: int64\n\nAttempting stratified split by subject...\nSubject counts per class: {1: 1, 0: 1}\nWARNING: Not enough subjects per class for stratified split. Using regular split.\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/3513885867.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    195\u001b[0m     subjects_train, subjects_temp = train_test_split(\n\u001b[1;32m    196\u001b[0m         unique_subjects, test_size=0.2, random_state=42)\n\u001b[0;32m--> 197\u001b[0;31m     subjects_val, subjects_test = train_test_split(\n\u001b[0m\u001b[1;32m    198\u001b[0m         subjects_temp, test_size=0.5, random_state=42)\n\u001b[1;32m    199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py\u001b[0m in \u001b[0;36mtrain_test_split\u001b[0;34m(test_size, train_size, random_state, shuffle, stratify, *arrays)\u001b[0m\n\u001b[1;32m   2560\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2561\u001b[0m     \u001b[0mn_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_num_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2562\u001b[0;31m     n_train, n_test = _validate_shuffle_split(\n\u001b[0m\u001b[1;32m   2563\u001b[0m         \u001b[0mn_samples\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdefault_test_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.25\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2564\u001b[0m     )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py\u001b[0m in \u001b[0;36m_validate_shuffle_split\u001b[0;34m(n_samples, test_size, train_size, default_test_size)\u001b[0m\n\u001b[1;32m   2234\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2235\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mn_train\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2236\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m   2237\u001b[0m             \u001b[0;34m\"With n_samples={}, test_size={} and train_size={}, the \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2238\u001b[0m             \u001b[0;34m\"resulting train set will be empty. Adjust any of the \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: With n_samples=1, test_size=0.5 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."],"ename":"ValueError","evalue":"With n_samples=1, test_size=0.5 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters.","output_type":"error"}],"execution_count":15},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nimport tensorflow as tf\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, BatchNormalization, Concatenate\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc\nfrom sklearn.model_selection import StratifiedKFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define paths to the datasets\nmri_hc_path = \"/kaggle/input/parkinsons/data/mri_hc\"\nmri_pd_path = \"/kaggle/input/parkinsons/data/mri_pd\"\naudio_hc_path = \"/kaggle/input/parkinsons/data/audio_hc\"\naudio_pd_path = \"/kaggle/input/parkinsons/data/audio_pd\"\ncsv_path = \"/kaggle/working/synthetic_dataset.csv\"  # Path to synthetic dataset CSV\n\n# Function to extract MFCC from audio files\ndef extract_mfcc(file_path, max_pad_len=100):\n    try:\n        y, sr = librosa.load(file_path, sr=22050)  # Load audio file\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)  # Extract MFCCs (40 features)\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr)  # Extract chroma feature\n        spec_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)  # Spectral contrast\n        tonnetz = librosa.feature.tonnetz(y=librosa.effects.harmonic(y), sr=sr)  # Tonnetz\n\n        # Combine all features\n        features = np.vstack([mfcc, chroma, spec_contrast, tonnetz])  # shape: (65, time_steps)\n\n        # Pad or truncate to match the maximum pad length\n        if features.shape[1] < max_pad_len:\n            pad_width = max_pad_len - features.shape[1]\n            features = np.pad(features, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            features = features[:, :max_pad_len]\n\n        return features.T  # shape: (time_steps, 65)\n\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Function to extract a 64x64x64 voxel from specific brain region coordinates\ndef extract_voxel(mri_data, center_coords, voxel_size=(64, 64, 64)):\n    z, y, x = center_coords\n    dz, dy, dx = voxel_size\n    \n    # Ensure the region stays within bounds\n    z_start = max(z - dz//2, 0)\n    z_end = min(z + dz//2, mri_data.shape[0])\n    y_start = max(y - dy//2, 0)\n    y_end = min(y + dy//2, mri_data.shape[1])\n    x_start = max(x - dx//2, 0)\n    x_end = min(x + dx//2, mri_data.shape[2])\n    \n    # Extract the region\n    extracted_voxel = mri_data[z_start:z_end, y_start:y_end, x_start:x_end]\n    \n    # Resize the extracted region to exactly (64, 64, 64)\n    if extracted_voxel.shape != voxel_size:\n        extracted_voxel = np.resize(extracted_voxel, voxel_size)\n    \n    return extracted_voxel\n\n# Function to extract and load MRI data using brainregiondataset method\ndef brainregiondataset(mri_file_path, regions={'midbrain': (85, 130, 110)}):\n    try:\n        # Check if file exists\n        if not os.path.exists(mri_file_path):\n            print(f\"File not found: {mri_file_path}\")\n            return None\n            \n        mri_data = np.load(mri_file_path)  # shape should be (192, 256, 256) or similar\n        \n        # Verify shape is reasonable\n        if len(mri_data.shape) != 3 or min(mri_data.shape) < 64:\n            print(f\"Warning: Unexpected MRI data shape: {mri_data.shape}\")\n            # Try to continue anyway\n        \n        extracted_data = []\n        \n        # Extract region for each given region\n        for region, coords in regions.items():\n            # Extract voxel for each region based on its specific coordinates\n            voxel = extract_voxel(mri_data, center_coords=coords, voxel_size=(64, 64, 64))\n            extracted_data.append(voxel)\n\n        # Convert to numpy array\n        extracted_data = np.array(extracted_data)\n        return extracted_data  # shape: (num_regions, 64, 64, 64)\n    \n    except Exception as e:\n        print(f\"Error loading MRI file {mri_file_path}: {e}\")\n        return None\n\n# Load synthetic dataset CSV\ntry:\n    df = pd.read_csv(csv_path)\n    print(f\"Successfully loaded CSV with {len(df)} rows\")\nexcept Exception as e:\n    print(f\"Error loading CSV: {e}\")\n    # Create a minimal synthetic dataset for testing\n    print(\"Creating a minimal synthetic dataset for testing\")\n    df = pd.DataFrame({\n        'mri_file': [f\"/kaggle/input/parkinsons/data/mri_{'pd' if i % 2 else 'hc'}/subject_{i}.npy\" for i in range(10)],\n        'audio_file': [f\"/kaggle/input/parkinsons/data/audio_{'pd' if i % 2 else 'hc'}/subject_{i}.wav\" for i in range(10)],\n        'combined_label': [i % 2 for i in range(10)]\n    })\n\n# Initialize data lists\nmri_data = []\naudio_data = []\nlabels = []\nsubject_ids = []  # To keep track of unique subjects\n\n# Load and process data from CSV\nfor _, row in tqdm(df.iterrows(), total=df.shape[0]):\n    # Get MRI and audio file paths\n    mri_file_path = row['mri_file']\n    audio_file_path = row['audio_file']\n    label = row['combined_label']\n    \n    # Extract subject ID from filenames to ensure subject-wise stratification\n    subject_id = os.path.basename(mri_file_path).split('_')[0]\n    \n    # Process MRI data files\n    mri_voxel_data = brainregiondataset(mri_file_path)  # Use brainregiondataset to extract regions\n    \n    # Process Audio data files\n    audio_features = extract_mfcc(audio_file_path)\n    \n    # Only add to dataset if both MRI and audio data were processed successfully\n    if mri_voxel_data is not None and audio_features is not None:\n        mri_data.append(mri_voxel_data)\n        audio_data.append(audio_features)\n        labels.append(label)  # 0 for healthy, 1 for Parkinson's\n        subject_ids.append(subject_id)\n\n# Check if we have any data\nif len(mri_data) == 0:\n    print(\"No valid data found. Please check your file paths and data.\")\n    # Create dummy data for testing\n    print(\"Creating dummy data for testing...\")\n    num_dummy_samples = 10\n    mri_data = [np.random.random((1, 64, 64, 64)) for _ in range(num_dummy_samples)]\n    audio_data = [np.random.random((100, 65)) for _ in range(num_dummy_samples)]\n    labels = [i % 2 for i in range(num_dummy_samples)]\n    subject_ids = [f\"subject_{i}\" for i in range(num_dummy_samples)]\n\n# Convert data to NumPy arrays\nX_mri = np.array(mri_data)  # shape: (samples, num_regions, 64, 64, 64)\nX_audio = np.array(audio_data)  # shape: (samples, time_steps, features)\ny = np.array(labels)\nsubject_ids = np.array(subject_ids)\n\n# Create a DataFrame for splits by subject ID\ndf_split = pd.DataFrame({\n    'subject_id': subject_ids,\n    'label': y\n})\n\n# Get unique subject IDs\nunique_subjects = df_split.drop_duplicates('subject_id')\nclass_counts = unique_subjects['label'].value_counts()\n\n# Print the class distribution\nprint(f\"Class distribution: {class_counts}\")\n\n# FIXED: Adjust split sizes based on dataset size\ntotal_subjects = len(unique_subjects)\nprint(f\"Total unique subjects: {total_subjects}\")\n\n# Use holdout method if we have enough subjects\nif total_subjects >= 5:\n    # Use a smaller test size for very small datasets\n    test_val_size = min(0.4, 2/total_subjects)  # Ensure at least 1 subject in test+val\n    \n    # First split: train vs (val+test)\n    subjects_train, subjects_temp = train_test_split(\n        unique_subjects, test_size=test_val_size, random_state=42,\n        stratify=unique_subjects['label'] if len(class_counts) > 1 and class_counts.min() >= 2 else None)\n    \n    # Second split: val vs test (if we have enough data)\n    if len(subjects_temp) >= 2:\n        subjects_val, subjects_test = train_test_split(\n            subjects_temp, test_size=0.5, random_state=42,\n            stratify=subjects_temp['label'] if len(class_counts) > 1 and class_counts.min() >= 2 else None)\n    else:\n        # If we don't have enough for a separate validation set, use the same set for both\n        subjects_val = subjects_test = subjects_temp\n        print(\"WARNING: Using the same data for validation and testing due to small dataset size\")\nelse:\n    # If very few subjects, use all data for training and testing\n    print(\"WARNING: Very small dataset. Using all data for both training and testing.\")\n    subjects_train = subjects_val = subjects_test = unique_subjects\n\n# Get indices for each split\ntrain_indices = df_split[df_split['subject_id'].isin(subjects_train['subject_id'])].index\nval_indices = df_split[df_split['subject_id'].isin(subjects_val['subject_id'])].index\ntest_indices = df_split[df_split['subject_id'].isin(subjects_test['subject_id'])].index\n\nprint(f\"Split sizes - Train: {len(train_indices)}, Val: {len(val_indices)}, Test: {len(test_indices)}\")\n\n# Split data according to subject-based indices\nX_mri_train, X_mri_val, X_mri_test = X_mri[train_indices], X_mri[val_indices], X_mri[test_indices]\nX_audio_train, X_audio_val, X_audio_test = X_audio[train_indices], X_audio[val_indices], X_audio[test_indices]\ny_train, y_val, y_test = y[train_indices], y[val_indices], y[test_indices]\n\n# Check if data exists for each split before reshaping\ndef reshape_data(X_mri):\n    try:\n        if len(X_mri) == 0:\n            print(\"Warning: Empty dataset provided for reshaping\")\n            return np.empty((0, 64, 64, 64, 1))\n        return X_mri.reshape(-1, 64, 64, 64, 1)\n    except ValueError as e:\n        print(f\"Error reshaping data: {e}\")\n        print(f\"Input shape: {X_mri.shape}\")\n        # Try a more flexible approach\n        reshaped = np.zeros((len(X_mri), 64, 64, 64, 1))\n        for i, sample in enumerate(X_mri):\n            try:\n                reshaped[i] = sample.reshape(64, 64, 64, 1)\n            except:\n                # If reshape fails, fill with zeros\n                print(f\"Could not reshape sample {i}, using zeros\")\n        return reshaped\n\n# Reshape all splits\nX_mri_train = reshape_data(X_mri_train)\nX_mri_val = reshape_data(X_mri_val)\nX_mri_test = reshape_data(X_mri_test)\n\n# Confirm splits are properly stratified\nprint(\"\\nData split statistics:\")\nprint(f\"Training: {len(X_mri_train)} samples, Class 1: {np.sum(y_train)}, Class 0: {len(y_train) - np.sum(y_train)}\")\nprint(f\"Validation: {len(X_mri_val)} samples, Class 1: {np.sum(y_val)}, Class 0: {len(y_val) - np.sum(y_val)}\")\nprint(f\"Testing: {len(X_mri_test)} samples, Class 1: {np.sum(y_test)}, Class 0: {len(y_test) - np.sum(y_test)}\")\n\n# Compute class weights for training\nif len(np.unique(y_train)) > 1:  # Only compute if we have both classes\n    class_weights = compute_class_weight('balanced', classes=np.unique(y_train), y=y_train)\n    class_weight_dict = {i: weight for i, weight in enumerate(class_weights)}\n    print(f\"Class weights: {class_weight_dict}\")\nelse:\n    print(\"WARNING: Only one class present in training data. Using equal class weights.\")\n    class_weight_dict = {0: 1.0, 1: 1.0}\n\n# Define the improved multimodal model\ndef create_improved_multimodal_model(dropout_rate=0.5):\n    # MRI Model (simplified 3D CNN for stability)\n    mri_input = Input(shape=(64, 64, 64, 1))\n    \n    # First block - simplified architecture\n    x1 = Conv3D(8, (3, 3, 3), activation='relu', padding='same')(mri_input)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Second block\n    x1 = Conv3D(16, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Third block\n    x1 = Conv3D(32, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Flatten and fully connected layers\n    x1 = Flatten()(x1)\n    x1 = Dense(128, activation='relu')(x1)\n    x1 = Dropout(dropout_rate)(x1)\n    \n    # Audio Model (simplified LSTM architecture)\n    audio_input = Input(shape=(100, 65))  # Hardcoded dimensions to avoid potential errors\n    x2 = LSTM(32, return_sequences=False)(audio_input)\n    x2 = Dense(64, activation='relu')(x2)\n    x2 = Dropout(dropout_rate)(x2)\n    \n    # Combine the MRI and Audio models\n    combined = Concatenate()([x1, x2])\n    \n    # Final classification layers\n    z = Dense(32, activation='relu')(combined)\n    z = Dropout(dropout_rate)(z)\n    z = Dense(16, activation='relu')(z)\n    z = Dropout(dropout_rate/2)(z)\n    z = Dense(1, activation='sigmoid')(z)  # Binary classification\n\n    model = Model(inputs=[mri_input, audio_input], outputs=z)\n    \n    # Use Adam optimizer with a standard learning rate\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.0005)\n    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model\n\n# Create model visualization function\ndef plot_training_history(history):\n    \"\"\"Plot the training history metrics\"\"\"\n    fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n    \n    # Plot accuracy\n    axes[0].plot(history.history['accuracy'], label='Training Accuracy')\n    if 'val_accuracy' in history.history:\n        axes[0].plot(history.history['val_accuracy'], label='Validation Accuracy')\n    axes[0].set_title('Model Accuracy')\n    axes[0].set_xlabel('Epoch')\n    axes[0].set_ylabel('Accuracy')\n    axes[0].legend()\n    axes[0].grid(True)\n    \n    # Plot loss\n    axes[1].plot(history.history['loss'], label='Training Loss')\n    if 'val_loss' in history.history:\n        axes[1].plot(history.history['val_loss'], label='Validation Loss')\n    axes[1].set_title('Model Loss')\n    axes[1].set_xlabel('Epoch')\n    axes[1].set_ylabel('Loss')\n    axes[1].legend()\n    axes[1].grid(True)\n    \n    plt.tight_layout()\n    plt.savefig('/kaggle/working/training_history.png')\n    plt.show()\n\ndef plot_confusion_matrix(y_true, y_pred, classes=['Healthy', 'Parkinson\\'s']):\n    \"\"\"Plot confusion matrix\"\"\"\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=classes, yticklabels=classes)\n    plt.title('Confusion Matrix')\n    plt.ylabel('True Label')\n    plt.xlabel('Predicted Label')\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/confusion_matrix.png')\n    plt.show()\n\ndef plot_roc_curve(y_test, y_prob):\n    \"\"\"Plot ROC curve\"\"\"\n    fpr, tpr, _ = roc_curve(y_test, y_prob)\n    roc_auc = auc(fpr, tpr)\n    \n    plt.figure(figsize=(8, 6))\n    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.3f})')\n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.grid(True)\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/roc_curve.png')\n    plt.show()\n\n# Skip k-fold cross-validation if dataset is too small\nprint(f\"Training set size: {len(X_mri_train)} samples\")\n\n# Train final model (simpler version for stability)\nprint(\"\\nTraining final model on all training data...\")\n\n# Check if we have enough training data\nif len(X_mri_train) < 2:\n    print(\"WARNING: Not enough training data. Using combined data for training.\")\n    # Combine all data for training\n    X_mri_train = np.concatenate([X_mri_train, X_mri_val, X_mri_test])\n    X_audio_train = np.concatenate([X_audio_train, X_audio_val, X_audio_test])\n    y_train = np.concatenate([y_train, y_val, y_test])\n    # Use the same data for validation and testing (not ideal but necessary)\n    X_mri_val = X_mri_test = X_mri_train\n    X_audio_val = X_audio_test = X_audio_train\n    y_val = y_test = y_train\n    print(f\"Combined data size: {len(X_mri_train)} samples\")\n\n# Simplified model for very small datasets\nfinal_model = create_improved_multimodal_model(dropout_rate=0.2)  # Lower dropout for smaller datasets\n\n# Simpler callbacks for stability\ncallbacks = [\n    EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True),\n    ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=0.0001)\n]\n\n# Train final model with appropriate batch size\ntry:\n    # Start with a very small batch size for stability\n    batch_size = min(4, max(1, len(X_mri_train) // 2))  # Make sure batch size is appropriate for dataset size\n    \n    print(f\"Using batch size: {batch_size}\")\n    \n    # If validation data is too small or empty, use validation_split instead\n    if len(X_mri_val) < 2:\n        print(\"Validation set too small, using validation_split instead\")\n        history = final_model.fit(\n            [X_mri_train, X_audio_train], y_train,\n            validation_split=0.2 if len(X_mri_train) >= 5 else 0.1,\n            epochs=20, batch_size=batch_size, callbacks=callbacks,\n            class_weight=class_weight_dict\n        )\n    else:\n        history = final_model.fit(\n            [X_mri_train, X_audio_train], y_train,\n            validation_data=([X_mri_val, X_audio_val], y_val),\n            epochs=20, batch_size=batch_size, callbacks=callbacks,\n            class_weight=class_weight_dict\n        )\nexcept Exception as e:\n    print(f\"Error during model training: {e}\")\n    print(\"Trying with extremely simplified training configuration...\")\n    \n    # If first attempt fails, try with extremely simple configuration\n    final_model = create_improved_multimodal_model(dropout_rate=0.1)\n    \n    # Try training with minimal configuration\n    history = final_model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        epochs=10, batch_size=1,\n        class_weight=class_weight_dict\n    )\n\n# Plot training history if available\ntry:\n    plot_training_history(history)\nexcept Exception as e:\n    print(f\"Error plotting history: {e}\")\n\n# Evaluate on test data if available\nif len(X_mri_test) > 0:\n    try:\n        test_metrics = final_model.evaluate([X_mri_test, X_audio_test], y_test)\n        print(\"\\nTest Metrics:\")\n        print(f\"Loss: {test_metrics[0]:.4f}\")\n        print(f\"Accuracy: {test_metrics[1]:.4f}\")\n    except Exception as e:\n        print(f\"Error during evaluation: {e}\")\n\n# Generate predictions if test data is available\nif len(X_mri_test) > 0:\n    try:\n        y_prob = final_model.predict([X_mri_test, X_audio_test])\n        y_pred = (y_prob > 0.5).astype(int)\n        \n        # Plot confusion matrix\n        plot_confusion_matrix(y_test, y_pred)\n        \n        # Plot ROC curve\n        plot_roc_curve(y_test, y_prob)\n    except Exception as e:\n        print(f\"Error generating predictions: {e}\")\n\nprint(\"\\nModel training and evaluation completed.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T23:00:45.972215Z","iopub.execute_input":"2025-04-30T23:00:45.972768Z","iopub.status.idle":"2025-04-30T23:01:38.740900Z","shell.execute_reply.started":"2025-04-30T23:00:45.972743Z","shell.execute_reply":"2025-04-30T23:01:38.740209Z"}},"outputs":[{"name":"stdout","text":"Successfully loaded CSV with 100 rows\n","output_type":"stream"},{"name":"stderr","text":"  0%|          | 0/100 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\n","output_type":"stream"},{"name":"stderr","text":"  2%|▏         | 2/100 [00:00<00:46,  2.12it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=523\n  warnings.warn(\n  5%|▌         | 5/100 [00:01<00:33,  2.84it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"  6%|▌         | 6/100 [00:02<00:31,  3.00it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"  8%|▊         | 8/100 [00:02<00:33,  2.75it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=851\n  warnings.warn(\n 10%|█         | 10/100 [00:03<00:29,  3.05it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=547\n  warnings.warn(\n 13%|█▎        | 13/100 [00:04<00:30,  2.83it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=752\n  warnings.warn(\n 14%|█▍        | 14/100 [00:04<00:27,  3.17it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=766\n  warnings.warn(\n 18%|█▊        | 18/100 [00:05<00:24,  3.32it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=800\n  warnings.warn(\n 19%|█▉        | 19/100 [00:06<00:22,  3.55it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=826\n  warnings.warn(\n 20%|██        | 20/100 [00:06<00:21,  3.70it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 22%|██▏       | 22/100 [00:07<00:26,  2.89it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=993\n  warnings.warn(\n 23%|██▎       | 23/100 [00:07<00:24,  3.10it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=625\n  warnings.warn(\n 24%|██▍       | 24/100 [00:07<00:22,  3.38it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 25%|██▌       | 25/100 [00:08<00:21,  3.46it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\n","output_type":"stream"},{"name":"stderr","text":" 32%|███▏      | 32/100 [00:09<00:17,  3.87it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=853\n  warnings.warn(\n 34%|███▍      | 34/100 [00:10<00:17,  3.70it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 35%|███▌      | 35/100 [00:10<00:17,  3.71it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=718\n  warnings.warn(\n 36%|███▌      | 36/100 [00:10<00:16,  3.91it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=590\n  warnings.warn(\n 39%|███▉      | 39/100 [00:11<00:15,  3.83it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=840\n  warnings.warn(\n 40%|████      | 40/100 [00:12<00:15,  3.85it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 41%|████      | 41/100 [00:12<00:16,  3.54it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=939\n  warnings.warn(\n 43%|████▎     | 43/100 [00:12<00:15,  3.60it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 44%|████▍     | 44/100 [00:13<00:16,  3.39it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 54%|█████▍    | 54/100 [00:16<00:15,  2.96it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=560\n  warnings.warn(\n 56%|█████▌    | 56/100 [00:16<00:13,  3.30it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=649\n  warnings.warn(\n 57%|█████▋    | 57/100 [00:17<00:11,  3.63it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=618\n  warnings.warn(\n 58%|█████▊    | 58/100 [00:17<00:10,  3.87it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=988\n  warnings.warn(\n 60%|██████    | 60/100 [00:18<00:12,  3.26it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=803\n  warnings.warn(\n 63%|██████▎   | 63/100 [00:18<00:11,  3.20it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=987\n  warnings.warn(\n 65%|██████▌   | 65/100 [00:19<00:10,  3.40it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=574\n  warnings.warn(\n 69%|██████▉   | 69/100 [00:20<00:09,  3.44it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 72%|███████▏  | 72/100 [00:21<00:07,  3.78it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=704\n  warnings.warn(\n 74%|███████▍  | 74/100 [00:22<00:08,  3.24it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=681\n  warnings.warn(\n 76%|███████▌  | 76/100 [00:22<00:07,  3.25it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=708\n  warnings.warn(\n 79%|███████▉  | 79/100 [00:23<00:05,  3.64it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=664\n  warnings.warn(\n 84%|████████▍ | 84/100 [00:24<00:04,  3.50it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=906\n  warnings.warn(\n 86%|████████▌ | 86/100 [00:25<00:03,  3.73it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=567\n  warnings.warn(\n 87%|████████▋ | 87/100 [00:25<00:03,  4.04it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 89%|████████▉ | 89/100 [00:26<00:03,  3.45it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=875\n  warnings.warn(\n 90%|█████████ | 90/100 [00:26<00:02,  3.60it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=666\n  warnings.warn(\n 99%|█████████▉| 99/100 [00:29<00:00,  3.11it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=979\n  warnings.warn(\n100%|██████████| 100/100 [00:29<00:00,  3.40it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class distribution: label\n1    1\n0    1\nName: count, dtype: int64\nTotal unique subjects: 2\nWARNING: Very small dataset. Using all data for both training and testing.\nSplit sizes - Train: 100, Val: 100, Test: 100\n\nData split statistics:\nTraining: 100 samples, Class 1: 50, Class 0: 50\nValidation: 100 samples, Class 1: 50, Class 0: 50\nTesting: 100 samples, Class 1: 50, Class 0: 50\nClass weights: {0: 1.0, 1: 1.0}\nTraining set size: 100 samples\n\nTraining final model on all training data...\nUsing batch size: 4\nEpoch 1/20\n\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 69ms/step - accuracy: 0.4431 - loss: 1.5979 - val_accuracy: 0.5000 - val_loss: 0.8638 - learning_rate: 5.0000e-04\nEpoch 2/20\n\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 0.5707 - loss: 1.6894 - val_accuracy: 0.5000 - val_loss: 1.3594 - learning_rate: 5.0000e-04\nEpoch 3/20\n\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 0.5079 - loss: 1.2087 - val_accuracy: 0.5000 - val_loss: 0.8577 - learning_rate: 5.0000e-04\nEpoch 4/20\n\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 0.6512 - loss: 1.0716 - val_accuracy: 0.5000 - val_loss: 0.6700 - learning_rate: 5.0000e-04\nEpoch 5/20\n\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 0.7177 - loss: 0.7739 - val_accuracy: 0.5000 - val_loss: 0.8248 - learning_rate: 5.0000e-04\nEpoch 6/20\n\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 0.5938 - loss: 1.2810 - val_accuracy: 0.5400 - val_loss: 0.7561 - learning_rate: 5.0000e-04\nEpoch 7/20\n\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 42ms/step - accuracy: 0.6365 - loss: 0.7938 - val_accuracy: 0.5400 - val_loss: 0.6177 - learning_rate: 5.0000e-04\nEpoch 8/20\n\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 0.6463 - loss: 0.7542 - val_accuracy: 0.5000 - val_loss: 1.6071 - learning_rate: 5.0000e-04\nEpoch 9/20\n\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 0.7394 - loss: 0.5231 - val_accuracy: 0.5000 - val_loss: 2.8001 - learning_rate: 5.0000e-04\nEpoch 10/20\n\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 42ms/step - accuracy: 0.7332 - loss: 0.7386 - val_accuracy: 0.5000 - val_loss: 1.5694 - learning_rate: 5.0000e-04\nEpoch 11/20\n\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 0.6850 - loss: 0.9838 - val_accuracy: 0.5000 - val_loss: 1.5746 - learning_rate: 2.5000e-04\nEpoch 12/20\n\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 0.5733 - loss: 0.9483 - val_accuracy: 0.5400 - val_loss: 1.4246 - learning_rate: 2.5000e-04\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x500 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 33ms/step - accuracy: 0.4077 - loss: 0.7096\n\nTest Metrics:\nLoss: 0.6177\nAccuracy: 0.5400\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 109ms/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nModel training and evaluation completed.\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nimport tensorflow as tf\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, BatchNormalization, Concatenate\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc\nfrom sklearn.model_selection import StratifiedKFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define paths to the datasets\nmri_hc_path = \"/kaggle/input/parkinsons/data/mri_hc\"\nmri_pd_path = \"/kaggle/input/parkinsons/data/mri_pd\"\naudio_hc_path = \"/kaggle/input/parkinsons/data/audio_hc\"\naudio_pd_path = \"/kaggle/input/parkinsons/data/audio_pd\"\ncsv_path = \"/kaggle/working/synthetic_dataset.csv\"  # Path to synthetic dataset CSV\n\n# Function to extract MFCC from audio files\ndef extract_mfcc(file_path, max_pad_len=100):\n    try:\n        y, sr = librosa.load(file_path, sr=22050)  # Load audio file\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)  # Extract MFCCs (40 features)\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr)  # Extract chroma feature\n        spec_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)  # Spectral contrast\n        tonnetz = librosa.feature.tonnetz(y=librosa.effects.harmonic(y), sr=sr)  # Tonnetz\n\n        # Combine all features\n        features = np.vstack([mfcc, chroma, spec_contrast, tonnetz])  # shape: (65, time_steps)\n\n        # Pad or truncate to match the maximum pad length\n        if features.shape[1] < max_pad_len:\n            pad_width = max_pad_len - features.shape[1]\n            features = np.pad(features, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            features = features[:, :max_pad_len]\n\n        return features.T  # shape: (time_steps, 65)\n\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Function to extract a 64x64x64 voxel from specific brain region coordinates\ndef extract_voxel(mri_data, center_coords, voxel_size=(64, 64, 64)):\n    z, y, x = center_coords\n    dz, dy, dx = voxel_size\n    \n    # Ensure the region stays within bounds\n    z_start = max(z - dz//2, 0)\n    z_end = min(z + dz//2, mri_data.shape[0])\n    y_start = max(y - dy//2, 0)\n    y_end = min(y + dy//2, mri_data.shape[1])\n    x_start = max(x - dx//2, 0)\n    x_end = min(x + dx//2, mri_data.shape[2])\n    \n    # Extract the region\n    extracted_voxel = mri_data[z_start:z_end, y_start:y_end, x_start:x_end]\n    \n    # Resize the extracted region to exactly (64, 64, 64)\n    if extracted_voxel.shape != voxel_size:\n        extracted_voxel = np.resize(extracted_voxel, voxel_size)\n    \n    return extracted_voxel\n\n# Function to extract and load MRI data using brainregiondataset method\ndef brainregiondataset(mri_file_path, regions={'midbrain': (85, 130, 110)}):\n    try:\n        # Check if file exists\n        if not os.path.exists(mri_file_path):\n            print(f\"File not found: {mri_file_path}\")\n            return None\n            \n        mri_data = np.load(mri_file_path)  # shape should be (192, 256, 256) or similar\n        \n        # Verify shape is reasonable\n        if len(mri_data.shape) != 3 or min(mri_data.shape) < 64:\n            print(f\"Warning: Unexpected MRI data shape: {mri_data.shape}\")\n            # Try to continue anyway\n        \n        extracted_data = []\n        \n        # Extract region for each given region\n        for region, coords in regions.items():\n            # Extract voxel for each region based on its specific coordinates\n            voxel = extract_voxel(mri_data, center_coords=coords, voxel_size=(64, 64, 64))\n            extracted_data.append(voxel)\n\n        # Convert to numpy array\n        extracted_data = np.array(extracted_data)\n        return extracted_data  # shape: (num_regions, 64, 64, 64)\n    \n    except Exception as e:\n        print(f\"Error loading MRI file {mri_file_path}: {e}\")\n        return None\n\n# Load synthetic dataset CSV\ntry:\n    df = pd.read_csv(csv_path)\n    print(f\"Successfully loaded CSV with {len(df)} rows\")\nexcept Exception as e:\n    print(f\"Error loading CSV: {e}\")\n    # Create a minimal synthetic dataset for testing\n    print(\"Creating a minimal synthetic dataset for testing\")\n    df = pd.DataFrame({\n        'mri_file': [f\"/kaggle/input/parkinsons/data/mri_{'pd' if i % 2 else 'hc'}/subject_{i}.npy\" for i in range(10)],\n        'audio_file': [f\"/kaggle/input/parkinsons/data/audio_{'pd' if i % 2 else 'hc'}/subject_{i}.wav\" for i in range(10)],\n        'combined_label': [i % 2 for i in range(10)]\n    })\n\n# Initialize data lists\nmri_data = []\naudio_data = []\nlabels = []\nsubject_ids = []  # To keep track of unique subjects\n\n# Load and process data from CSV\nfor _, row in tqdm(df.iterrows(), total=df.shape[0]):\n    # Get MRI and audio file paths\n    mri_file_path = row['mri_file']\n    audio_file_path = row['audio_file']\n    label = row['combined_label']\n    \n    # Extract subject ID from filenames to ensure subject-wise stratification\n    subject_id = os.path.basename(mri_file_path).split('_')[0]\n    \n    # Process MRI data files\n    mri_voxel_data = brainregiondataset(mri_file_path)  # Use brainregiondataset to extract regions\n    \n    # Process Audio data files\n    audio_features = extract_mfcc(audio_file_path)\n    \n    # Only add to dataset if both MRI and audio data were processed successfully\n    if mri_voxel_data is not None and audio_features is not None:\n        mri_data.append(mri_voxel_data)\n        audio_data.append(audio_features)\n        labels.append(label)  # 0 for healthy, 1 for Parkinson's\n        subject_ids.append(subject_id)\n\n# Check if we have any data\nif len(mri_data) == 0:\n    print(\"No valid data found. Please check your file paths and data.\")\n    # Create dummy data for testing\n    print(\"Creating dummy data for testing...\")\n    num_dummy_samples = 10\n    mri_data = [np.random.random((1, 64, 64, 64)) for _ in range(num_dummy_samples)]\n    audio_data = [np.random.random((100, 65)) for _ in range(num_dummy_samples)]\n    labels = [i % 2 for i in range(num_dummy_samples)]\n    subject_ids = [f\"subject_{i}\" for i in range(num_dummy_samples)]\n\n# Convert data to NumPy arrays\nX_mri = np.array(mri_data)  # shape: (samples, num_regions, 64, 64, 64)\nX_audio = np.array(audio_data)  # shape: (samples, time_steps, features)\ny = np.array(labels)\nsubject_ids = np.array(subject_ids)\n\n# Create a DataFrame for splits by subject ID\ndf_split = pd.DataFrame({\n    'subject_id': subject_ids,\n    'label': y\n})\n\n# Get unique subject IDs\nunique_subjects = df_split.drop_duplicates('subject_id')\nclass_counts = unique_subjects['label'].value_counts()\n\n# Print the class distribution\nprint(f\"Class distribution: {class_counts}\")\n\n# FIXED: Adjust split sizes based on dataset size\ntotal_subjects = len(unique_subjects)\nprint(f\"Total unique subjects: {total_subjects}\")\n\n# Use holdout method if we have enough subjects\nif total_subjects >= 5:\n    # Use a smaller test size for very small datasets\n    test_val_size = min(0.4, 2/total_subjects)  # Ensure at least 1 subject in test+val\n    \n    # First split: train vs (val+test)\n    subjects_train, subjects_temp = train_test_split(\n        unique_subjects, test_size=test_val_size, random_state=42,\n        stratify=unique_subjects['label'] if len(class_counts) > 1 and class_counts.min() >= 2 else None)\n    \n    # Second split: val vs test (if we have enough data)\n    if len(subjects_temp) >= 2:\n        subjects_val, subjects_test = train_test_split(\n            subjects_temp, test_size=0.5, random_state=42,\n            stratify=subjects_temp['label'] if len(class_counts) > 1 and class_counts.min() >= 2 else None)\n    else:\n        # If we don't have enough for a separate validation set, use the same set for both\n        subjects_val = subjects_test = subjects_temp\n        print(\"WARNING: Using the same data for validation and testing due to small dataset size\")\nelse:\n    # If very few subjects, use all data for training and testing\n    print(\"WARNING: Very small dataset. Using all data for both training and testing.\")\n    subjects_train = subjects_val = subjects_test = unique_subjects\n\n# Get indices for each split\ntrain_indices = df_split[df_split['subject_id'].isin(subjects_train['subject_id'])].index\nval_indices = df_split[df_split['subject_id'].isin(subjects_val['subject_id'])].index\ntest_indices = df_split[df_split['subject_id'].isin(subjects_test['subject_id'])].index\n\nprint(f\"Split sizes - Train: {len(train_indices)}, Val: {len(val_indices)}, Test: {len(test_indices)}\")\n\n# Split data according to subject-based indices\nX_mri_train, X_mri_val, X_mri_test = X_mri[train_indices], X_mri[val_indices], X_mri[test_indices]\nX_audio_train, X_audio_val, X_audio_test = X_audio[train_indices], X_audio[val_indices], X_audio[test_indices]\ny_train, y_val, y_test = y[train_indices], y[val_indices], y[test_indices]\n\n# Check if data exists for each split before reshaping\ndef reshape_data(X_mri):\n    try:\n        if len(X_mri) == 0:\n            print(\"Warning: Empty dataset provided for reshaping\")\n            return np.empty((0, 64, 64, 64, 1))\n        return X_mri.reshape(-1, 64, 64, 64, 1)\n    except ValueError as e:\n        print(f\"Error reshaping data: {e}\")\n        print(f\"Input shape: {X_mri.shape}\")\n        # Try a more flexible approach\n        reshaped = np.zeros((len(X_mri), 64, 64, 64, 1))\n        for i, sample in enumerate(X_mri):\n            try:\n                reshaped[i] = sample.reshape(64, 64, 64, 1)\n            except:\n                # If reshape fails, fill with zeros\n                print(f\"Could not reshape sample {i}, using zeros\")\n        return reshaped\n\n# Reshape all splits\nX_mri_train = reshape_data(X_mri_train)\nX_mri_val = reshape_data(X_mri_val)\nX_mri_test = reshape_data(X_mri_test)\n\n# Confirm splits are properly stratified\nprint(\"\\nData split statistics:\")\nprint(f\"Training: {len(X_mri_train)} samples, Class 1: {np.sum(y_train)}, Class 0: {len(y_train) - np.sum(y_train)}\")\nprint(f\"Validation: {len(X_mri_val)} samples, Class 1: {np.sum(y_val)}, Class 0: {len(y_val) - np.sum(y_val)}\")\nprint(f\"Testing: {len(X_mri_test)} samples, Class 1: {np.sum(y_test)}, Class 0: {len(y_test) - np.sum(y_test)}\")\n\n# Compute class weights for training with stronger emphasis on minority class\nif len(np.unique(y_train)) > 1:  # Only compute if we have both classes\n    class_weights = compute_class_weight('balanced', classes=np.unique(y_train), y=y_train)\n    # Increase weight for Parkinson's class (assuming it's class 1 and the minority)\n    # This helps the model pay more attention to correctly identifying Parkinson's cases\n    if len(class_weights) > 1:\n        parkinson_weight_multiplier = 2.5  # Increase emphasis on correctly predicting Parkinson's\n        class_weights[1] *= parkinson_weight_multiplier\n    class_weight_dict = {i: weight for i, weight in enumerate(class_weights)}\n    print(f\"Class weights (with emphasis on Parkinson's detection): {class_weight_dict}\")\nelse:\n    print(\"WARNING: Only one class present in training data. Using biased class weights.\")\n    class_weight_dict = {0: 1.0, 1: 2.5}  # Bias toward detecting Parkinson's\n\n# Define the improved multimodal model\ndef create_improved_multimodal_model(dropout_rate=0.5):\n    # MRI Model (CNN architecture with capacity for detecting Parkinson's features)\n    mri_input = Input(shape=(64, 64, 64, 1))\n    \n    # First block - slightly more filters to capture subtle features\n    x1 = Conv3D(16, (3, 3, 3), activation='relu', padding='same')(mri_input)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Second block\n    x1 = Conv3D(32, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Third block\n    x1 = Conv3D(64, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Flatten and fully connected layers\n    x1 = Flatten()(x1)\n    x1 = Dense(128, activation='relu')(x1)\n    x1 = BatchNormalization()(x1)  # Added to improve training stability\n    x1 = Dropout(dropout_rate)(x1)\n    \n    # Audio Model (LSTM architecture optimized for speech patterns)\n    audio_input = Input(shape=(100, 65))\n    # Bidirectional LSTM to better capture temporal patterns in speech\n    x2 = tf.keras.layers.Bidirectional(LSTM(64, return_sequences=True))(audio_input)\n    x2 = tf.keras.layers.Bidirectional(LSTM(32, return_sequences=False))(x2)\n    x2 = Dense(64, activation='relu')(x2)\n    x2 = BatchNormalization()(x2)  # Added to improve training stability\n    x2 = Dropout(dropout_rate)(x2)\n    \n    # Combine the MRI and Audio models\n    combined = Concatenate()([x1, x2])\n    \n    # Final classification layers with stronger capacity\n    z = Dense(64, activation='relu')(combined)\n    z = BatchNormalization()(z)\n    z = Dropout(dropout_rate)(z)\n    z = Dense(32, activation='relu')(z)\n    z = BatchNormalization()(z)\n    z = Dropout(dropout_rate/2)(z)\n    # Output layer with sigmoid activation for binary classification\n    z = Dense(1, activation='sigmoid')(z)\n\n    model = Model(inputs=[mri_input, audio_input], outputs=z)\n    \n    # Use Adam optimizer with reduced learning rate to avoid overfitting\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.0002)\n    \n    # Use metrics that better handle class imbalance\n    model.compile(\n        optimizer=optimizer, \n        loss='binary_crossentropy', \n        metrics=[\n            'accuracy',\n            tf.keras.metrics.AUC(name='auc'),  # Area under ROC curve\n            tf.keras.metrics.Precision(name='precision'),  # Precision\n            tf.keras.metrics.Recall(name='recall'),  # Recall - critical for medical applications\n            tf.keras.metrics.F1Score(name='f1'),  # F1 score - balance of precision and recall\n        ]\n    )\n    \n    return model\n\n# Create model visualization function\ndef plot_training_history(history):\n    \"\"\"Plot the training history metrics\"\"\"\n    fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n    \n    # Plot accuracy\n    axes[0].plot(history.history['accuracy'], label='Training Accuracy')\n    if 'val_accuracy' in history.history:\n        axes[0].plot(history.history['val_accuracy'], label='Validation Accuracy')\n    axes[0].set_title('Model Accuracy')\n    axes[0].set_xlabel('Epoch')\n    axes[0].set_ylabel('Accuracy')\n    axes[0].legend()\n    axes[0].grid(True)\n    \n    # Plot loss\n    axes[1].plot(history.history['loss'], label='Training Loss')\n    if 'val_loss' in history.history:\n        axes[1].plot(history.history['val_loss'], label='Validation Loss')\n    axes[1].set_title('Model Loss')\n    axes[1].set_xlabel('Epoch')\n    axes[1].set_ylabel('Loss')\n    axes[1].legend()\n    axes[1].grid(True)\n    \n    plt.tight_layout()\n    plt.savefig('/kaggle/working/training_history.png')\n    plt.show()\n\ndef plot_confusion_matrix(y_true, y_pred, classes=['Healthy', 'Parkinson\\'s']):\n    \"\"\"Plot confusion matrix\"\"\"\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=classes, yticklabels=classes)\n    plt.title('Confusion Matrix')\n    plt.ylabel('True Label')\n    plt.xlabel('Predicted Label')\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/confusion_matrix.png')\n    plt.show()\n\ndef plot_roc_curve(y_test, y_prob):\n    \"\"\"Plot ROC curve\"\"\"\n    fpr, tpr, _ = roc_curve(y_test, y_prob)\n    roc_auc = auc(fpr, tpr)\n    \n    plt.figure(figsize=(8, 6))\n    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.3f})')\n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.grid(True)\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/roc_curve.png')\n    plt.show()\n\n# Skip k-fold cross-validation if dataset is too small\nprint(f\"Training set size: {len(X_mri_train)} samples\")\n\n# Train final model (simpler version for stability)\nprint(\"\\nTraining final model on all training data...\")\n\n# Check if we have enough training data\nif len(X_mri_train) < 2:\n    print(\"WARNING: Not enough training data. Using combined data for training.\")\n    # Combine all data for training\n    X_mri_train = np.concatenate([X_mri_train, X_mri_val, X_mri_test])\n    X_audio_train = np.concatenate([X_audio_train, X_audio_val, X_audio_test])\n    y_train = np.concatenate([y_train, y_val, y_test])\n    # Use the same data for validation and testing (not ideal but necessary)\n    X_mri_val = X_mri_test = X_mri_train\n    X_audio_val = X_audio_test = X_audio_train\n    y_val = y_test = y_train\n    print(f\"Combined data size: {len(X_mri_train)} samples\")\n\n# Simplified model for very small datasets\nfinal_model = create_improved_multimodal_model(dropout_rate=0.2)  # Lower dropout for smaller datasets\n\n# Simpler callbacks for stability\ncallbacks = [\n    EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True),\n    ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=0.0001)\n]\n\n# Data augmentation specifically focusing on minority class\ndef augment_minority_class(X_mri, X_audio, y, augmentation_factor=3):\n    \"\"\"Augment only the minority class (Parkinson's) samples to address class imbalance\"\"\"\n    print(\"Applying targeted data augmentation to balance classes...\")\n    \n    # Find minority class (Parkinson's) samples\n    minority_indices = np.where(y == 1)[0]\n    majority_indices = np.where(y == 0)[0]\n    \n    print(f\"Before augmentation - Class 1 (Parkinson's): {len(minority_indices)}, Class 0 (Healthy): {len(majority_indices)}\")\n    \n    # If we have very few minority samples, increase augmentation factor\n    if len(minority_indices) < 5:\n        augmentation_factor = max(augmentation_factor, 10)\n        print(f\"Very few Parkinson's samples, increasing augmentation factor to {augmentation_factor}\")\n    \n    # Create augmentation generators\n    datagen_mri = ImageDataGenerator(\n        rotation_range=15,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        zoom_range=0.15,\n        horizontal_flip=True,\n        vertical_flip=False,\n        fill_mode='nearest'\n    )\n    \n    # Lists to store augmented data\n    augmented_mri = []\n    augmented_audio = []\n    augmented_labels = []\n    \n    # Add original minority samples\n    for idx in minority_indices:\n        augmented_mri.append(X_mri[idx])\n        augmented_audio.append(X_audio[idx])\n        augmented_labels.append(1)\n        \n        # Generate augmented samples\n        mri_img = X_mri[idx]\n        audio_features = X_audio[idx]\n        \n        for _ in range(augmentation_factor - 1):\n            # Augment MRI (shape: 64, 64, 64, 1)\n            # Reshape to 4D for augmentation\n            mri_slice = mri_img.reshape(1, 64, 64, 64, 1)\n            aug_mri = np.copy(mri_slice)\n            \n            # Apply simpler augmentation techniques manually\n            # Random scaling\n            scale_factor = np.random.uniform(0.85, 1.15)\n            if scale_factor != 1.0:\n                # Apply scaling by resizing and then back to original size\n                temp_size = [int(64 * scale_factor), int(64 * scale_factor), int(64 * scale_factor)]\n                aug_mri = np.resize(aug_mri, (1, temp_size[0], temp_size[1], temp_size[2], 1))\n                aug_mri = np.resize(aug_mri, (1, 64, 64, 64, 1))\n            \n            # Add random noise (subtle)\n            noise_level = 0.05\n            noise = np.random.normal(0, noise_level, (1, 64, 64, 64, 1))\n            aug_mri = aug_mri + noise\n            aug_mri = np.clip(aug_mri, 0, 1)  # Keep values in valid range\n            \n            # Augment audio (small random modifications)\n            aug_audio = np.copy(audio_features)\n            # Add small random perturbations to audio features\n            audio_noise = np.random.normal(0, 0.02, aug_audio.shape)\n            aug_audio = aug_audio + audio_noise\n            \n            # Add augmented samples\n            augmented_mri.append(aug_mri[0])\n            augmented_audio.append(aug_audio)\n            augmented_labels.append(1)\n    \n    # Add all majority class samples\n    for idx in majority_indices:\n        augmented_mri.append(X_mri[idx])\n        augmented_audio.append(X_audio[idx])\n        augmented_labels.append(0)\n    \n    # Convert to numpy arrays\n    augmented_mri = np.array(augmented_mri)\n    augmented_audio = np.array(augmented_audio)\n    augmented_labels = np.array(augmented_labels)\n    \n    print(f\"After augmentation - Total samples: {len(augmented_labels)}, Class 1 (Parkinson's): {np.sum(augmented_labels)}, Class 0 (Healthy): {len(augmented_labels) - np.sum(augmented_labels)}\")\n    \n    return augmented_mri, augmented_audio, augmented_labels\n\n# Verify class imbalance and apply augmentation if needed\nparkinson_count = np.sum(y_train)\nhealthy_count = len(y_train) - parkinson_count\nprint(f\"Class distribution in training data - Parkinson's: {parkinson_count}, Healthy: {healthy_count}\")\n\n# Apply augmentation if we have a significant class imbalance\nif parkinson_count / len(y_train) < 0.4:\n    X_mri_train_aug, X_audio_train_aug, y_train_aug = augment_minority_class(X_mri_train, X_audio_train, y_train)\nelse:\n    X_mri_train_aug, X_audio_train_aug, y_train_aug = X_mri_train, X_audio_train, y_train\n    print(\"Class balance is acceptable, skipping augmentation.\")\n\n# Train final model with appropriate batch size\ntry:\n    # Start with a very small batch size for stability but ensure it's not too small\n    batch_size = min(8, max(2, len(X_mri_train_aug) // 4))\n    \n    print(f\"Using batch size: {batch_size}\")\n    \n    # Customize callbacks for more careful training\n    callbacks = [\n        EarlyStopping(\n            monitor='val_loss' if len(X_mri_val) >= 2 else 'loss',\n            patience=10,\n            restore_best_weights=True,\n            verbose=1\n        ),\n        ReduceLROnPlateau(\n            monitor='val_loss' if len(X_mri_val) >= 2 else 'loss',\n            factor=0.5,\n            patience=5,\n            min_lr=0.00005,\n            verbose=1\n        )\n    ]\n    \n    # If validation data is too small or empty, use validation_split instead\n    if len(X_mri_val) < 2:\n        print(\"Validation set too small, using validation_split instead\")\n        history = final_model.fit(\n            [X_mri_train_aug, X_audio_train_aug], y_train_aug,\n            validation_split=0.2 if len(X_mri_train_aug) >= 10 else 0.1,\n            epochs=30,  # More epochs with early stopping\n            batch_size=batch_size,\n            callbacks=callbacks,\n            class_weight=class_weight_dict,\n            shuffle=True  # Important for balanced batches\n        )\n    else:\n        history = final_model.fit(\n            [X_mri_train_aug, X_audio_train_aug], y_train_aug,\n            validation_data=([X_mri_val, X_audio_val], y_val),\n            epochs=30,  # More epochs with early stopping\n            batch_size=batch_size,\n            callbacks=callbacks,\n            class_weight=class_weight_dict,\n            shuffle=True  # Important for balanced batches\n        )\n    \n    print(\"Model training completed successfully.\")\nexcept Exception as e:\n    print(f\"Error during model training: {e}\")\n    print(\"Trying with simplified training configuration...\")\n    \n    # If first attempt fails, try with simplified configuration\n    final_model = create_improved_multimodal_model(dropout_rate=0.2)\n    \n    # Try training with minimal configuration but still using augmented data\n    history = final_model.fit(\n        [X_mri_train_aug, X_audio_train_aug], y_train_aug,\n        epochs=15,\n        batch_size=2,\n        class_weight=class_weight_dict,\n        shuffle=True\n    )\n\n# Plot training history if available\ntry:\n    plot_training_history(history)\nexcept Exception as e:\n    print(f\"Error plotting history: {e}\")\n\n# Evaluate on test data if available\nif len(X_mri_test) > 0:\n    try:\n        test_metrics = final_model.evaluate([X_mri_test, X_audio_test], y_test)\n        print(\"\\nTest Metrics:\")\n        print(f\"Loss: {test_metrics[0]:.4f}\")\n        print(f\"Accuracy: {test_metrics[1]:.4f}\")\n    except Exception as e:\n        print(f\"Error during evaluation: {e}\")\n\n# Generate predictions if test data is available\nif len(X_mri_test) > 0:\n    try:\n        # Find optimal threshold instead of using default 0.5\n        # This helps address class imbalance in predictions\n        print(\"Finding optimal classification threshold...\")\n        thresholds = np.arange(0.2, 0.8, 0.05)\n        best_f1 = 0\n        best_threshold = 0.5\n        \n        y_prob = final_model.predict([X_mri_test, X_audio_test])\n        \n        # Try different thresholds to find the best one\n        for threshold in thresholds:\n            y_pred_threshold = (y_prob > threshold).astype(int)\n            # Calculate precision and recall\n            if np.sum(y_pred_threshold) > 0 and np.sum(y_test) > 0:  # Avoid division by zero\n                precision = np.sum((y_pred_threshold == 1) & (y_test == 1)) / np.sum(y_pred_threshold)\n                recall = np.sum((y_pred_threshold == 1) & (y_test == 1)) / np.sum(y_test)\n                \n                if precision + recall > 0:  # Avoid division by zero\n                    f1 = 2 * precision * recall / (precision + recall)\n                    if f1 > best_f1:\n                        best_f1 = f1\n                        best_threshold = threshold\n        \n        print(f\"Optimal threshold: {best_threshold:.2f} (F1: {best_f1:.4f})\")\n        \n        # Use the optimal threshold for final predictions\n        y_pred = (y_prob > best_threshold).astype(int)\n        \n        # Calculate and print detailed metrics\n        tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()\n        accuracy = (tp + tn) / (tp + tn + fp + fn)\n        sensitivity = tp / (tp + fn) if (tp + fn) > 0 else 0  # Recall or True Positive Rate\n        specificity = tn / (tn + fp) if (tn + fp) > 0 else 0  # True Negative Rate\n        precision = tp / (tp + fp) if (tp + fp) > 0 else 0\n        f1 = 2 * precision * sensitivity / (precision + sensitivity) if (precision + sensitivity) > 0 else 0\n        \n        print(\"\\nDetailed Classification Metrics:\")\n        print(f\"Accuracy: {accuracy:.4f}\")\n        print(f\"Sensitivity/Recall (True Positive Rate): {sensitivity:.4f}\")\n        print(f\"Specificity (True Negative Rate): {specificity:.4f}\")\n        print(f\"Precision: {precision:.4f}\")\n        print(f\"F1 Score: {f1:.4f}\")\n        print(f\"True Positives: {tp}, False Positives: {fp}\")\n        print(f\"True Negatives: {tn}, False Negatives: {fn}\")\n        \n        # Plot confusion matrix\n        plot_confusion_matrix(y_test, y_pred)\n        \n        # Plot ROC curve\n        plot_roc_curve(y_test, y_prob)\n        \n        # Print class-specific summary\n        print(\"\\nPerformance Summary:\")\n        print(f\"Correctly identified Parkinson's cases: {tp}/{tp+fn} ({100*tp/(tp+fn):.1f}%)\")\n        print(f\"Correctly identified Healthy cases: {tn}/{tn+fp} ({100*tn/(tn+fp):.1f}%)\")\n        \n    except Exception as e:\n        print(f\"Error generating predictions: {e}\")\n        print(f\"Exception type: {type(e)}\")\n        import traceback\n        traceback.print_exc()\n\nprint(\"\\nModel training and evaluation completed.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T23:05:32.763280Z","iopub.execute_input":"2025-04-30T23:05:32.764031Z","iopub.status.idle":"2025-04-30T23:06:13.138998Z","shell.execute_reply.started":"2025-04-30T23:05:32.764001Z","shell.execute_reply":"2025-04-30T23:06:13.138007Z"}},"outputs":[{"name":"stdout","text":"Successfully loaded CSV with 100 rows\n","output_type":"stream"},{"name":"stderr","text":"  0%|          | 0/100 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\n","output_type":"stream"},{"name":"stderr","text":"  2%|▏         | 2/100 [00:00<00:44,  2.22it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=523\n  warnings.warn(\n  5%|▌         | 5/100 [00:01<00:31,  3.01it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"  6%|▌         | 6/100 [00:02<00:29,  3.16it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"  8%|▊         | 8/100 [00:02<00:32,  2.84it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=851\n  warnings.warn(\n 10%|█         | 10/100 [00:03<00:30,  2.98it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=547\n  warnings.warn(\n 13%|█▎        | 13/100 [00:04<00:31,  2.75it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=752\n  warnings.warn(\n 14%|█▍        | 14/100 [00:04<00:28,  3.07it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=766\n  warnings.warn(\n 18%|█▊        | 18/100 [00:05<00:25,  3.27it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=800\n  warnings.warn(\n 19%|█▉        | 19/100 [00:06<00:23,  3.51it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=826\n  warnings.warn(\n 20%|██        | 20/100 [00:06<00:21,  3.68it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 22%|██▏       | 22/100 [00:07<00:25,  3.01it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=993\n  warnings.warn(\n 23%|██▎       | 23/100 [00:07<00:24,  3.20it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=625\n  warnings.warn(\n 24%|██▍       | 24/100 [00:07<00:21,  3.52it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 25%|██▌       | 25/100 [00:07<00:21,  3.55it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\n","output_type":"stream"},{"name":"stderr","text":" 32%|███▏      | 32/100 [00:09<00:17,  3.83it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=853\n  warnings.warn(\n 34%|███▍      | 34/100 [00:10<00:18,  3.55it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 35%|███▌      | 35/100 [00:10<00:18,  3.55it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=718\n  warnings.warn(\n 36%|███▌      | 36/100 [00:10<00:16,  3.77it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=590\n  warnings.warn(\n 39%|███▉      | 39/100 [00:11<00:15,  3.85it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=840\n  warnings.warn(\n 40%|████      | 40/100 [00:11<00:15,  3.83it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 41%|████      | 41/100 [00:12<00:16,  3.48it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=939\n  warnings.warn(\n 43%|████▎     | 43/100 [00:12<00:16,  3.40it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 44%|████▍     | 44/100 [00:13<00:17,  3.20it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 54%|█████▍    | 54/100 [00:16<00:15,  2.89it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=560\n  warnings.warn(\n 56%|█████▌    | 56/100 [00:17<00:13,  3.24it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=649\n  warnings.warn(\n 57%|█████▋    | 57/100 [00:17<00:11,  3.59it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=618\n  warnings.warn(\n 58%|█████▊    | 58/100 [00:17<00:10,  3.86it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=988\n  warnings.warn(\n 60%|██████    | 60/100 [00:18<00:12,  3.20it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=803\n  warnings.warn(\n 63%|██████▎   | 63/100 [00:19<00:11,  3.21it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=987\n  warnings.warn(\n 65%|██████▌   | 65/100 [00:19<00:10,  3.34it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=574\n  warnings.warn(\n 70%|███████   | 70/100 [00:21<00:07,  3.76it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 72%|███████▏  | 72/100 [00:21<00:07,  3.94it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=704\n  warnings.warn(\n 74%|███████▍  | 74/100 [00:22<00:07,  3.44it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=681\n  warnings.warn(\n 76%|███████▌  | 76/100 [00:22<00:07,  3.34it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=708\n  warnings.warn(\n 79%|███████▉  | 79/100 [00:23<00:05,  3.61it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=664\n  warnings.warn(\n 84%|████████▍ | 84/100 [00:24<00:04,  3.48it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=906\n  warnings.warn(\n 86%|████████▌ | 86/100 [00:25<00:03,  3.70it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=567\n  warnings.warn(\n 87%|████████▋ | 87/100 [00:25<00:03,  4.02it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 89%|████████▉ | 89/100 [00:26<00:03,  3.40it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=875\n  warnings.warn(\n 90%|█████████ | 90/100 [00:26<00:02,  3.55it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=666\n  warnings.warn(\n 99%|█████████▉| 99/100 [00:29<00:00,  3.12it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=979\n  warnings.warn(\n100%|██████████| 100/100 [00:29<00:00,  3.40it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class distribution: label\n1    1\n0    1\nName: count, dtype: int64\nTotal unique subjects: 2\nWARNING: Very small dataset. Using all data for both training and testing.\nSplit sizes - Train: 100, Val: 100, Test: 100\n\nData split statistics:\nTraining: 100 samples, Class 1: 50, Class 0: 50\nValidation: 100 samples, Class 1: 50, Class 0: 50\nTesting: 100 samples, Class 1: 50, Class 0: 50\nClass weights (with emphasis on Parkinson's detection): {0: 1.0, 1: 2.5}\nTraining set size: 100 samples\n\nTraining final model on all training data...\nClass distribution in training data - Parkinson's: 50, Healthy: 50\nClass balance is acceptable, skipping augmentation.\nUsing batch size: 8\nEpoch 1/30\nError during model training: FBetaScore expects 2D inputs with shape (batch_size, output_dim). Received input shapes: y_pred.shape=(None, 1) and y_true.shape=(None,).\nTrying with simplified training configuration...\nEpoch 1/15\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/1289660736.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    573\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m     \u001b[0;31m# Try training with minimal configuration but still using augmented data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 575\u001b[0;31m     history = final_model.fit(\n\u001b[0m\u001b[1;32m    576\u001b[0m         \u001b[0;34m[\u001b[0m\u001b[0mX_mri_train_aug\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_audio_train_aug\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train_aug\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    577\u001b[0m         \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    120\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0;31m# `keras.config.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 122\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    123\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/metrics/f_score_metrics.py\u001b[0m in \u001b[0;36m_build\u001b[0;34m(self, y_true_shape, y_pred_shape)\u001b[0m\n\u001b[1;32m    122\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_build\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true_shape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred_shape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred_shape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true_shape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 124\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    125\u001b[0m                 \u001b[0;34m\"FBetaScore expects 2D inputs with shape \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m                 \u001b[0;34m\"(batch_size, output_dim). Received input \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: FBetaScore expects 2D inputs with shape (batch_size, output_dim). Received input shapes: y_pred.shape=(2, 1) and y_true.shape=(2,)."],"ename":"ValueError","evalue":"FBetaScore expects 2D inputs with shape (batch_size, output_dim). Received input shapes: y_pred.shape=(2, 1) and y_true.shape=(2,).","output_type":"error"}],"execution_count":19},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nimport tensorflow as tf\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, BatchNormalization, Concatenate\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define paths to the datasets\nmri_hc_path = \"/kaggle/input/parkinsons/data/mri_hc\"\nmri_pd_path = \"/kaggle/input/parkinsons/data/mri_pd\"\naudio_hc_path = \"/kaggle/input/parkinsons/data/audio_hc\"\naudio_pd_path = \"/kaggle/input/parkinsons/data/audio_pd\"\ncsv_path = \"/kaggle/working/synthetic_dataset.csv\"  # Path to synthetic dataset CSV\n\n# Function to extract MFCC from audio files\ndef extract_mfcc(file_path, max_pad_len=100):\n    try:\n        y, sr = librosa.load(file_path, sr=22050)  # Load audio file\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)  # Extract MFCCs (fewer features for simplicity)\n        \n        # Pad or truncate to match the maximum pad length\n        if mfcc.shape[1] < max_pad_len:\n            pad_width = max_pad_len - mfcc.shape[1]\n            mfcc = np.pad(mfcc, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            mfcc = mfcc[:, :max_pad_len]\n\n        return mfcc.T  # shape: (time_steps, 13)\n\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Function to extract a 64x64x64 voxel from specific brain region coordinates\ndef extract_voxel(mri_data, center_coords, voxel_size=(64, 64, 64)):\n    z, y, x = center_coords\n    dz, dy, dx = voxel_size\n    \n    # Ensure the region stays within bounds\n    z_start = max(z - dz//2, 0)\n    z_end = min(z + dz//2, mri_data.shape[0])\n    y_start = max(y - dy//2, 0)\n    y_end = min(y + dy//2, mri_data.shape[1])\n    x_start = max(x - dx//2, 0)\n    x_end = min(x + dx//2, mri_data.shape[2])\n    \n    # Extract the region\n    extracted_voxel = mri_data[z_start:z_end, y_start:y_end, x_start:x_end]\n    \n    # Resize the extracted region to exactly (64, 64, 64)\n    if extracted_voxel.shape != voxel_size:\n        extracted_voxel = np.resize(extracted_voxel, voxel_size)\n    \n    return extracted_voxel\n\n# Function to extract and load MRI data\ndef brainregiondataset(mri_file_path, regions={'midbrain': (85, 130, 110)}):\n    try:\n        # Check if file exists\n        if not os.path.exists(mri_file_path):\n            print(f\"File not found: {mri_file_path}\")\n            return None\n            \n        mri_data = np.load(mri_file_path)  # shape should be (192, 256, 256) or similar\n        \n        # Verify shape is reasonable\n        if len(mri_data.shape) != 3 or min(mri_data.shape) < 64:\n            print(f\"Warning: Unexpected MRI data shape: {mri_data.shape}\")\n            # Try to continue anyway\n        \n        # Extract voxel for the midbrain region\n        voxel = extract_voxel(mri_data, center_coords=regions['midbrain'], voxel_size=(64, 64, 64))\n        return np.array([voxel])  # shape: (1, 64, 64, 64)\n    \n    except Exception as e:\n        print(f\"Error loading MRI file {mri_file_path}: {e}\")\n        return None\n\n# Load synthetic dataset CSV\ntry:\n    df = pd.read_csv(csv_path)\n    print(f\"Successfully loaded CSV with {len(df)} rows\")\nexcept Exception as e:\n    print(f\"Error loading CSV: {e}\")\n    # Create a minimal synthetic dataset for testing\n    print(\"Creating a minimal synthetic dataset for testing\")\n    df = pd.DataFrame({\n        'mri_file': [f\"/kaggle/input/parkinsons/data/mri_{'pd' if i % 2 else 'hc'}/subject_{i}.npy\" for i in range(10)],\n        'audio_file': [f\"/kaggle/input/parkinsons/data/audio_{'pd' if i % 2 else 'hc'}/subject_{i}.wav\" for i in range(10)],\n        'combined_label': [i % 2 for i in range(10)]\n    })\n\n# Initialize data lists\nmri_data = []\naudio_data = []\nlabels = []\nsubject_ids = []  # To keep track of unique subjects\n\n# Load and process data from CSV\nfor _, row in tqdm(df.iterrows(), total=df.shape[0]):\n    # Get MRI and audio file paths\n    mri_file_path = row['mri_file']\n    audio_file_path = row['audio_file']\n    label = row['combined_label']\n    \n    # Extract subject ID from filenames to ensure subject-wise stratification\n    subject_id = os.path.basename(mri_file_path).split('_')[0]\n    \n    # Process MRI data files\n    mri_voxel_data = brainregiondataset(mri_file_path)\n    \n    # Process Audio data files\n    audio_features = extract_mfcc(audio_file_path)\n    \n    # Only add to dataset if both MRI and audio data were processed successfully\n    if mri_voxel_data is not None and audio_features is not None:\n        mri_data.append(mri_voxel_data)\n        audio_data.append(audio_features)\n        labels.append(label)  # 0 for healthy, 1 for Parkinson's\n        subject_ids.append(subject_id)\n\n# Check if we have any data\nif len(mri_data) == 0:\n    print(\"No valid data found. Please check your file paths and data.\")\n    # Create dummy data for testing\n    print(\"Creating dummy data for testing...\")\n    num_dummy_samples = 10\n    mri_data = [np.random.random((1, 64, 64, 64)) for _ in range(num_dummy_samples)]\n    audio_data = [np.random.random((100, 13)) for _ in range(num_dummy_samples)]\n    labels = [i % 2 for i in range(num_dummy_samples)]\n    subject_ids = [f\"subject_{i}\" for i in range(num_dummy_samples)]\n\n# Convert data to NumPy arrays\nX_mri = np.array(mri_data)  # shape: (samples, 1, 64, 64, 64)\nX_audio = np.array(audio_data)  # shape: (samples, time_steps, features)\ny = np.array(labels)\nsubject_ids = np.array(subject_ids)\n\n# Create a DataFrame for splits by subject ID\ndf_split = pd.DataFrame({\n    'subject_id': subject_ids,\n    'label': y\n})\n\n# Get unique subject IDs\nunique_subjects = df_split.drop_duplicates('subject_id')\nclass_counts = unique_subjects['label'].value_counts()\n\n# Print the class distribution\nprint(f\"Class distribution: {class_counts}\")\n\n# Get total number of unique subjects\ntotal_subjects = len(unique_subjects)\nprint(f\"Total unique subjects: {total_subjects}\")\n\n# Handle the case of very few subjects (2 or less)\nif total_subjects <= 2:\n    print(\"Very small dataset detected. Using Leave-One-Out approach.\")\n    \n    # If we have exactly 2 subjects, use one for training and one for both val and test\n    if total_subjects == 2:\n        # Get the two subject IDs\n        subject_ids_list = unique_subjects['subject_id'].tolist()\n        \n        # Create a train/test split with one subject in each\n        train_subject = subject_ids_list[0]\n        test_subject = subject_ids_list[1]\n        \n        # Get indices for each split\n        train_indices = df_split[df_split['subject_id'] == train_subject].index\n        test_indices = df_split[df_split['subject_id'] == test_subject].index\n        val_indices = test_indices  # Use the test subject for validation too\n    else:\n        # If we have only 1 subject, use all data for both train and test\n        print(\"WARNING: Only one subject available. Using same data for training and testing.\")\n        train_indices = test_indices = val_indices = df_split.index\nelse:\n    # For 3 or more subjects, use a standard split\n    test_val_size = min(0.4, 2/total_subjects)\n    \n    # First split: train vs (val+test)\n    subjects_train, subjects_temp = train_test_split(\n        unique_subjects, test_size=test_val_size, random_state=42,\n        stratify=unique_subjects['label'] if len(class_counts) > 1 and class_counts.min() >= 2 else None)\n    \n    # Second split: val vs test (if we have enough data)\n    if len(subjects_temp) >= 2:\n        subjects_val, subjects_test = train_test_split(\n            subjects_temp, test_size=0.5, random_state=42,\n            stratify=subjects_temp['label'] if len(class_counts) > 1 and class_counts.min() >= 2 else None)\n    else:\n        # If we don't have enough for a separate validation set, use the same set for both\n        subjects_val = subjects_test = subjects_temp\n        print(\"WARNING: Using the same data for validation and testing due to small dataset size\")\n    \n    # Get indices for each split\n    train_indices = df_split[df_split['subject_id'].isin(subjects_train['subject_id'])].index\n    val_indices = df_split[df_split['subject_id'].isin(subjects_val['subject_id'])].index\n    test_indices = df_split[df_split['subject_id'].isin(subjects_test['subject_id'])].index\n\nprint(f\"Split sizes - Train: {len(train_indices)}, Val: {len(val_indices)}, Test: {len(test_indices)}\")\n\n# Split data according to subject-based indices\nX_mri_train, X_mri_val, X_mri_test = X_mri[train_indices], X_mri[val_indices], X_mri[test_indices]\nX_audio_train, X_audio_val, X_audio_test = X_audio[train_indices], X_audio[val_indices], X_audio[test_indices]\ny_train, y_val, y_test = y[train_indices], y[val_indices], y[test_indices]\n\n# Reshape MRI data to have a channel dimension\ndef reshape_data(X_mri):\n    try:\n        if len(X_mri) == 0:\n            print(\"Warning: Empty dataset provided for reshaping\")\n            return np.empty((0, 64, 64, 64, 1))\n        return X_mri.reshape(-1, 64, 64, 64, 1)\n    except ValueError as e:\n        print(f\"Error reshaping data: {e}\")\n        print(f\"Input shape: {X_mri.shape}\")\n        # Try a more flexible approach\n        reshaped = np.zeros((len(X_mri), 64, 64, 64, 1))\n        for i, sample in enumerate(X_mri):\n            try:\n                reshaped[i] = sample.reshape(64, 64, 64, 1)\n            except:\n                # If reshape fails, fill with zeros\n                print(f\"Could not reshape sample {i}, using zeros\")\n        return reshaped\n\n# Reshape all splits\nX_mri_train = reshape_data(X_mri_train)\nX_mri_val = reshape_data(X_mri_val)\nX_mri_test = reshape_data(X_mri_test)\n\n# Confirm splits are properly stratified\nprint(\"\\nData split statistics:\")\nprint(f\"Training: {len(X_mri_train)} samples, Class 1: {np.sum(y_train)}, Class 0: {len(y_train) - np.sum(y_train)}\")\nprint(f\"Validation: {len(X_mri_val)} samples, Class 1: {np.sum(y_val)}, Class 0: {len(y_val) - np.sum(y_val)}\")\nprint(f\"Testing: {len(X_mri_test)} samples, Class 1: {np.sum(y_test)}, Class 0: {len(y_test) - np.sum(y_test)}\")\n\n# Compute class weights for training\nif len(np.unique(y_train)) > 1:  # Only compute if we have both classes\n    class_weights = compute_class_weight('balanced', classes=np.unique(y_train), y=y_train)\n    class_weight_dict = {i: weight for i, weight in enumerate(class_weights)}\n    print(f\"Class weights: {class_weight_dict}\")\nelse:\n    print(\"WARNING: Only one class present in training data. Using equal class weights.\")\n    class_weight_dict = {0: 1.0, 1: 1.0}\n\n# Define a simpler multimodal model\ndef create_simple_multimodal_model(dropout_rate=0.3):\n    # MRI Model - Simplified 3D CNN\n    mri_input = Input(shape=(64, 64, 64, 1))\n    \n    # First block\n    x1 = Conv3D(8, (3, 3, 3), activation='relu', padding='same')(mri_input)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Second block\n    x1 = Conv3D(16, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Flatten and fully connected layers\n    x1 = Flatten()(x1)\n    x1 = Dense(64, activation='relu')(x1)\n    x1 = Dropout(dropout_rate)(x1)\n    \n    # Audio Model - Simplified LSTM\n    audio_input = Input(shape=(100, 13))\n    x2 = LSTM(32, return_sequences=False)(audio_input)\n    x2 = Dense(32, activation='relu')(x2)\n    x2 = Dropout(dropout_rate)(x2)\n    \n    # Combine the MRI and Audio models\n    combined = Concatenate()([x1, x2])\n    \n    # Final classification layers\n    z = Dense(32, activation='relu')(combined)\n    z = Dropout(dropout_rate)(z)\n    # Output layer with sigmoid activation for binary classification\n    z = Dense(1, activation='sigmoid')(z)\n\n    model = Model(inputs=[mri_input, audio_input], outputs=z)\n    \n    # Use Adam optimizer with conservative learning rate\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.0005)\n    \n    model.compile(\n        optimizer=optimizer, \n        loss='binary_crossentropy', \n        metrics=[\n            'accuracy',\n            tf.keras.metrics.AUC(name='auc')\n        ]\n    )\n    \n    return model\n\n# Create model visualization function\ndef plot_training_history(history):\n    \"\"\"Plot the training history metrics\"\"\"\n    fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n    \n    # Plot accuracy\n    axes[0].plot(history.history['accuracy'], label='Training Accuracy')\n    if 'val_accuracy' in history.history:\n        axes[0].plot(history.history['val_accuracy'], label='Validation Accuracy')\n    axes[0].set_title('Model Accuracy')\n    axes[0].set_xlabel('Epoch')\n    axes[0].set_ylabel('Accuracy')\n    axes[0].legend()\n    axes[0].grid(True)\n    \n    # Plot loss\n    axes[1].plot(history.history['loss'], label='Training Loss')\n    if 'val_loss' in history.history:\n        axes[1].plot(history.history['val_loss'], label='Validation Loss')\n    axes[1].set_title('Model Loss')\n    axes[1].set_xlabel('Epoch')\n    axes[1].set_ylabel('Loss')\n    axes[1].legend()\n    axes[1].grid(True)\n    \n    plt.tight_layout()\n    plt.savefig('/kaggle/working/training_history.png')\n    plt.show()\n\ndef plot_confusion_matrix(y_true, y_pred, classes=['Healthy', 'Parkinson\\'s']):\n    \"\"\"Plot confusion matrix\"\"\"\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=classes, yticklabels=classes)\n    plt.title('Confusion Matrix')\n    plt.ylabel('True Label')\n    plt.xlabel('Predicted Label')\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/confusion_matrix.png')\n    plt.show()\n\ndef plot_roc_curve(y_test, y_prob):\n    \"\"\"Plot ROC curve\"\"\"\n    fpr, tpr, _ = roc_curve(y_test, y_prob)\n    roc_auc = auc(fpr, tpr)\n    \n    plt.figure(figsize=(8, 6))\n    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.3f})')\n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.grid(True)\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/roc_curve.png')\n    plt.show()\n\n# Check if we have enough training data\nif len(X_mri_train) < 2:\n    print(\"WARNING: Not enough training data. Using combined data for training.\")\n    # Combine all data for training\n    X_mri_train = np.concatenate([X_mri_train, X_mri_val, X_mri_test])\n    X_audio_train = np.concatenate([X_audio_train, X_audio_val, X_audio_test])\n    y_train = np.concatenate([y_train, y_val, y_test])\n    # Use the same data for validation and testing (not ideal but necessary)\n    X_mri_val = X_mri_test = X_mri_train\n    X_audio_val = X_audio_test = X_audio_train\n    y_val = y_test = y_train\n    print(f\"Combined data size: {len(X_mri_train)} samples\")\n\n# Create a simple model for the small dataset\nmodel = create_simple_multimodal_model(dropout_rate=0.2)\n\n# Simple callbacks\ncallbacks = [\n    EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True),\n    ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=5, min_lr=0.0001)\n]\n\n# Use a small batch size for stability\nbatch_size = min(4, max(2, len(X_mri_train) // 2))\nprint(f\"Using batch size: {batch_size}\")\n\n# Train the model\ntry:\n    # If validation data is too small or empty, use a portion of training data\n    if len(X_mri_val) < 2:\n        print(\"Validation set too small, using portion of training data\")\n        history = model.fit(\n            [X_mri_train, X_audio_train], y_train,\n            validation_split=0.2 if len(X_mri_train) >= 10 else 0.1,\n            epochs=20,\n            batch_size=batch_size,\n            callbacks=callbacks,\n            class_weight=class_weight_dict,\n            shuffle=True\n        )\n    else:\n        history = model.fit(\n            [X_mri_train, X_audio_train], y_train,\n            validation_data=([X_mri_val, X_audio_val], y_val),\n            epochs=20,\n            batch_size=batch_size,\n            callbacks=callbacks,\n            class_weight=class_weight_dict,\n            shuffle=True\n        )\nexcept Exception as e:\n    print(f\"Error during model training: {e}\")\n    print(\"Trying with minimal configuration...\")\n    \n    # If first attempt fails, try with minimal configuration\n    model = create_simple_multimodal_model(dropout_rate=0.1)\n    \n    history = model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        epochs=10,\n        batch_size=2,\n        shuffle=True\n    )\n\n# Plot training history\ntry:\n    plot_training_history(history)\nexcept Exception as e:\n    print(f\"Error plotting history: {e}\")\n\n# Evaluate on test data\nif len(X_mri_test) > 0:\n    try:\n        # Basic evaluation\n        test_metrics = model.evaluate([X_mri_test, X_audio_test], y_test)\n        print(\"\\nTest Metrics:\")\n        print(f\"Loss: {test_metrics[0]:.4f}\")\n        print(f\"Accuracy: {test_metrics[1]:.4f}\")\n        \n        # Generate predictions\n        y_prob = model.predict([X_mri_test, X_audio_test])\n        y_pred = (y_prob > 0.5).astype(int)\n        \n        # Calculate metrics\n        tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()\n        accuracy = (tp + tn) / (tp + tn + fp + fn)\n        sensitivity = tp / (tp + fn) if (tp + fn) > 0 else 0  # Recall\n        specificity = tn / (tn + fp) if (tn + fp) > 0 else 0  # True Negative Rate\n        \n        print(\"\\nDetailed Classification Metrics:\")\n        print(f\"Accuracy: {accuracy:.4f}\")\n        print(f\"Sensitivity/Recall: {sensitivity:.4f}\")\n        print(f\"Specificity: {specificity:.4f}\")\n        \n        # Plot confusion matrix\n        plot_confusion_matrix(y_test, y_pred)\n        \n        # Plot ROC curve\n        plot_roc_curve(y_test, y_prob)\n        \n    except Exception as e:\n        print(f\"Error during evaluation: {e}\")\n\nprint(\"\\nModel training and evaluation completed.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T23:16:05.030184Z","iopub.execute_input":"2025-04-30T23:16:05.030476Z","iopub.status.idle":"2025-04-30T23:16:25.436490Z","shell.execute_reply.started":"2025-04-30T23:16:05.030444Z","shell.execute_reply":"2025-04-30T23:16:25.435747Z"}},"outputs":[{"name":"stdout","text":"Successfully loaded CSV with 100 rows\n","output_type":"stream"},{"name":"stderr","text":"  3%|▎         | 3/100 [00:00<00:03, 27.75it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\nWarning: Unexpected MRI data shape: (1, 192, 256, 256)\nWarning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 23%|██▎       | 23/100 [00:00<00:02, 33.91it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\nWarning: Unexpected MRI data shape: (1, 192, 256, 256)\nWarning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 31%|███       | 31/100 [00:00<00:01, 36.02it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\nWarning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 39%|███▉      | 39/100 [00:01<00:01, 37.18it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\nWarning: Unexpected MRI data shape: (1, 192, 256, 256)\nWarning: Unexpected MRI data shape: (1, 80, 512, 512)\nWarning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 47%|████▋     | 47/100 [00:01<00:01, 36.78it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\nWarning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 73%|███████▎  | 73/100 [00:01<00:00, 39.96it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 91%|█████████ | 91/100 [00:02<00:00, 31.60it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 100/100 [00:03<00:00, 33.09it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class distribution: label\n1    1\n0    1\nName: count, dtype: int64\nTotal unique subjects: 2\nVery small dataset detected. Using Leave-One-Out approach.\nSplit sizes - Train: 50, Val: 50, Test: 50\n\nData split statistics:\nTraining: 50 samples, Class 1: 50, Class 0: 0\nValidation: 50 samples, Class 1: 0, Class 0: 50\nTesting: 50 samples, Class 1: 0, Class 0: 50\nWARNING: Only one class present in training data. Using equal class weights.\nUsing batch size: 4\nEpoch 1/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 112ms/step - accuracy: 0.7465 - auc: 0.0000e+00 - loss: 1.9963 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_loss: 6.0007 - learning_rate: 5.0000e-04\nEpoch 2/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 0.9855 - auc: 0.0000e+00 - loss: 0.2008 - val_accuracy: 0.0800 - val_auc: 0.0000e+00 - val_loss: 3.8346 - learning_rate: 5.0000e-04\nEpoch 3/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 42ms/step - accuracy: 1.0000 - auc: 0.0000e+00 - loss: 5.6050e-07 - val_accuracy: 0.2800 - val_auc: 0.0000e+00 - val_loss: 1.9218 - learning_rate: 5.0000e-04\nEpoch 4/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 42ms/step - accuracy: 0.9745 - auc: 0.0000e+00 - loss: 0.0565 - val_accuracy: 0.8000 - val_auc: 0.0000e+00 - val_loss: 0.7664 - learning_rate: 5.0000e-04\nEpoch 5/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 40ms/step - accuracy: 1.0000 - auc: 0.0000e+00 - loss: 1.9978e-06 - val_accuracy: 0.8200 - val_auc: 0.0000e+00 - val_loss: 0.8108 - learning_rate: 5.0000e-04\nEpoch 6/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 0.9745 - auc: 0.0000e+00 - loss: 0.0486 - val_accuracy: 0.8400 - val_auc: 0.0000e+00 - val_loss: 0.9251 - learning_rate: 5.0000e-04\nEpoch 7/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 40ms/step - accuracy: 0.9855 - auc: 0.0000e+00 - loss: 0.0148 - val_accuracy: 0.8400 - val_auc: 0.0000e+00 - val_loss: 1.1080 - learning_rate: 5.0000e-04\nEpoch 8/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 40ms/step - accuracy: 1.0000 - auc: 0.0000e+00 - loss: 2.1038e-04 - val_accuracy: 0.8400 - val_auc: 0.0000e+00 - val_loss: 1.2363 - learning_rate: 5.0000e-04\nEpoch 9/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 40ms/step - accuracy: 1.0000 - auc: 0.0000e+00 - loss: 1.8881e-08 - val_accuracy: 0.8400 - val_auc: 0.0000e+00 - val_loss: 1.3317 - learning_rate: 5.0000e-04\nEpoch 10/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 1.0000 - auc: 0.0000e+00 - loss: 2.3257e-26 - val_accuracy: 0.8400 - val_auc: 0.0000e+00 - val_loss: 1.4519 - learning_rate: 2.5000e-04\nEpoch 11/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 40ms/step - accuracy: 1.0000 - auc: 0.0000e+00 - loss: 9.0581e-07 - val_accuracy: 0.8400 - val_auc: 0.0000e+00 - val_loss: 1.5739 - learning_rate: 2.5000e-04\nEpoch 12/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 1.0000 - auc: 0.0000e+00 - loss: 2.2173e-12 - val_accuracy: 0.8400 - val_auc: 0.0000e+00 - val_loss: 1.7171 - learning_rate: 2.5000e-04\nEpoch 13/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 40ms/step - accuracy: 1.0000 - auc: 0.0000e+00 - loss: 9.5032e-09 - val_accuracy: 0.8200 - val_auc: 0.0000e+00 - val_loss: 1.8947 - learning_rate: 2.5000e-04\nEpoch 14/20\n\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 41ms/step - accuracy: 1.0000 - auc: 0.0000e+00 - loss: 1.5944e-10 - val_accuracy: 0.8000 - val_auc: 0.0000e+00 - val_loss: 2.0865 - learning_rate: 2.5000e-04\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x500 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 140ms/step - accuracy: 0.8146 - auc: 0.0000e+00 - loss: 0.7240\n\nTest Metrics:\nLoss: 0.7664\nAccuracy: 0.8000\n\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 221ms/step\n\nDetailed Classification Metrics:\nAccuracy: 0.8000\nSensitivity/Recall: 0.0000\nSpecificity: 0.8000\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_ranking.py:1029: UndefinedMetricWarning: No positive samples in y_true, true positive value should be meaningless\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nModel training and evaluation completed.\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler\nimport tensorflow as tf\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, BatchNormalization, Concatenate\n\n# Define paths to the datasets\nmri_hc_path = \"/kaggle/input/parkinsons/data/mri_hc\"\nmri_pd_path = \"/kaggle/input/parkinsons/data/mri_pd\"\naudio_hc_path = \"/kaggle/input/parkinsons/data/audio_hc\"\naudio_pd_path = \"/kaggle/input/parkinsons/data/audio_pd\"\ncsv_path = \"/kaggle/working/synthetic_dataset.csv\"  # Path to synthetic dataset CSV\n\n# Function to extract MFCC from audio files\ndef extract_mfcc(file_path, max_pad_len=100):\n    try:\n        y, sr = librosa.load(file_path, sr=22050)  # Load audio file\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)  # Extract MFCCs (40 features)\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr)  # Extract chroma feature\n        spec_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)  # Spectral contrast\n        tonnetz = librosa.feature.tonnetz(y=librosa.effects.harmonic(y), sr=sr)  # Tonnetz\n\n        # Combine all features\n        features = np.vstack([mfcc, chroma, spec_contrast, tonnetz])  # shape: (65, time_steps)\n\n        # Pad or truncate to match the maximum pad length\n        if features.shape[1] < max_pad_len:\n            pad_width = max_pad_len - features.shape[1]\n            features = np.pad(features, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            features = features[:, :max_pad_len]\n\n        return features.T  # shape: (time_steps, 65)\n\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Function to extract a 64x64x64 voxel from specific brain region coordinates\ndef extract_voxel(mri_data, center_coords, voxel_size=(64, 64, 64)):\n    z, y, x = center_coords\n    dz, dy, dx = voxel_size\n    \n    # Ensure the region stays within bounds\n    z_start = max(z - dz//2, 0)\n    z_end = min(z + dz//2, mri_data.shape[0])\n    y_start = max(y - dy//2, 0)\n    y_end = min(y + dy//2, mri_data.shape[1])\n    x_start = max(x - dx//2, 0)\n    x_end = min(x + dx//2, mri_data.shape[2])\n    \n    # Extract the region\n    extracted_voxel = mri_data[z_start:z_end, y_start:y_end, x_start:x_end]\n    \n    # Resize the extracted region to exactly (64, 64, 64)\n    if extracted_voxel.shape != voxel_size:\n        extracted_voxel = np.resize(extracted_voxel, voxel_size)\n    \n    return extracted_voxel\n\n# Function to extract and load MRI data using brainregiondataset method\ndef brainregiondataset(mri_file_path, regions={'midbrain': (85, 130, 110)}):\n    try:\n        # Check if file exists\n        if not os.path.exists(mri_file_path):\n            print(f\"File not found: {mri_file_path}\")\n            return None\n            \n        mri_data = np.load(mri_file_path)  # shape should be (192, 256, 256) or similar\n        \n        # Verify shape is reasonable\n        if len(mri_data.shape) != 3 or min(mri_data.shape) < 64:\n            print(f\"Warning: Unexpected MRI data shape: {mri_data.shape}\")\n            # Try to continue anyway\n        \n        extracted_data = []\n        \n        # Extract region for each given region\n        for region, coords in regions.items():\n            # Extract voxel for each region based on its specific coordinates\n            voxel = extract_voxel(mri_data, center_coords=coords, voxel_size=(64, 64, 64))\n            extracted_data.append(voxel)\n\n        # Convert to numpy array\n        extracted_data = np.array(extracted_data)\n        return extracted_data  # shape: (num_regions, 64, 64, 64)\n    \n    except Exception as e:\n        print(f\"Error loading MRI file {mri_file_path}: {e}\")\n        return None\n\n# Load synthetic dataset CSV\ndf = pd.read_csv(csv_path)\n\n# Initialize data lists\nmri_data = []\naudio_data = []\nlabels = []\nsubject_ids = []  # To keep track of unique subjects\n\n# Load and process data from CSV\nfor _, row in tqdm(df.iterrows(), total=df.shape[0]):\n    # Get MRI and audio file paths\n    mri_file_path = row['mri_file']\n    audio_file_path = row['audio_file']\n    label = row['combined_label']\n    \n    # Extract subject ID from filenames to ensure subject-wise stratification\n    subject_id = os.path.basename(mri_file_path).split('_')[0]\n    \n    # Process MRI data files\n    mri_voxel_data = brainregiondataset(mri_file_path)  # Use brainregiondataset to extract regions\n    \n    # Process Audio data files\n    audio_features = extract_mfcc(audio_file_path)\n    \n    # Only add to dataset if both MRI and audio data were processed successfully\n    if mri_voxel_data is not None and audio_features is not None:\n        mri_data.append(mri_voxel_data)\n        audio_data.append(audio_features)\n        labels.append(label)  # 0 for healthy, 1 for Parkinson's\n        subject_ids.append(subject_id)\n\n# Convert data to NumPy arrays\nX_mri = np.array(mri_data)  # shape: (samples, num_regions, 64, 64, 64)\nX_audio = np.array(audio_data)  # shape: (samples, time_steps, features)\ny = np.array(labels)\nsubject_ids = np.array(subject_ids)\n\n# Create a DataFrame for stratified splits by subject ID\ndf_split = pd.DataFrame({\n    'subject_id': subject_ids,\n    'label': y\n})\n\n# Get unique subject IDs for stratified splitting\nunique_subjects = df_split.drop_duplicates('subject_id')\nclass_counts = unique_subjects['label'].value_counts()\n\n# Print the class distribution\nprint(f\"Class distribution: {class_counts}\")\n\n# If one of the classes has less than 2 subjects, perform a fallback split\nif class_counts.min() < 2:\n    print(\"WARNING: One class has too few subjects for a balanced stratified split. Using a fallback split.\")\n    \n    # Fallback split - Split data using a smaller test size\n    subjects_train, subjects_temp = train_test_split(\n        unique_subjects, test_size=0.3, random_state=42)\n    subjects_val, subjects_test = train_test_split(\n        subjects_temp, test_size=0.5, random_state=42)\nelse:\n    # Perform stratified split as usual\n    subjects_train, subjects_temp = train_test_split(\n        unique_subjects, test_size=0.2, random_state=42, stratify=unique_subjects['label'])\n    subjects_val, subjects_test = train_test_split(\n        subjects_temp, test_size=0.5, random_state=42, stratify=subjects_temp['label'])\n\n# 4. Get indices for each split\ntrain_indices = df_split[df_split['subject_id'].isin(subjects_train['subject_id'])].index\nval_indices = df_split[df_split['subject_id'].isin(subjects_val['subject_id'])].index\ntest_indices = df_split[df_split['subject_id'].isin(subjects_test['subject_id'])].index\n\n# 5. Split data according to subject-based indices\nX_mri_train, X_mri_val, X_mri_test = X_mri[train_indices], X_mri[val_indices], X_mri[test_indices]\nX_audio_train, X_audio_val, X_audio_test = X_audio[train_indices], X_audio[val_indices], X_audio[test_indices]\ny_train, y_val, y_test = y[train_indices], y[val_indices], y[test_indices]\n\n# 6. Check if data exists for each split before reshaping\ndef reshape_data(X_mri):\n    try:\n        return X_mri.reshape(-1, 64, 64, 64, 1)\n    except ValueError as e:\n        print(f\"Error reshaping data: {e}\")\n        return None\n\n# 7. Reshape all splits\nX_mri_train = reshape_data(X_mri_train)\nX_mri_val = reshape_data(X_mri_val)\nX_mri_test = reshape_data(X_mri_test)\n\n# 8. Confirm splits are properly stratified\nprint(\"\\nData split statistics:\")\nprint(f\"Training: {len(X_mri_train)} samples, Class 1: {np.sum(y_train)}, Class 0: {len(y_train) - np.sum(y_train)}\")\nprint(f\"Validation: {len(X_mri_val)} samples, Class 1: {np.sum(y_val)}, Class 0: {len(y_val) - np.sum(y_val)}\")\nprint(f\"Testing: {len(X_mri_test)} samples, Class 1: {np.sum(y_test)}, Class 0: {len(y_test) - np.sum(y_test)}\")\n# Create a more robust split that handles potential low-count classes\n\nif class_counts.min() >= 2:\n    subjects_train, subjects_temp = train_test_split(\n        unique_subjects, test_size=0.2, random_state=42, stratify=unique_subjects['label'])\n    subjects_val, subjects_test = train_test_split(\n        subjects_temp, test_size=0.5, random_state=42, stratify=subjects_temp['label'])\nelse:\n    print(\"WARNING: Not enough subjects per class for stratified split. Using regular split.\")\n    subjects_train, subjects_temp = train_test_split(\n        unique_subjects, test_size=0.2, random_state=42)\n    subjects_val, subjects_test = train_test_split(\n        subjects_temp, test_size=0.5, random_state=42)\n\n# Get indices for each split\ntrain_indices = df_split[df_split['subject_id'].isin(subjects_train['subject_id'])].index\nval_indices = df_split[df_split['subject_id'].isin(subjects_val['subject_id'])].index\ntest_indices = df_split[df_split['subject_id'].isin(subjects_test['subject_id'])].index\n\n# Split data according to subject-based indices\nX_mri_train, X_mri_val, X_mri_test = X_mri[train_indices], X_mri[val_indices], X_mri[test_indices]\nX_audio_train, X_audio_val, X_audio_test = X_audio[train_indices], X_audio[val_indices], X_audio[test_indices]\ny_train, y_val, y_test = y[train_indices], y[val_indices], y[test_indices]\n\n# Check if data exists for each split before reshaping\ndef reshape_data(X_mri):\n    try:\n        return X_mri.reshape(-1, 64, 64, 64, 1)\n    except ValueError as e:\n        print(f\"Error reshaping data: {e}\")\n        return None\n\n# Reshape all splits\nX_mri_train = reshape_data(X_mri_train)\nX_mri_val = reshape_data(X_mri_val)\nX_mri_test = reshape_data(X_mri_test)\n\n# Confirm splits are properly stratified\nprint(\"\\nData split statistics:\")\nprint(f\"Training: {len(X_mri_train)} samples, Class 1: {np.sum(y_train)}, Class 0: {len(y_train) - np.sum(y_train)}\")\nprint(f\"Validation: {len(X_mri_val)} samples, Class 1: {np.sum(y_val)}, Class 0: {len(y_val) - np.sum(y_val)}\")\nprint(f\"Testing: {len(X_mri_test)} samples, Class 1: {np.sum(y_test)}, Class 0: {len(y_test) - np.sum(y_test)}\")\n\n# Optionally use class weights if needed\nclass_weights = compute_class_weight('balanced', classes=np.unique(y_train), y=y_train)\nprint(f\"Class weights: {class_weight_dict}\")\n\n# Define the improved multimodal model\ndef create_improved_multimodal_model(dropout_rate=0.5):\n    # MRI Model (simplified 3D CNN for stability)\n    mri_input = Input(shape=(64, 64, 64, 1))\n    \n    # First block - simplified architecture\n    x1 = Conv3D(16, (3, 3, 3), activation='relu', padding='same')(mri_input)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Second block\n    x1 = Conv3D(32, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Third block\n    x1 = Conv3D(64, (3, 3, 3), activation='relu', padding='same')(x1)\n    x1 = BatchNormalization()(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    \n    # Flatten and fully connected layers\n    x1 = Flatten()(x1)\n    x1 = Dense(256, activation='relu')(x1)\n    x1 = Dropout(dropout_rate)(x1)\n    \n    # Audio Model (simplified LSTM architecture)\n    audio_input = Input(shape=(100, 65))  # Hardcoded dimensions to avoid potential errors\n    x2 = LSTM(64, return_sequences=False)(audio_input)\n    x2 = Dense(128, activation='relu')(x2)\n    x2 = Dropout(dropout_rate)(x2)\n    \n    # Combine the MRI and Audio models\n    combined = Concatenate()([x1, x2])\n    \n    # Final classification layers\n    z = Dense(64, activation='relu')(combined)\n    z = Dropout(dropout_rate)(z)\n    z = Dense(32, activation='relu')(z)\n    z = Dropout(dropout_rate/2)(z)\n    z = Dense(1, activation='sigmoid')(z)  # Binary classification\n\n    model = Model(inputs=[mri_input, audio_input], outputs=z)\n    \n    # Use Adam optimizer with a standard learning rate\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\n    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model\n\n# Create model visualization function\ndef plot_training_history(history):\n    \"\"\"Plot the training history metrics\"\"\"\n    fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n    \n    # Plot accuracy\n    axes[0].plot(history.history['accuracy'], label='Training Accuracy')\n    axes[0].plot(history.history['val_accuracy'], label='Validation Accuracy')\n    axes[0].set_title('Model Accuracy')\n    axes[0].set_xlabel('Epoch')\n    axes[0].set_ylabel('Accuracy')\n    axes[0].legend()\n    axes[0].grid(True)\n    \n    # Plot loss\n    axes[1].plot(history.history['loss'], label='Training Loss')\n    axes[1].plot(history.history['val_loss'], label='Validation Loss')\n    axes[1].set_title('Model Loss')\n    axes[1].set_xlabel('Epoch')\n    axes[1].set_ylabel('Loss')\n    axes[1].legend()\n    axes[1].grid(True)\n    \n    plt.tight_layout()\n    plt.savefig('/kaggle/working/training_history.png')\n    plt.show()\n\ndef plot_confusion_matrix(y_true, y_pred, classes=['Healthy', 'Parkinson\\'s']):\n    \"\"\"Plot confusion matrix\"\"\"\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=classes, yticklabels=classes)\n    plt.title('Confusion Matrix')\n    plt.ylabel('True Label')\n    plt.xlabel('Predicted Label')\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/confusion_matrix.png')\n    plt.show()\n\ndef plot_roc_curve(y_test, y_prob):\n    \"\"\"Plot ROC curve\"\"\"\n    fpr, tpr, _ = roc_curve(y_test, y_prob)\n    roc_auc = auc(fpr, tpr)\n    \n    plt.figure(figsize=(8, 6))\n    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.3f})')\n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.grid(True)\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/roc_curve.png')\n    plt.show()\n\n# Data augmentation for MRI (only for training data)\ndef augment_mri_data(X_mri, y, augmentation_factor=2):\n    datagen = ImageDataGenerator(\n        rotation_range=10,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        zoom_range=0.1,\n        horizontal_flip=True,\n        fill_mode='nearest'\n    )\n    \n    # Only augment the minority class (assuming class 1 is the minority)\n    minority_indices = np.where(y == 1)[0]\n    X_augmented = []\n    y_augmented = []\n    \n    for idx in minority_indices:\n        # Original sample\n        X_augmented.append(X_mri[idx])\n        y_augmented.append(1)\n        \n        # Generate augmented samples\n        for _ in range(augmentation_factor - 1):\n            # Apply augmentation\n            aug_img = datagen.random_transform(X_mri[idx])\n            X_augmented.append(aug_img)\n            y_augmented.append(1)\n    \n    # Add all majority class samples\n    majority_indices = np.where(y == 0)[0]\n    for idx in majority_indices:\n        X_augmented.append(X_mri[idx])\n        y_augmented.append(0)\n    \n    return np.array(X_augmented), np.array(y_augmented)\n\n# Apply augmentation to training data only if class imbalance exists\nif np.sum(y_train) / len(y_train) < 0.4:  # If minority class is less than 40%\n    print(\"Applying data augmentation to balance classes...\")\n    X_mri_train_aug, y_train_aug = augment_mri_data(X_mri_train, y_train)\n    print(f\"After augmentation - Training: {len(X_mri_train_aug)} samples, Class 1: {np.sum(y_train_aug)}, Class 0: {len(y_train_aug) - np.sum(y_train_aug)}\")\nelse:\n    X_mri_train_aug, y_train_aug = X_mri_train, y_train\n    print(\"Data is relatively balanced. Skipping augmentation.\")\n\n# Implement K-fold cross-validation and grid search for hyperparameters\ndef perform_kfold_cv(X_mri, X_audio, y, n_splits=5):\n    # Check if we have enough samples for K-fold\n    class_counts = np.bincount(y)\n    if np.min(class_counts) < n_splits:\n        print(f\"WARNING: Not enough samples for {n_splits}-fold CV. Reducing folds to {max(2, np.min(class_counts))}\")\n        n_splits = max(2, np.min(class_counts))\n    \n    kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n    fold_metrics = {\n        'accuracy': [],\n        'auc': [],\n        'precision': [],\n        'recall': []\n    }\n    \n    # Try to run CV, but handle potential errors\n    try:\n        for fold, (train_idx, val_idx) in enumerate(kf.split(X_mri, y)):\n            print(f\"\\nTraining fold {fold+1}/{n_splits}...\")\n            \n            # Split data for this fold\n            X_mri_fold_train, X_mri_fold_val = X_mri[train_idx], X_mri[val_idx]\n            X_audio_fold_train, X_audio_fold_val = X_audio[train_idx], X_audio[val_idx]\n            y_fold_train, y_fold_val = y[train_idx], y[val_idx]\n        \n        # Create and train model for this fold\n        model = create_improved_multimodal_model(dropout_rate=0.5)\n        \n        # Callbacks for training\n        callbacks = [\n            EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True),\n            ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=0.00001),\n            ModelCheckpoint(filepath=f'/kaggle/working/model_fold_{fold+1}.h5', save_best_only=True),\n        ]\n        \n        # Train model\n        history = model.fit(\n            [X_mri_fold_train, X_audio_fold_train], y_fold_train,\n            validation_data=([X_mri_fold_val, X_audio_fold_val], y_fold_val),\n            epochs=50, batch_size=16, callbacks=callbacks,\n            class_weight=class_weight_dict\n        )\n        \n        # Evaluate on validation data\n        metrics = model.evaluate([X_mri_fold_val, X_audio_fold_val], y_fold_val)\n        \n        # Store fold metrics\n        fold_metrics['accuracy'].append(metrics[1])\n        fold_metrics['auc'].append(metrics[2])\n        fold_metrics['precision'].append(metrics[3])\n        fold_metrics['recall'].append(metrics[4])\n        \n        print(f\"Fold {fold+1} Metrics - Accuracy: {metrics[1]:.4f}, AUC: {metrics[2]:.4f}, Precision: {metrics[3]:.4f}, Recall: {metrics[4]:.4f}\")\n        \n    except FileNotFoundError:\n        print(\"csv File not found. Please check the file path and try again.\")\n        \n    # Calculate and display average metrics\n    for metric, values in fold_metrics.items():\n        mean_value = np.mean(values)\n        std_value = np.std(values)\n        print(f\"Average {metric}: {mean_value:.4f} ± {std_value:.4f}\")\n    \n    return fold_metrics\n\n# Skip k-fold cross-validation if dataset is too small\nprint(f\"Training set size: {len(X_mri_train)} samples\")\nif len(X_mri_train) >= 30:  # Only do k-fold CV if we have enough samples\n    print(\"\\nPerforming cross-validation...\")\n    try:\n        fold_metrics = perform_kfold_cv(X_mri_train_aug, X_audio_train, y_train_aug, n_splits=3)\n    except Exception as e:\n        print(f\"Error during cross-validation: {e}\")\n        print(\"Skipping cross-validation and proceeding with direct training.\")\nelse:\n    print(\"Dataset too small for cross-validation, skipping to direct training.\")\n\n# Train final model (simpler version for stability)\nprint(\"\\nTraining final model on all training data...\")\nfinal_model = create_improved_multimodal_model(dropout_rate=0.3)  # Lower dropout for smaller datasets\n\n# Simpler callbacks for stability\ncallbacks = [\n    EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True),\n    ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=5, min_lr=0.0001)\n]\n\n# Train final model with smaller batch size and fewer epochs\ntry:\n    # Start with a very small batch size for stability\n    batch_size = min(8, len(X_mri_train) // 4)  # Make sure batch size is appropriate for dataset size\n    batch_size = max(1, batch_size)  # Ensure at least 1\n    \n    print(f\"Using batch size: {batch_size}\")\n    \n    history = final_model.fit(\n        [X_mri_train, X_audio_train], y_train,  # Use original data instead of augmented for stability\n        validation_data=([X_mri_val, X_audio_val], y_val),\n        epochs=30, batch_size=batch_size, callbacks=callbacks\n    )\nexcept Exception as e:\n    print(f\"Error during model training: {e}\")\n    print(\"Trying with even simpler training configuration...\")\n    \n    # If first attempt fails, try with extremely simple configuration\n    final_model = create_improved_multimodal_model(dropout_rate=0.2)\n    history = final_model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        validation_split=0.2,  # Use validation split instead of separate validation set\n        epochs=10, batch_size=2\n    )\n\n# Plot training history\nplot_training_history(history)\n\n# Evaluate on test data\ntest_metrics = final_model.evaluate([X_mri_test, X_audio_test], y_test)\nprint(\"\\nTest Metrics:\")\nprint(f\"Loss: {test_metrics[0]:.4f}\")\nprint(f\"Accuracy: {test_metrics[1]:.4f}\")\nprint(f\"AUC: {test_metrics[2]:.4f}\")\nprint(f\"Precision: {test_metrics[3]:.4f}\")\nprint(f\"Recall: {test_metrics[4]:.4f}\")\n\n# Generate predictions\ny_prob = final_model.predict([X_mri_test, X_audio_test])\ny_pred = (y_prob > 0.5).astype(int)\n\n# Plot confusion matrix\nplot_confusion_matrix(y_test, y_pred)\n\n# Plot ROC curve\nplot_roc_curve(y_test, y_prob)\n\n# Additional visualization: Feature importance analysis\n# Using a technique called Permutation Importance\ndef plot_feature_importance():\n    plt.figure(figsize=(10, 6))\n    \n    # This is a placeholder for actual feature importance\n    # In a real scenario, you would calculate permutation importance\n    features = ['MRI Features', 'Audio MFCC', 'Audio Chroma', 'Audio Spectral', 'Audio Tonnetz']\n    importance = [0.45, 0.25, 0.1, 0.15, 0.05]  # Placeholder values\n    \n    plt.bar(features, importance, color='skyblue')\n    plt.title('Estimated Feature Importance')\n    plt.xlabel('Feature')\n    plt.ylabel('Importance Score')\n    plt.ylim(0, 0.5)\n    plt.tight_layout()\n    plt.savefig('/kaggle/working/feature_importance.png')\n    plt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T22:56:50.101724Z","iopub.execute_input":"2025-04-30T22:56:50.102347Z","iopub.status.idle":"2025-04-30T22:57:19.339574Z","shell.execute_reply.started":"2025-04-30T22:56:50.102325Z","shell.execute_reply":"2025-04-30T22:57:19.338640Z"}},"outputs":[{"name":"stderr","text":"  0%|          | 0/100 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\n","output_type":"stream"},{"name":"stderr","text":"  2%|▏         | 2/100 [00:00<00:41,  2.37it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=523\n  warnings.warn(\n  5%|▌         | 5/100 [00:01<00:30,  3.08it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"  6%|▌         | 6/100 [00:01<00:29,  3.23it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"  8%|▊         | 8/100 [00:02<00:31,  2.90it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=851\n  warnings.warn(\n 10%|█         | 10/100 [00:03<00:29,  3.08it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=547\n  warnings.warn(\n 13%|█▎        | 13/100 [00:04<00:30,  2.81it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=752\n  warnings.warn(\n 14%|█▍        | 14/100 [00:04<00:27,  3.15it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=766\n  warnings.warn(\n 18%|█▊        | 18/100 [00:05<00:25,  3.24it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=800\n  warnings.warn(\n 19%|█▉        | 19/100 [00:06<00:23,  3.50it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=826\n  warnings.warn(\n 20%|██        | 20/100 [00:06<00:21,  3.67it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 22%|██▏       | 22/100 [00:07<00:27,  2.88it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=993\n  warnings.warn(\n 23%|██▎       | 23/100 [00:07<00:24,  3.08it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=625\n  warnings.warn(\n 24%|██▍       | 24/100 [00:07<00:22,  3.40it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 25%|██▌       | 25/100 [00:07<00:22,  3.41it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\n","output_type":"stream"},{"name":"stderr","text":" 32%|███▏      | 32/100 [00:09<00:17,  3.85it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=853\n  warnings.warn(\n 34%|███▍      | 34/100 [00:10<00:17,  3.68it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 35%|███▌      | 35/100 [00:10<00:17,  3.69it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=718\n  warnings.warn(\n 36%|███▌      | 36/100 [00:10<00:16,  3.88it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=590\n  warnings.warn(\n 39%|███▉      | 39/100 [00:11<00:15,  4.01it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 80, 512, 512)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=840\n  warnings.warn(\n 40%|████      | 40/100 [00:11<00:15,  3.98it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 41%|████      | 41/100 [00:12<00:16,  3.63it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=939\n  warnings.warn(\n 43%|████▎     | 43/100 [00:12<00:15,  3.64it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 44%|████▍     | 44/100 [00:12<00:16,  3.43it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 54%|█████▍    | 54/100 [00:16<00:16,  2.82it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=560\n  warnings.warn(\n 56%|█████▌    | 56/100 [00:16<00:14,  3.07it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=649\n  warnings.warn(\n 57%|█████▋    | 57/100 [00:17<00:12,  3.36it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=618\n  warnings.warn(\n 58%|█████▊    | 58/100 [00:17<00:11,  3.67it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=988\n  warnings.warn(\n 60%|██████    | 60/100 [00:18<00:12,  3.16it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=803\n  warnings.warn(\n 63%|██████▎   | 63/100 [00:18<00:11,  3.23it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=987\n  warnings.warn(\n 65%|██████▌   | 65/100 [00:19<00:10,  3.39it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=574\n  warnings.warn(\n 70%|███████   | 70/100 [00:20<00:07,  3.82it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 72%|███████▏  | 72/100 [00:21<00:07,  3.98it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=704\n  warnings.warn(\n 74%|███████▍  | 74/100 [00:21<00:07,  3.43it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=681\n  warnings.warn(\n 76%|███████▌  | 76/100 [00:22<00:07,  3.37it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=708\n  warnings.warn(\n 79%|███████▉  | 79/100 [00:23<00:05,  3.62it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=664\n  warnings.warn(\n 84%|████████▍ | 84/100 [00:24<00:04,  3.51it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=906\n  warnings.warn(\n 86%|████████▌ | 86/100 [00:25<00:03,  3.75it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=567\n  warnings.warn(\n 87%|████████▋ | 87/100 [00:25<00:03,  4.09it/s]","output_type":"stream"},{"name":"stdout","text":"Warning: Unexpected MRI data shape: (1, 192, 256, 256)\n","output_type":"stream"},{"name":"stderr","text":" 89%|████████▉ | 89/100 [00:25<00:03,  3.48it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=875\n  warnings.warn(\n 90%|█████████ | 90/100 [00:26<00:02,  3.66it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=666\n  warnings.warn(\n 99%|█████████▉| 99/100 [00:28<00:00,  3.16it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=979\n  warnings.warn(\n100%|██████████| 100/100 [00:29<00:00,  3.43it/s]","output_type":"stream"},{"name":"stdout","text":"Class distribution: label\n1    1\n0    1\nName: count, dtype: int64\nWARNING: One class has too few subjects for a balanced stratified split. Using a fallback split.\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/2701185540.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    156\u001b[0m     subjects_train, subjects_temp = train_test_split(\n\u001b[1;32m    157\u001b[0m         unique_subjects, test_size=0.3, random_state=42)\n\u001b[0;32m--> 158\u001b[0;31m     subjects_val, subjects_test = train_test_split(\n\u001b[0m\u001b[1;32m    159\u001b[0m         subjects_temp, test_size=0.5, random_state=42)\n\u001b[1;32m    160\u001b[0m \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py\u001b[0m in \u001b[0;36mtrain_test_split\u001b[0;34m(test_size, train_size, random_state, shuffle, stratify, *arrays)\u001b[0m\n\u001b[1;32m   2560\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2561\u001b[0m     \u001b[0mn_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_num_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2562\u001b[0;31m     n_train, n_test = _validate_shuffle_split(\n\u001b[0m\u001b[1;32m   2563\u001b[0m         \u001b[0mn_samples\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdefault_test_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.25\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2564\u001b[0m     )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py\u001b[0m in \u001b[0;36m_validate_shuffle_split\u001b[0;34m(n_samples, test_size, train_size, default_test_size)\u001b[0m\n\u001b[1;32m   2234\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2235\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mn_train\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2236\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m   2237\u001b[0m             \u001b[0;34m\"With n_samples={}, test_size={} and train_size={}, the \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2238\u001b[0m             \u001b[0;34m\"resulting train set will be empty. Adjust any of the \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: With n_samples=1, test_size=0.5 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."],"ename":"ValueError","evalue":"With n_samples=1, test_size=0.5 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters.","output_type":"error"}],"execution_count":17},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nimport matplotlib.pyplot as plt\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, Concatenate\nfrom keras.callbacks import EarlyStopping\nfrom keras.utils import to_categorical\nimport tensorflow as tf\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import LearningRateScheduler\n\n# Define paths to the datasets\nmri_hc_path = \"/kaggle/input/parkinsons/data/mri_hc\"\nmri_pd_path = \"/kaggle/input/parkinsons/data/mri_pd\"\naudio_hc_path = \"/kaggle/input/parkinsons/data/audio_hc\"\naudio_pd_path = \"/kaggle/input/parkinsons/data/audio_pd\"\ncsv_path = \"/kaggle/working/synthetic_dataset.csv\"  # Path to synthetic dataset CSV\n\ndef lr_schedule(epoch):\n    initial_lr = 0.001\n    drop_factor = 0.5\n    epoch_drop = 5\n    return initial_lr * (drop_factor ** (epoch // epoch_drop))\n    \n# Function to extract MFCC from audio files\ndef extract_mfcc(file_path, max_pad_len=100):\n    try:\n        y, sr = librosa.load(file_path, sr=22050)  # Load audio file\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)  # Extract MFCCs (40 features)\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr)  # Extract chroma feature\n        spec_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)  # Spectral contrast\n        tonnetz = librosa.feature.tonnetz(y=librosa.effects.harmonic(y), sr=sr)  # Tonnetz\n\n        # Combine all features\n        features = np.vstack([mfcc, chroma, spec_contrast, tonnetz])  # shape: (65, time_steps)\n\n        # Pad or truncate to match the maximum pad length\n        if features.shape[1] < max_pad_len:\n            pad_width = max_pad_len - features.shape[1]\n            features = np.pad(features, pad_width=((0, 0), (0, pad_width)), mode='constant')\n        else:\n            features = features[:, :max_pad_len]\n\n        return features.T  # shape: (time_steps, 65)\n\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Function to extract a 64x64x64 voxel from specific brain region coordinates\ndef extract_voxel(mri_data, center_coords, voxel_size=(64, 64, 64)):\n    z, y, x = center_coords\n    dz, dy, dx = voxel_size\n    \n    # Ensure the region stays within bounds\n    z_start = max(z - dz//2, 0)\n    z_end = min(z + dz//2, mri_data.shape[0])\n    y_start = max(y - dy//2, 0)\n    y_end = min(y + dy//2, mri_data.shape[1])\n    x_start = max(x - dx//2, 0)\n    x_end = min(x + dx//2, mri_data.shape[2])\n    \n    # Extract the region\n    extracted_voxel = mri_data[z_start:z_end, y_start:y_end, x_start:x_end]\n    \n    # Resize the extracted region to exactly (64, 64, 64)\n    if extracted_voxel.shape != voxel_size:\n        extracted_voxel = np.resize(extracted_voxel, voxel_size)\n    \n    return extracted_voxel\n\n# Function to extract and load MRI data using brainregiondataset method\ndef brainregiondataset(mri_file_path, regions={'midbrain': (85, 130, 110)}):\n    try:\n        mri_data = np.load(mri_file_path)  # shape should be (192, 256, 256) or similar\n        extracted_data = []\n        \n        # Extract region for each given region\n        for region, coords in regions.items():\n            # Extract voxel for each region based on its specific coordinates\n            voxel = extract_voxel(mri_data, center_coords=coords, voxel_size=(64, 64, 64))\n            extracted_data.append(voxel)\n\n        # Convert to numpy array\n        extracted_data = np.array(extracted_data)\n        return extracted_data  # shape: (num_regions, 64, 64, 64)\n    \n    except Exception as e:\n        print(f\"Error loading MRI file {mri_file_path}: {e}\")\n        return None\n\n# Load synthetic dataset CSV\ndf = pd.read_csv(\"/kaggle/working/synthetic_dataset.csv\")\n# Assume CSV columns: ['mri_file', 'audio_file', 'label']\n\n# Initialize data lists\nmri_data = []\naudio_data = []\nlabels = []\n\n# Load and process data from CSV\nfor _, row in tqdm(df.iterrows(), total=df.shape[0]):\n    # Get MRI and audio file paths\n    mri_file_path = row['mri_file']\n    audio_file_path = row['audio_file']\n    label = row['combined_label']\n    \n    # Process MRI data files\n    mri_voxel_data = brainregiondataset(mri_file_path)  # Use brainregiondataset to extract regions\n    if mri_voxel_data is not None:\n        mri_data.append(mri_voxel_data)\n        labels.append(label)  # 0 for healthy, 1 for Parkinson's\n    \n    # Process Audio data files\n    audio_features = extract_mfcc(audio_file_path)\n    if audio_features is not None:\n        audio_data.append(audio_features)\n\n# Convert data to NumPy arrays\nX_mri = np.array(mri_data)  # shape: (samples, num_regions, 64, 64, 64)\nX_audio = np.array(audio_data)  # shape: (samples, time_steps, features)\ny = np.array(labels)\n\n# Ensure the data shapes are consistent\nprint(f\"MRI Data Shape: {X_mri.shape}\")\nprint(f\"Audio Data Shape: {X_audio.shape}\")\nprint(f\"Labels Shape: {y.shape}\")\n\n# Split dataset into train, validation, and test sets (80% train, 10% validation, 10% test)\nX_mri_train, X_mri_test, X_audio_train, X_audio_test, y_train, y_test = train_test_split(\n    X_mri, X_audio, y, test_size=0.2, random_state=42, stratify=y)\n\nX_mri_train, X_mri_val, X_audio_train, X_audio_val, y_train, y_val = train_test_split(\n    X_mri_train, X_audio_train, y_train, test_size=0.1, random_state=42, stratify=y_train)\nX_mri_train = X_mri_train.squeeze(axis=1)\nX_mri_val = X_mri_val.squeeze(axis=1)\nX_mri_test = X_mri_test.squeeze(axis=1)\n# Define the model\n# Define the model\ndef create_multimodal_model():\n    # MRI Model (3D CNN)\n    mri_input = Input(shape=(64, 64, 64, 1))  # Corrected shape for a single region (64x64x64)\n    x1 = Conv3D(64, (3, 3, 3), activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01))(mri_input)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    x1 = Conv3D(128, (3, 3, 3), activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01))(x1)\n    x1 = MaxPooling3D(pool_size=(2, 2, 2))(x1)\n    x1 = Flatten()(x1)\n\n    # Audio Model (LSTM)\n    audio_input = Input(shape=(X_audio.shape[1], X_audio.shape[2]))\n    x2 = LSTM(128, return_sequences=True)(audio_input)  # Increased complexity\n    x2 = LSTM(64)(x2)\n    x2 = Dense(64, activation='relu')(x2)\n\n    # Concatenate MRI and Audio Models\n    combined = Concatenate()([x1, x2])\n    combined = Dense(128, activation='relu')(combined)\n    combined = Dropout(0.5)(combined)  # Increased dropout rate\n    output = Dense(1, activation='sigmoid')(combined)\n\n    # Create final model\n    model = Model(inputs=[mri_input, audio_input], outputs=output)\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model\n\n# Early stopping\nearly_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n\nk=5\nkf = StratifiedKFold(n_splits=k, shuffle=True, random_state=42)\n\n# Initialize empty lists to store results for each fold\nfold_accuracies = []\nfold_losses = []\ntrain_accuracies = []  # To track training accuracy for each fold\ntrain_losses = []  # To track training loss for each fold\nval_accuracies = []  # To track validation accuracy for each fold\nval_losses = []  # To track validation loss for each fold\n\n# Loop through each fold\nfor fold, (train_index, val_index) in enumerate(kf.split(X_mri_train, y_train)):\n    # Split data into training and validation sets\n    X_mri_train_fold, X_mri_val_fold = X_mri_train[train_index], X_mri_train[val_index]\n    X_audio_train_fold, X_audio_val_fold = X_audio_train[train_index], X_audio_train[val_index]\n    y_train_fold, y_val_fold = y_train[train_index], y_train[val_index]\n\n    # Create the model (reset the model weights each time)\n    model = create_multimodal_model()\n    class_weights = compute_class_weight('balanced', classes=np.unique(y_train_fold), y=y_train_fold)\n    lr_scheduler = LearningRateScheduler(lr_schedule)\n    # Train the model on the current fold\n    history = model.fit(\n        [X_mri_train_fold, X_audio_train_fold], y_train_fold,\n        validation_data=([X_mri_val_fold, X_audio_val_fold], y_val_fold),\n        epochs=50,\n        batch_size=8,\n        callbacks=[early_stop, lr_scheduler],\n        class_weight={0: class_weights[0], 1: class_weights[1]},\n        verbose=1\n    )\n\n    # Get training and validation accuracy/loss for this fold\n    train_accuracy = history.history['accuracy'][-1]\n    val_accuracy = history.history['val_accuracy'][-1]\n    fold_accuracies.append(val_accuracy)\n    \n    train_loss = history.history['loss'][-1]\n    val_loss = history.history['val_loss'][-1]\n    fold_losses.append(val_loss)\n\n    train_accuracies.append(history.history['accuracy'])  # Collect training accuracy over epochs\n    train_losses.append(history.history['loss'])  # Collect training loss over epochs\n    val_accuracies.append(history.history['val_accuracy'])  # Collect validation accuracy over epochs\n    val_losses.append(history.history['val_loss'])  # Collect validation loss over epochs\n\n    # After training, evaluate the model on the test set\n    y_test_pred = (model.predict([X_mri_test, X_audio_test]) > 0.5).astype(int)\n\n    # Accuracy score on test set\n    test_acc = accuracy_score(y_test, y_test_pred)\n    print(f\"Test Accuracy for Fold {fold+1}: {test_acc:.4f}\")\n\n    # Confusion Matrix\n    cm = confusion_matrix(y_test, y_test_pred)\n    print(f\"Confusion Matrix for Fold {fold+1}: \\n{cm}\")\n\n    # Classification Report\n    report = classification_report(y_test, y_test_pred)\n    print(f\"Classification Report for Fold {fold+1}: \\n{report}\")\n\n# Plotting the results\n\n# Plot training and validation accuracy for each fold\nplt.figure(figsize=(12, 6))\nfor i in range(k):\n    plt.plot(train_accuracies[i], label=f'Fold {i+1} Train Accuracy')\n    plt.plot(val_accuracies[i], label=f'Fold {i+1} Val Accuracy', linestyle='--')\n\nplt.title('Training and Validation Accuracy Across Folds')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()\n\n# Plot training and validation loss for each fold\nplt.figure(figsize=(12, 6))\nfor i in range(k):\n    plt.plot(train_losses[i], label=f'Fold {i+1} Train Loss')\n    plt.plot(val_losses[i], label=f'Fold {i+1} Val Loss', linestyle='--')\n\nplt.title('Training and Validation Loss Across Folds')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\n# After all folds, print the final results\nprint(\"\\nStratified K-Fold Cross Validation Results:\")\nprint(f\"Average Validation Accuracy: {np.mean(fold_accuracies)}\")\nprint(f\"Average Validation Loss: {np.mean(fold_losses)}\")\ntrain_accuracies = np.array([item[0] if isinstance(item, list) else item for item in train_accuracies])    \nprint(f\"Average Train Accuracy: {np.mean(train_accuracies)}\")\ntrain_losses = np.array([item[0] if isinstance(item, list) else item for item in train_losses])\nprint(f\"Average Train Loss: {np.mean(train_losses)}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T21:39:23.847041Z","iopub.execute_input":"2025-04-30T21:39:23.847349Z","iopub.status.idle":"2025-04-30T21:41:04.645317Z","shell.execute_reply.started":"2025-04-30T21:39:23.847325Z","shell.execute_reply":"2025-04-30T21:41:04.644360Z"}},"outputs":[{"name":"stderr","text":"  0%|          | 0/70 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=590\n  warnings.warn(\n 11%|█▏        | 8/70 [00:03<00:33,  1.87it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=752\n  warnings.warn(\n 23%|██▎       | 16/70 [00:07<00:22,  2.38it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=547\n  warnings.warn(\n 24%|██▍       | 17/70 [00:07<00:18,  2.83it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=851\n  warnings.warn(\n 39%|███▊      | 27/70 [00:11<00:15,  2.71it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=853\n  warnings.warn(\n 40%|████      | 28/70 [00:12<00:17,  2.42it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=766\n  warnings.warn(\n 46%|████▌     | 32/70 [00:14<00:19,  2.00it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=939\n  warnings.warn(\n 51%|█████▏    | 36/70 [00:15<00:14,  2.27it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=993\n  warnings.warn(\n 54%|█████▍    | 38/70 [00:16<00:12,  2.53it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=846\n  warnings.warn(\n 57%|█████▋    | 40/70 [00:17<00:12,  2.39it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=803\n  warnings.warn(\n 59%|█████▊    | 41/70 [00:17<00:13,  2.23it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=906\n  warnings.warn(\n 64%|██████▍   | 45/70 [00:19<00:10,  2.37it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=618\n  warnings.warn(\n 67%|██████▋   | 47/70 [00:20<00:09,  2.52it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=681\n  warnings.warn(\n 69%|██████▊   | 48/70 [00:20<00:07,  2.87it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=875\n  warnings.warn(\n 74%|███████▍  | 52/70 [00:22<00:09,  1.94it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=666\n  warnings.warn(\n 99%|█████████▊| 69/70 [00:29<00:00,  2.36it/s]/usr/local/lib/python3.11/dist-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=1024 is too large for input signal of length=567\n  warnings.warn(\n100%|██████████| 70/70 [00:29<00:00,  2.34it/s]\n","output_type":"stream"},{"name":"stdout","text":"MRI Data Shape: (70, 1, 64, 64, 64)\nAudio Data Shape: (70, 100, 65)\nLabels Shape: (70,)\nEpoch 1/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 437ms/step - accuracy: 0.3649 - loss: 2.5565 - val_accuracy: 0.6000 - val_loss: 1.3876 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 264ms/step - accuracy: 0.6753 - loss: 1.3461 - val_accuracy: 0.8000 - val_loss: 1.2506 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 264ms/step - accuracy: 0.7816 - loss: 1.2319 - val_accuracy: 0.7000 - val_loss: 1.1233 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 263ms/step - accuracy: 0.8958 - loss: 1.0340 - val_accuracy: 0.7000 - val_loss: 0.9787 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 263ms/step - accuracy: 0.8667 - loss: 0.8615 - val_accuracy: 0.8000 - val_loss: 0.8417 - learning_rate: 0.0010\nEpoch 6/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 266ms/step - accuracy: 0.9042 - loss: 0.6769 - val_accuracy: 0.9000 - val_loss: 0.6881 - learning_rate: 5.0000e-04\nEpoch 7/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 264ms/step - accuracy: 0.9486 - loss: 0.5815 - val_accuracy: 0.9000 - val_loss: 0.5867 - learning_rate: 5.0000e-04\nEpoch 8/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 264ms/step - accuracy: 0.9691 - loss: 0.5147 - val_accuracy: 0.9000 - val_loss: 0.5670 - learning_rate: 5.0000e-04\nEpoch 9/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 203ms/step - accuracy: 0.9486 - loss: 0.4697 - val_accuracy: 0.9000 - val_loss: 0.5674 - learning_rate: 5.0000e-04\nEpoch 10/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 203ms/step - accuracy: 0.9486 - loss: 0.4195 - val_accuracy: 0.9000 - val_loss: 0.5680 - learning_rate: 5.0000e-04\nEpoch 11/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 266ms/step - accuracy: 0.9691 - loss: 0.3702 - val_accuracy: 0.9000 - val_loss: 0.5655 - learning_rate: 2.5000e-04\nEpoch 12/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 203ms/step - accuracy: 0.9608 - loss: 0.3827 - val_accuracy: 0.9000 - val_loss: 0.5727 - learning_rate: 2.5000e-04\nEpoch 13/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 204ms/step - accuracy: 0.9691 - loss: 0.3722 - val_accuracy: 0.9000 - val_loss: 0.5733 - learning_rate: 2.5000e-04\nEpoch 14/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 204ms/step - accuracy: 0.9795 - loss: 0.3440 - val_accuracy: 0.9000 - val_loss: 0.5830 - learning_rate: 2.5000e-04\nEpoch 15/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 206ms/step - accuracy: 0.9691 - loss: 0.3340 - val_accuracy: 0.8000 - val_loss: 0.7148 - learning_rate: 2.5000e-04\nEpoch 16/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 204ms/step - accuracy: 0.9691 - loss: 0.3472 - val_accuracy: 0.8000 - val_loss: 0.6837 - learning_rate: 1.2500e-04\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 842ms/step\nTest Accuracy for Fold 1: 0.6429\nConfusion Matrix for Fold 1: \n[[5 1]\n [4 4]]\nClassification Report for Fold 1: \n              precision    recall  f1-score   support\n\n           0       0.56      0.83      0.67         6\n           1       0.80      0.50      0.62         8\n\n    accuracy                           0.64        14\n   macro avg       0.68      0.67      0.64        14\nweighted avg       0.70      0.64      0.64        14\n\nEpoch 1/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 381ms/step - accuracy: 0.5500 - loss: 3.9216 - val_accuracy: 0.8000 - val_loss: 1.3944 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 206ms/step - accuracy: 0.6628 - loss: 1.3584 - val_accuracy: 0.6000 - val_loss: 1.2601 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 206ms/step - accuracy: 0.5198 - loss: 1.2498 - val_accuracy: 0.6000 - val_loss: 1.1665 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 207ms/step - accuracy: 0.8073 - loss: 1.0800 - val_accuracy: 0.5000 - val_loss: 1.1084 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 208ms/step - accuracy: 0.9337 - loss: 0.8375 - val_accuracy: 0.6000 - val_loss: 1.0737 - learning_rate: 0.0010\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 288ms/step\nTest Accuracy for Fold 2: 0.7143\nConfusion Matrix for Fold 2: \n[[2 4]\n [0 8]]\nClassification Report for Fold 2: \n              precision    recall  f1-score   support\n\n           0       1.00      0.33      0.50         6\n           1       0.67      1.00      0.80         8\n\n    accuracy                           0.71        14\n   macro avg       0.83      0.67      0.65        14\nweighted avg       0.81      0.71      0.67        14\n\nEpoch 1/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 390ms/step - accuracy: 0.5705 - loss: 3.6711 - val_accuracy: 0.6000 - val_loss: 1.3880 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 206ms/step - accuracy: 0.5858 - loss: 1.3949 - val_accuracy: 0.6000 - val_loss: 1.2859 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 207ms/step - accuracy: 0.6076 - loss: 1.2796 - val_accuracy: 0.7000 - val_loss: 1.1937 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 208ms/step - accuracy: 0.7677 - loss: 1.1447 - val_accuracy: 0.6000 - val_loss: 1.1392 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 208ms/step - accuracy: 0.8573 - loss: 0.9961 - val_accuracy: 0.6000 - val_loss: 1.0726 - learning_rate: 0.0010\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 274ms/step\nTest Accuracy for Fold 3: 0.5714\nConfusion Matrix for Fold 3: \n[[0 6]\n [0 8]]\nClassification Report for Fold 3: \n              precision    recall  f1-score   support\n\n           0       0.00      0.00      0.00         6\n           1       0.57      1.00      0.73         8\n\n    accuracy                           0.57        14\n   macro avg       0.29      0.50      0.36        14\nweighted avg       0.33      0.57      0.42        14\n\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 387ms/step - accuracy: 0.6441 - loss: 2.6765 - val_accuracy: 0.6000 - val_loss: 1.3404 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 211ms/step - accuracy: 0.5153 - loss: 1.3350 - val_accuracy: 0.6000 - val_loss: 1.2334 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 209ms/step - accuracy: 0.6042 - loss: 1.2000 - val_accuracy: 0.4000 - val_loss: 1.1498 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 212ms/step - accuracy: 0.7611 - loss: 1.0868 - val_accuracy: 0.5000 - val_loss: 1.0820 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 211ms/step - accuracy: 0.9014 - loss: 0.9375 - val_accuracy: 0.5000 - val_loss: 1.1027 - learning_rate: 0.0010\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step\nTest Accuracy for Fold 4: 0.5714\nConfusion Matrix for Fold 4: \n[[0 6]\n [0 8]]\nClassification Report for Fold 4: \n              precision    recall  f1-score   support\n\n           0       0.00      0.00      0.00         6\n           1       0.57      1.00      0.73         8\n\n    accuracy                           0.57        14\n   macro avg       0.29      0.50      0.36        14\nweighted avg       0.33      0.57      0.42        14\n\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 390ms/step - accuracy: 0.5486 - loss: 3.5736 - val_accuracy: 0.6000 - val_loss: 1.4094 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 213ms/step - accuracy: 0.4927 - loss: 1.3879 - val_accuracy: 0.9000 - val_loss: 1.2936 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 215ms/step - accuracy: 0.8198 - loss: 1.2651 - val_accuracy: 0.4000 - val_loss: 1.1949 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 213ms/step - accuracy: 0.8118 - loss: 1.1480 - val_accuracy: 0.8000 - val_loss: 1.0973 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 213ms/step - accuracy: 0.7410 - loss: 1.0026 - val_accuracy: 0.5000 - val_loss: 1.0868 - learning_rate: 0.0010\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 281ms/step\nTest Accuracy for Fold 5: 0.4286\nConfusion Matrix for Fold 5: \n[[6 0]\n [8 0]]\nClassification Report for Fold 5: \n              precision    recall  f1-score   support\n\n           0       0.43      1.00      0.60         6\n           1       0.00      0.00      0.00         8\n\n    accuracy                           0.43        14\n   macro avg       0.21      0.50      0.30        14\nweighted avg       0.18      0.43      0.26        14\n\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":"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N5k0aRITJkxg3759rFy5skKP86RJk5g3bx6zZs1i4MCBHDp0iO+//75cTyBYE1MPDw8+//xzXF1dcXZ2pn///pXOPZ48eTIjRozgxRdfJCkpie7du/PXX3/xxx9/8Nhjj5UrEldfKSkpbNiwoUJxulJarZaxY8fy888/89FHHzFixAhmzJjBRx99xPHjxxk3bhwWi4XNmzczYsQIHnroITp27MiLL77Iv/71L4YMGcINN9yAVqtl165dBAYGlq03fvfdd3Pfffdx4403cvXVV3PgwAFWr15d4bOtzqRJk/juu+9wd3cnOjqa7du3s3bt2gpLzj399NP88ssv3Hzzzdx555307t2brKwsli5dyueff0737t3L2k6bNo1nnnmG33//nfvvv7/GJRH1ej2//vorV199dbkvjC52zTXX8OGHH5KWllbrz6cqzz33HIsXL2b8+PE88sgjeHl5sWDBAhITE/n111/LitGNGTOGNm3aMGjQIPz9/YmJieHjjz9m4sSJuLq6kpOTQ1BQEDfddBPdu3fHxcWFtWvXsmvXrnIjE+rr7bffZvz48QwYMIC77rqrbAk2d3d3Xn311SqPq8vPXXR0NMOHD6d37954eXmxe/fusiXlhBDCJpqxkrwQQlz2qlqCraoljLZu3apcddVViqOjoxIYGKg888wzZUs4bdiwoaxdVUuwvf322xXOySVLUlW1BFtlSyZdumyVoijKunXrlJ49eyoODg5KWFiY8tVXXylPPvmkotPpqvgULjh69KgyevRoxcXFRfHx8VFmz55dtqTXxcuHzZw5U3F2dq5wfGWxZ2ZmKjNmzFDc3NwUd3d3ZcaMGcq+fftqvQRbqeXLlyuAEhAQUOkSVm+88YYSEhKiaLVapWfPnsqff/5Z4d9BUWpegk1RFMVsNitz585VAgICFEdHR2X48OHK4cOHK3zeJSUlypNPPlnWbtCgQcr27duVYcOGVVi+648//lCio6PLlsMrfe+VxZifn688/vjjSmBgoGJvb6+Eh4crb7/9drmlqUrfS23vi4u9++67CqCsW7euyjb//e9/FUD5448/FEWxLnP39ttvK5GRkYqDg4Pi6+urjB8/XtmzZ0+547755hulZ8+eilarVTw9PZVhw4Ypa9asKXvdbDYrzz77rOLj46M4OTkpY8eOVeLj46tcgm3Xrl0VYsvOzlZm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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nStratified K-Fold Cross Validation Results:\nAverage Validation Accuracy: 0.600000011920929\nAverage Validation Loss: 1.0039042353630065\nAverage Train Accuracy: 0.5099999964237213\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/4048970551.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    270\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Average Train Accuracy: {np.mean(train_accuracies)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    271\u001b[0m \u001b[0mtrain_accuracies\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain_losses\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 272\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Average Train Loss: {np.mean(train_losses)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36mmean\u001b[0;34m(a, axis, dtype, out, keepdims, where)\u001b[0m\n\u001b[1;32m   3502\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3503\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3504\u001b[0;31m     return _methods._mean(a, axis=axis, dtype=dtype,\n\u001b[0m\u001b[1;32m   3505\u001b[0m                           out=out, **kwargs)\n\u001b[1;32m   3506\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/numpy/core/_methods.py\u001b[0m in \u001b[0;36m_mean\u001b[0;34m(a, axis, dtype, out, keepdims, where)\u001b[0m\n\u001b[1;32m    100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_mean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwhere\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m     \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0masanyarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m     \u001b[0mis_float16_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (5,) + inhomogeneous part."],"ename":"ValueError","evalue":"setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (5,) + inhomogeneous part.","output_type":"error"}],"execution_count":17},{"cell_type":"raw","source":"rough code","metadata":{}},{"cell_type":"code","source":"import os\nimport random\nimport pandas as pd\nfrom collections import defaultdict\n\ndef create_synthetic_dataset(output_path, num_samples=100, test_ratio=0.2):\n    \"\"\"Create a realistic synthetic dataset with proper paths\"\"\"\n    # Directory structure\n    base_dir = \"/kaggle/input/parkinsons/data\"\n    dirs = {\n        'mri_pd': os.path.join(base_dir, \"mri_pd\"),\n        'mri_hc': os.path.join(base_dir, \"mri_hc\"),\n        'audio_pd': os.path.join(base_dir, \"audio_pd\"),\n        'audio_hc': os.path.join(base_dir, \"audio_hc\")\n    }\n    \n    # Verify directories exist\n    for d in dirs.values():\n        if not os.path.exists(d):\n            raise FileNotFoundError(f\"Directory not found: {d}\")\n    \n    # Get all files with full paths\n    files = {\n        'mri_pd': [os.path.join(dirs['mri_pd'], f) for f in os.listdir(dirs['mri_pd']) if f.endswith('.npy')],\n        'mri_hc': [os.path.join(dirs['mri_hc'], f) for f in os.listdir(dirs['mri_hc']) if f.endswith('.npy')],\n        'audio_pd': [os.path.join(dirs['audio_pd'], f) for f in os.listdir(dirs['audio_pd']) if f.endswith('.wav')],\n        'audio_hc': [os.path.join(dirs['audio_hc'], f) for f in os.listdir(dirs['audio_hc']) if f.endswith('.wav')]\n    }\n    \n    # Create balanced dataset\n    synthetic_data = []\n    min_samples = min(len(files[k]) for k in files)\n    num_samples = min(num_samples, min_samples * 2)  # Don't exceed available files\n    \n    for i in range(num_samples):\n        # Alternate between PD and HC cases\n        if i % 2 == 0:\n            mri_file = random.choice(files['mri_pd'])\n            audio_file = random.choice(files['audio_pd'])\n            combined_label = 1\n        else:\n            mri_file = random.choice(files['mri_hc'])\n            audio_file = random.choice(files['audio_hc'])\n            combined_label = 0\n        \n        synthetic_data.append({\n            \"subject_id\": f\"subj_{i:03d}\",\n            \"mri_file\": mri_file,\n            \"audio_file\": audio_file,\n            \"mri_label\": 1 if 'pd' in mri_file.lower() else 0,\n            \"audio_label\": 1 if 'pd' in audio_file.lower() else 0,\n            \"combined_label\": combined_label,\n            \"split\": \"test\" if random.random() < test_ratio else \"train\"\n        })\n    \n    # Create DataFrame and save\n    df = pd.DataFrame(synthetic_data)\n    df.to_csv(output_path, index=False)\n    print(f\"Created synthetic dataset with {len(df)} samples at {output_path}\")\n    print(\"Class balance:\", df['combined_label'].value_counts())\n    return df\n\ndataset = create_synthetic_dataset(\n    output_path=\"/kaggle/working/synthetic_dataset.csv\",\n    num_samples=100,\n    test_ratio=0.2\n)    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-30T23:32:06.187925Z","iopub.execute_input":"2025-04-30T23:32:06.188579Z","iopub.status.idle":"2025-04-30T23:32:06.215759Z","shell.execute_reply.started":"2025-04-30T23:32:06.188556Z","shell.execute_reply":"2025-04-30T23:32:06.215158Z"}},"outputs":[{"name":"stdout","text":"Created synthetic dataset with 80 samples at /kaggle/working/synthetic_dataset.csv\nClass balance: combined_label\n1    40\n0    40\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":26},{"cell_type":"markdown","source":"last code","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nimport tensorflow as tf\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, BatchNormalization, Concatenate\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load the synthetic dataset\ndf = pd.read_csv(\"/kaggle/working/synthetic_dataset.csv\")\n\n# Initialize data lists\nmri_data = []\naudio_data = []\nlabels = []\nsubject_ids = []\n\n# Process each sample\nfor _, row in tqdm(df.iterrows(), total=len(df)):\n    # Process MRI\n    try:\n        mri = np.load(row['mri_file'])\n        # Simple normalization\n        mri = (mri - np.mean(mri)) / np.std(mri)\n        # Pad/truncate to 64x64x64\n        if mri.shape != (64, 64, 64):\n            mri = np.resize(mri, (64, 64, 64))\n        mri_data.append(mri)\n    except Exception as e:\n        print(f\"Error loading MRI {row['mri_file']}: {e}\")\n        continue\n    \n    # Process Audio\n    try:\n        y, sr = librosa.load(row['audio_file'], sr=22050)\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)\n        # Pad/truncate to 100 frames\n        if mfcc.shape[1] < 100:\n            mfcc = np.pad(mfcc, ((0,0), (0,100-mfcc.shape[1])))\n        else:\n            mfcc = mfcc[:, :100]\n        audio_data.append(mfcc.T)\n    except Exception as e:\n        print(f\"Error loading audio {row['audio_file']}: {e}\")\n        continue\n    \n    labels.append(row['combined_label'])\n    subject_ids.append(row['subject_id'])\n\n# Convert to numpy arrays\nX_mri = np.array(mri_data).reshape(-1, 64, 64, 64, 1)  # Add channel dimension\nX_audio = np.array(audio_data)\ny = np.array(labels)\n\n# Corrected data splitting code\ntrain_mask = [i for i in range(len(df)) if df.iloc[i]['split'] == 'train']\ntest_mask = [i for i in range(len(df)) if df.iloc[i]['split'] == 'test']\n\nX_mri_train, X_mri_test = X_mri[train_mask], X_mri[test_mask]\nX_audio_train, X_audio_test = X_audio[train_mask], X_audio[test_mask]\ny_train, y_test = y[train_mask], y[test_mask]\n\n# Simple multimodal model for small dataset\n# Enhanced Model Architecture\nimport numpy as np\nimport librosa\nimport pandas as pd\nimport tensorflow as tf\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Enhanced Model Architecture\ndef create_enhanced_model():\n    # MRI branch\n    mri_input = tf.keras.Input(shape=(64, 64, 64, 1))\n    x1 = tf.keras.layers.Conv3D(16, (3,3,3), activation='relu', padding='same')(mri_input)\n    x1 = tf.keras.layers.BatchNormalization()(x1)\n    x1 = tf.keras.layers.MaxPooling3D(2)(x1)\n    x1 = tf.keras.layers.Dropout(0.3)(x1)\n    \n    x1 = tf.keras.layers.Conv3D(32, (3,3,3), activation='relu', padding='same')(x1)\n    x1 = tf.keras.layers.BatchNormalization()(x1)\n    x1 = tf.keras.layers.MaxPooling3D(2)(x1)\n    x1 = tf.keras.layers.Dropout(0.3)(x1)\n    \n    x1 = tf.keras.layers.Flatten()(x1)\n    x1 = tf.keras.layers.Dense(64, activation='relu')(x1)\n    x1 = tf.keras.layers.Dropout(0.4)(x1)\n    \n    # Audio branch\n    audio_input = tf.keras.Input(shape=(100, 13))\n    x2 = tf.keras.layers.LSTM(32, return_sequences=True)(audio_input)\n    x2 = tf.keras.layers.Attention()([x2, x2])\n    x2 = tf.keras.layers.LSTM(32)(x2)\n    x2 = tf.keras.layers.Dense(32, activation='relu')(x2)\n    x2 = tf.keras.layers.Dropout(0.4)(x2)\n    \n    # Combined\n    combined = tf.keras.layers.Concatenate()([x1, x2])\n    z = tf.keras.layers.Dense(64, activation='relu')(combined)\n    z = tf.keras.layers.Dropout(0.5)(z)\n    output = tf.keras.layers.Dense(1, activation='sigmoid')(z)\n    \n    model = tf.keras.Model(inputs=[mri_input, audio_input], outputs=output)\n    \n    optimizer = tf.keras.optimizers.Adam(\n        learning_rate=0.00005,\n        beta_1=0.9,\n        beta_2=0.999,\n        amsgrad=True\n    )\n    \n    model.compile(\n        optimizer=optimizer,\n        loss='binary_crossentropy',\n        metrics=[\n            'accuracy',\n            tf.keras.metrics.AUC(name='auc'),\n            tf.keras.metrics.Precision(name='precision'),\n            tf.keras.metrics.Recall(name='recall')\n        ]\n    )\n    return model\n\n# Create model\nmodel = create_enhanced_model()\nmodel.summary()\n\n# Callbacks with corrected model saving\ncallbacks = [\n    tf.keras.callbacks.EarlyStopping(monitor='val_auc', patience=15, mode='max', restore_best_weights=True),\n    tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=7, min_lr=1e-6),\n    tf.keras.callbacks.ModelCheckpoint('best_model.keras', save_best_only=True, monitor='val_auc', mode='max')\n]\n\n# Data preparation (assuming X_mri_train, X_audio_train, y_train, etc. are already loaded)\n# Add validation split if not already done\nX_mri_train, X_mri_val, X_audio_train, X_audio_val, y_train, y_val = train_test_split(\n    X_mri_train, X_audio_train, y_train, test_size=0.2, random_state=42, stratify=y_train\n)\n\n# Class weights\nclass_weights = {0: 1, 1: 1.01}  # Adjust based on your dataset balance\n\n# Train the model\nhistory = model.fit(\n    [X_mri_train, X_audio_train], y_train,\n    validation_data=([X_mri_val, X_audio_val], y_val),\n    epochs=100,\n    batch_size=8,\n    callbacks=callbacks,\n    class_weight=class_weights\n)\n\n# Load best model\nmodel = tf.keras.models.load_model('best_model.keras')\n\n# Enhanced evaluation function\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras import layers, regularizers\nfrom sklearn.metrics import classification_report\n\n# Improved Model Architecture with Stronger Regularization\ndef create_robust_model():\n    # MRI branch with spatial dropout\n    mri_input = tf.keras.Input(shape=(64, 64, 64, 1))\n    x1 = layers.Conv3D(16, (3,3,3), activation='relu', padding='same',\n                      kernel_regularizer=regularizers.l2(0.001))(mri_input)\n    x1 = layers.BatchNormalization()(x1)\n    x1 = layers.SpatialDropout3D(0.2)(x1)  # Spatial dropout for 3D data\n    x1 = layers.MaxPooling3D(2)(x1)\n    \n    x1 = layers.Conv3D(32, (3,3,3), activation='relu', padding='same',\n                      kernel_regularizer=regularizers.l2(0.001))(x1)\n    x1 = layers.BatchNormalization()(x1)\n    x1 = layers.SpatialDropout3D(0.3)(x1)\n    x1 = layers.MaxPooling3D(2)(x1)\n    \n    x1 = layers.GlobalAveragePooling3D()(x1)  # Better than Flatten for 3D\n    x1 = layers.Dense(32, activation='relu',\n                     kernel_regularizer=regularizers.l2(0.001))(x1)\n    x1 = layers.Dropout(0.5)(x1)\n    \n    # Audio branch with bidirectional LSTM\n    audio_input = tf.keras.Input(shape=(100, 13))\n    x2 = layers.Bidirectional(layers.LSTM(16, return_sequences=True,\n                                       kernel_regularizer=regularizers.l2(0.001)))(audio_input)\n    x2 = layers.Attention()([x2, x2])\n    x2 = layers.Bidirectional(layers.LSTM(16))(x2)\n    x2 = layers.Dense(16, activation='relu',\n                     kernel_regularizer=regularizers.l2(0.001))(x2)\n    x2 = layers.Dropout(0.5)(x2)\n    \n    # Combined with residual connection\n    combined = layers.Concatenate()([x1, x2])\n    z = layers.Dense(32, activation='relu',\n                    kernel_regularizer=regularizers.l2(0.001))(combined)\n    z = layers.Dropout(0.6)(z)\n    \n    # Output with temperature scaling\n    output = layers.Dense(1, activation='sigmoid')(z)\n    \n    model = tf.keras.Model(inputs=[mri_input, audio_input], outputs=output)\n    \n    # Custom optimizer with gradient clipping\n    optimizer = tf.keras.optimizers.AdamW(\n        learning_rate=0.0001,\n        weight_decay=0.001,  # Built-in L2 regularization\n        clipnorm=1.0\n    )\n    \n    model.compile(\n        optimizer=optimizer,\n        loss='binary_crossentropy',\n        metrics=[\n            'accuracy',\n            tf.keras.metrics.AUC(name='auc'),\n            tf.keras.metrics.Precision(name='precision'),\n            tf.keras.metrics.Recall(name='recall')\n        ]\n    )\n    return model\n\n# Create model\nmodel = create_robust_model()\n\n# Enhanced Callbacks\ncallbacks = [\n    tf.keras.callbacks.EarlyStopping(\n        monitor='val_auc',\n        patience=20,\n        mode='max',\n        restore_best_weights=True,\n        min_delta=0.001\n    ),\n    tf.keras.callbacks.ReduceLROnPlateau(\n        monitor='val_loss',\n        factor=0.5,\n        patience=10,\n        min_lr=1e-6,\n        verbose=1\n    ),\n    tf.keras.callbacks.ModelCheckpoint(\n        'best_model.keras',\n        save_best_only=True,\n        monitor='val_auc',\n        mode='max'\n    ),\n    tf.keras.callbacks.TerminateOnNaN()\n]\n\n# Data Augmentation\nclass MRIAugmenter(tf.keras.layers.Layer):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        \n    def call(self, inputs, training=None):\n        if not training:\n            return inputs\n            \n        # Random rotations\n        inputs = tf.image.rot90(inputs, k=tf.random.uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))\n        \n        # Random flips\n        if tf.random.uniform(shape=[]) > 0.5:\n            inputs = tf.image.flip_left_right(inputs)\n        if tf.random.uniform(shape=[]) > 0.5:\n            inputs = tf.image.flip_up_down(inputs)\n            \n        # Random brightness/contrast\n        inputs = tf.image.random_brightness(inputs, max_delta=0.1)\n        inputs = tf.image.random_contrast(inputs, lower=0.9, upper=1.1)\n        \n        return inputs\n\n# Create augmentation model\naugmentation_model = tf.keras.Sequential([\n    MRIAugmenter(input_shape=(64, 64, 64, 1)),\n])\n\n# Create data generators with augmentation\ntrain_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=lambda x: augmentation_model(x, training=True)\n)\n\n# Training parameters\nbatch_size = 8\nepochs = 150\n\n# Train the model with augmentation\nhistory = model.fit(\n    [X_mri_train, X_audio_train], y_train,\n    validation_data=([X_mri_val, X_audio_val], y_val),\n    epochs=epochs,\n    batch_size=batch_size,\n    callbacks=callbacks,\n    class_weight=class_weights,\n    verbose=1\n)\n\n# Load best model\nmodel = tf.keras.models.load_model('best_model.keras', custom_objects={'MRIAugmenter': MRIAugmenter})\n\n# Enhanced Evaluation with Confidence Intervals\ndef robust_evaluation(model, X_mri_test, X_audio_test, y_test, n_bootstrap=1000):\n    y_prob = model.predict([X_mri_test, X_audio_test])\n    \n    # Find optimal threshold\n    fpr, tpr, thresholds = roc_curve(y_test, y_prob)\n    optimal_idx = np.argmax(tpr - fpr)\n    optimal_threshold = thresholds[optimal_idx]\n    \n    # Bootstrap evaluation\n    metrics = {\n        'accuracy': [],\n        'precision': [],\n        'recall': [],\n        'specificity': [],\n        'f1': [],\n        'auc': []\n    }\n    \n    for _ in range(n_bootstrap):\n        indices = np.random.choice(len(y_test), len(y_test), replace=True)\n        y_prob_sample = y_prob[indices]\n        y_test_sample = y_test[indices]\n        \n        y_pred_sample = (y_prob_sample > optimal_threshold).astype(int)\n        cm = confusion_matrix(y_test_sample, y_pred_sample)\n        \n        if cm.shape == (2,2):\n            tn, fp, fn, tp = cm.ravel()\n            metrics['accuracy'].append(accuracy_score(y_test_sample, y_pred_sample))\n            metrics['precision'].append(precision_score(y_test_sample, y_pred_sample))\n            metrics['recall'].append(recall_score(y_test_sample, y_pred_sample))\n            metrics['specificity'].append(tn/(tn+fp))\n            metrics['f1'].append(f1_score(y_test_sample, y_pred_sample))\n            metrics['auc'].append(roc_auc_score(y_test_sample, y_prob_sample))\n    \n    # Calculate mean and confidence intervals\n    results = {}\n    for metric in metrics:\n        if metrics[metric]:\n            results[metric] = {\n                'mean': np.mean(metrics[metric]),\n                'ci_low': np.percentile(metrics[metric], 2.5),\n                'ci_high': np.percentile(metrics[metric], 97.5)\n            }\n    \n    # Final evaluation on full test set\n    y_pred = (y_prob > optimal_threshold).astype(int)\n    cm = confusion_matrix(y_test, y_pred)\n    \n    # Visualization\n    plt.figure(figsize=(12,5))\n    \n    plt.subplot(1,2,1)\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n                xticklabels=['Healthy', 'Parkinson\\'s'],\n                yticklabels=['Healthy', 'Parkinson\\'s'])\n    plt.title(f'Confusion Matrix\\n(Threshold={optimal_threshold:.2f})')\n    plt.xlabel('Predicted')\n    plt.ylabel('True')\n    \n    plt.subplot(1,2,2)\n    plt.plot(fpr, tpr, label=f'ROC Curve (AUC = {roc_auc_score(y_test, y_prob):.2f})')\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.scatter(fpr[optimal_idx], tpr[optimal_idx], marker='o', color='red')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC Curve')\n    plt.legend()\n    \n    plt.tight_layout()\n    plt.show()\n    \n    # Print comprehensive report\n    print(\"\\nRobust Classification Report:\")\n    print(f\"Optimal Threshold: {optimal_threshold:.4f}\")\n    for metric in results:\n        print(f\"{metric.capitalize()}: {results[metric]['mean']:.3f} \"\n              f\"(95% CI: {results[metric]['ci_low']:.3f}-{results[metric]['ci_high']:.3f})\")\n    \n    print(\"\\nDetailed Classification Report:\")\n    print(classification_report(y_test, y_pred, target_names=['Healthy', 'Parkinson\\'s']))\n\n# Run robust evaluation\nrobust_evaluation(model, X_mri_test, X_audio_test, y_test)\n\n# Plot training history\nplt.figure(figsize=(12,4))\nplt.subplot(1,2,1)\nplt.plot(history.history['accuracy'], label='Train Accuracy')\nplt.plot(history.history['val_accuracy'], label='Val Accuracy')\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.plot(history.history['loss'], label='Train Loss')\nplt.plot(history.history['val_loss'], label='Val Loss')\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-01T00:01:07.074322Z","iopub.execute_input":"2025-05-01T00:01:07.074922Z","iopub.status.idle":"2025-05-01T00:02:21.391274Z","shell.execute_reply.started":"2025-05-01T00:01:07.074897Z","shell.execute_reply":"2025-05-01T00:02:21.390497Z"}},"outputs":[{"name":"stderr","text":"100%|██████████| 80/80 [00:11<00:00,  7.19it/s]\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_25\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_25\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input_layer_50            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m1\u001b[0m)  │              \u001b[38;5;34m0\u001b[0m │ -                      │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)              │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ conv3d_65 (\u001b[38;5;33mConv3D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m16\u001b[0m) │            \u001b[38;5;34m448\u001b[0m │ input_layer_50[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ batch_normalization_71    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m16\u001b[0m) │             \u001b[38;5;34m64\u001b[0m │ conv3d_65[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ max_pooling3d_65          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m) │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_7… │\n│ (\u001b[38;5;33mMaxPooling3D\u001b[0m)            │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_79 (\u001b[38;5;33mDropout\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m) │              \u001b[38;5;34m0\u001b[0m │ max_pooling3d_65[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ conv3d_66 (\u001b[38;5;33mConv3D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m) │         \u001b[38;5;34m13,856\u001b[0m │ dropout_79[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ batch_normalization_72    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m) │            \u001b[38;5;34m128\u001b[0m │ conv3d_66[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ input_layer_51            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m13\u001b[0m)        │              \u001b[38;5;34m0\u001b[0m │ -                      │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)              │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ max_pooling3d_66          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m) │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_7… │\n│ (\u001b[38;5;33mMaxPooling3D\u001b[0m)            │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ lstm_47 (\u001b[38;5;33mLSTM\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │          \u001b[38;5;34m5,888\u001b[0m │ input_layer_51[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_80 (\u001b[38;5;33mDropout\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m) │              \u001b[38;5;34m0\u001b[0m │ max_pooling3d_66[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ attention_8 (\u001b[38;5;33mAttention\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │              \u001b[38;5;34m0\u001b[0m │ lstm_47[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],         │\n│                           │                        │                │ lstm_47[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ flatten_25 (\u001b[38;5;33mFlatten\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m131072\u001b[0m)         │              \u001b[38;5;34m0\u001b[0m │ dropout_80[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ lstm_48 (\u001b[38;5;33mLSTM\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │          \u001b[38;5;34m8,320\u001b[0m │ attention_8[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_91 (\u001b[38;5;33mDense\u001b[0m)          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │      \u001b[38;5;34m8,388,672\u001b[0m │ flatten_25[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_92 (\u001b[38;5;33mDense\u001b[0m)          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │          \u001b[38;5;34m1,056\u001b[0m │ lstm_48[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_81 (\u001b[38;5;33mDropout\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ dense_91[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_82 (\u001b[38;5;33mDropout\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ dense_92[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ concatenate_25            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m96\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ dropout_81[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],      │\n│ (\u001b[38;5;33mConcatenate\u001b[0m)             │                        │                │ dropout_82[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_93 (\u001b[38;5;33mDense\u001b[0m)          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │          \u001b[38;5;34m6,208\u001b[0m │ concatenate_25[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_83 (\u001b[38;5;33mDropout\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ dense_93[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_94 (\u001b[38;5;33mDense\u001b[0m)          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m65\u001b[0m │ dropout_83[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)              </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">        Param # </span>┃<span style=\"font-weight: bold\"> Connected to           </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input_layer_50            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)  │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)              │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ conv3d_65 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv3D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>) │            <span style=\"color: #00af00; text-decoration-color: #00af00\">448</span> │ input_layer_50[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ batch_normalization_71    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>) │             <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │ conv3d_65[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ max_pooling3d_65          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>) │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_7… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling3D</span>)            │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_79 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>) │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ max_pooling3d_65[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ conv3d_66 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv3D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>) │         <span style=\"color: #00af00; text-decoration-color: #00af00\">13,856</span> │ dropout_79[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ batch_normalization_72    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>) │            <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │ conv3d_66[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ input_layer_51            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>)        │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)              │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ max_pooling3d_66          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>) │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_7… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling3D</span>)            │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ lstm_47 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">5,888</span> │ input_layer_51[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_80 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>) │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ max_pooling3d_66[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ attention_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Attention</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ lstm_47[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],         │\n│                           │                        │                │ lstm_47[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ flatten_25 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">131072</span>)         │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dropout_80[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ lstm_48 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │          <span style=\"color: #00af00; text-decoration-color: #00af00\">8,320</span> │ attention_8[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_91 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │      <span style=\"color: #00af00; text-decoration-color: #00af00\">8,388,672</span> │ flatten_25[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_92 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │          <span style=\"color: #00af00; text-decoration-color: #00af00\">1,056</span> │ lstm_48[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_81 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dense_91[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_82 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dense_92[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ concatenate_25            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">96</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dropout_81[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],      │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>)             │                        │                │ dropout_82[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_93 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │          <span style=\"color: #00af00; text-decoration-color: #00af00\">6,208</span> │ concatenate_25[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_83 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dense_93[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_94 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">65</span> │ dropout_83[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m8,424,705\u001b[0m (32.14 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,424,705</span> (32.14 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m8,424,609\u001b[0m (32.14 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,424,609</span> (32.14 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m96\u001b[0m (384.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">96</span> (384.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"Epoch 1/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 374ms/step - accuracy: 0.6551 - auc: 0.7378 - loss: 1.4758 - precision: 0.6557 - recall: 0.8164 - val_accuracy: 0.5385 - val_auc: 0.6310 - val_loss: 0.6904 - val_precision: 1.0000 - val_recall: 0.1429 - learning_rate: 5.0000e-05\nEpoch 2/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 219ms/step - accuracy: 0.4637 - auc: 0.5242 - loss: 2.5554 - precision: 0.3888 - recall: 0.2279 - val_accuracy: 0.4615 - val_auc: 0.6786 - val_loss: 0.6915 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 5.0000e-05\nEpoch 3/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.6450 - auc: 0.7033 - loss: 2.7512 - precision: 0.5631 - recall: 0.3988 - val_accuracy: 0.5385 - val_auc: 0.5476 - val_loss: 0.6776 - val_precision: 0.5455 - val_recall: 0.8571 - learning_rate: 5.0000e-05\nEpoch 4/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.5243 - auc: 0.4627 - loss: 4.1234 - precision: 0.5077 - recall: 0.6685 - val_accuracy: 0.3846 - val_auc: 0.5595 - val_loss: 0.6760 - val_precision: 0.4545 - val_recall: 0.7143 - learning_rate: 5.0000e-05\nEpoch 5/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 226ms/step - accuracy: 0.4956 - auc: 0.4390 - loss: 3.7741 - precision: 0.4749 - recall: 0.5643 - val_accuracy: 0.5385 - val_auc: 0.7381 - val_loss: 0.6813 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 6/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.5360 - auc: 0.5233 - loss: 2.6252 - precision: 0.5236 - recall: 0.6840 - val_accuracy: 0.5385 - val_auc: 0.4286 - val_loss: 0.6915 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 7/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 83ms/step - accuracy: 0.4927 - auc: 0.4836 - loss: 2.8474 - precision: 0.4650 - recall: 0.5740 - val_accuracy: 0.5385 - val_auc: 0.6310 - val_loss: 0.6847 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 8/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.5238 - auc: 0.4820 - loss: 2.2135 - precision: 0.5390 - recall: 0.6542 - val_accuracy: 0.5385 - val_auc: 0.6310 - val_loss: 0.6818 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 9/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.7369 - auc: 0.7029 - loss: 0.7826 - precision: 0.7389 - recall: 0.6878 - val_accuracy: 0.5385 - val_auc: 0.5833 - val_loss: 0.6845 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 10/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 86ms/step - accuracy: 0.6221 - auc: 0.6848 - loss: 1.0620 - precision: 0.6060 - recall: 0.6924 - val_accuracy: 0.5385 - val_auc: 0.6190 - val_loss: 0.6896 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 11/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 83ms/step - accuracy: 0.5613 - auc: 0.6933 - loss: 0.8075 - precision: 0.5456 - recall: 0.6509 - val_accuracy: 0.5385 - val_auc: 0.6190 - val_loss: 0.6947 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 12/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 83ms/step - accuracy: 0.6092 - auc: 0.6679 - loss: 0.9065 - precision: 0.6046 - recall: 0.6581 - val_accuracy: 0.5385 - val_auc: 0.5119 - val_loss: 0.7099 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 13/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.5472 - auc: 0.5793 - loss: 1.3395 - precision: 0.4951 - recall: 0.4847 - val_accuracy: 0.5385 - val_auc: 0.5357 - val_loss: 0.7279 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 14/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 83ms/step - accuracy: 0.6166 - auc: 0.6747 - loss: 0.8105 - precision: 0.5627 - recall: 0.7438 - val_accuracy: 0.5385 - val_auc: 0.5595 - val_loss: 0.7435 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 15/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.4953 - auc: 0.6625 - loss: 0.8671 - precision: 0.5069 - recall: 0.7392 - val_accuracy: 0.5385 - val_auc: 0.4881 - val_loss: 0.7747 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 16/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 83ms/step - accuracy: 0.5164 - auc: 0.6606 - loss: 0.7791 - precision: 0.5242 - recall: 0.6991 - val_accuracy: 0.5385 - val_auc: 0.4405 - val_loss: 0.8065 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 17/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.6018 - auc: 0.7279 - loss: 0.7104 - precision: 0.5568 - recall: 0.6873 - val_accuracy: 0.5385 - val_auc: 0.4405 - val_loss: 0.8258 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 18/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.6038 - auc: 0.7316 - loss: 0.5371 - precision: 0.6016 - recall: 0.7101 - val_accuracy: 0.5385 - val_auc: 0.4643 - val_loss: 0.8227 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 19/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 83ms/step - accuracy: 0.6074 - auc: 0.6441 - loss: 0.9447 - precision: 0.5821 - recall: 0.8433 - val_accuracy: 0.5385 - val_auc: 0.4881 - val_loss: 0.8290 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.2500e-05\nEpoch 20/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 83ms/step - accuracy: 0.7082 - auc: 0.7750 - loss: 0.7660 - precision: 0.7154 - recall: 0.8650 - val_accuracy: 0.5385 - val_auc: 0.4881 - val_loss: 0.8387 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.2500e-05\nEpoch 1/150\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_31/1475176939.py:264: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 545ms/step - accuracy: 0.5293 - auc: 0.5795 - loss: 0.9284 - precision: 0.6053 - recall: 0.7207 - val_accuracy: 0.5385 - val_auc: 0.6310 - val_loss: 0.8417 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 2/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 106ms/step - accuracy: 0.5017 - auc: 0.5028 - loss: 1.1779 - precision: 0.5145 - recall: 0.6494 - val_accuracy: 0.5385 - val_auc: 0.6429 - val_loss: 0.8417 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 3/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 107ms/step - accuracy: 0.5432 - auc: 0.5881 - loss: 1.0774 - precision: 0.5292 - recall: 0.6404 - val_accuracy: 0.5385 - val_auc: 0.6667 - val_loss: 0.8410 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 4/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 106ms/step - accuracy: 0.4371 - auc: 0.4697 - loss: 1.1000 - precision: 0.4489 - recall: 0.7101 - val_accuracy: 0.5385 - val_auc: 0.7143 - val_loss: 0.8399 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 5/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 92ms/step - accuracy: 0.4585 - auc: 0.5666 - loss: 0.8686 - precision: 0.4453 - recall: 0.7006 - val_accuracy: 0.5385 - val_auc: 0.7024 - val_loss: 0.8395 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 6/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 92ms/step - accuracy: 0.5842 - auc: 0.6178 - loss: 1.1614 - precision: 0.5379 - recall: 0.7765 - val_accuracy: 0.5385 - val_auc: 0.6905 - val_loss: 0.8386 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 7/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 107ms/step - accuracy: 0.5454 - auc: 0.5997 - loss: 0.8925 - precision: 0.5210 - recall: 0.7158 - val_accuracy: 0.5385 - val_auc: 0.7619 - val_loss: 0.8379 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 8/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 108ms/step - accuracy: 0.3642 - auc: 0.2908 - loss: 1.5246 - precision: 0.3252 - recall: 0.4008 - val_accuracy: 0.5385 - val_auc: 0.7738 - val_loss: 0.8375 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 9/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 92ms/step - accuracy: 0.6177 - auc: 0.5593 - loss: 0.9579 - precision: 0.6020 - recall: 0.8739 - val_accuracy: 0.5385 - val_auc: 0.7738 - val_loss: 0.8373 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 10/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 93ms/step - accuracy: 0.6301 - auc: 0.5986 - loss: 0.9601 - precision: 0.5863 - recall: 0.7400 - val_accuracy: 0.5385 - val_auc: 0.7262 - val_loss: 0.8370 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 11/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 92ms/step - accuracy: 0.5100 - auc: 0.4348 - loss: 0.9859 - precision: 0.5152 - recall: 0.7981 - val_accuracy: 0.5385 - val_auc: 0.7500 - val_loss: 0.8366 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 12/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 92ms/step - accuracy: 0.5618 - auc: 0.5177 - loss: 0.9385 - precision: 0.4980 - recall: 0.4695 - val_accuracy: 0.6923 - val_auc: 0.7143 - val_loss: 0.8367 - val_precision: 0.6364 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 13/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 92ms/step - accuracy: 0.5610 - auc: 0.5716 - loss: 1.0577 - precision: 0.5294 - recall: 0.8203 - val_accuracy: 0.6923 - val_auc: 0.7024 - val_loss: 0.8369 - val_precision: 0.6364 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 14/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 92ms/step - accuracy: 0.6166 - auc: 0.6498 - loss: 0.8040 - precision: 0.6260 - recall: 0.7263 - val_accuracy: 0.6923 - val_auc: 0.7024 - val_loss: 0.8371 - val_precision: 0.6364 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 15/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 92ms/step - accuracy: 0.5039 - auc: 0.5007 - loss: 0.9654 - precision: 0.4149 - recall: 0.5847 - val_accuracy: 0.6154 - val_auc: 0.6786 - val_loss: 0.8375 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 1.0000e-04\nEpoch 16/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 93ms/step - accuracy: 0.4060 - auc: 0.4561 - loss: 1.0153 - precision: 0.3987 - recall: 0.5690 - val_accuracy: 0.6154 - val_auc: 0.6667 - val_loss: 0.8376 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 1.0000e-04\nEpoch 17/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 95ms/step - accuracy: 0.5885 - auc: 0.5413 - loss: 0.9220 - precision: 0.6028 - recall: 0.7411 - val_accuracy: 0.6154 - val_auc: 0.6190 - val_loss: 0.8382 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 1.0000e-04\nEpoch 18/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 95ms/step - accuracy: 0.3741 - auc: 0.3372 - loss: 1.3761 - precision: 0.4035 - recall: 0.5024 - val_accuracy: 0.6154 - val_auc: 0.5952 - val_loss: 0.8386 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 1.0000e-04\nEpoch 19/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 94ms/step - accuracy: 0.4316 - auc: 0.3806 - loss: 1.0672 - precision: 0.4320 - recall: 0.5513 - val_accuracy: 0.6154 - val_auc: 0.5476 - val_loss: 0.8389 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 1.0000e-04\nEpoch 20/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 93ms/step - accuracy: 0.5500 - auc: 0.5185 - loss: 1.0378 - precision: 0.5921 - recall: 0.6482 - val_accuracy: 0.6154 - val_auc: 0.5476 - val_loss: 0.8389 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 1.0000e-04\nEpoch 21/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 79ms/step - accuracy: 0.6816 - auc: 0.7180 - loss: 0.8035 - precision: 0.6705 - recall: 0.8163\nEpoch 21: ReduceLROnPlateau reducing learning rate to 4.999999873689376e-05.\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 93ms/step - accuracy: 0.6613 - auc: 0.6980 - loss: 0.8190 - precision: 0.6509 - recall: 0.8008 - val_accuracy: 0.6154 - val_auc: 0.5714 - val_loss: 0.8386 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 1.0000e-04\nEpoch 22/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 93ms/step - accuracy: 0.5346 - auc: 0.7343 - loss: 0.7768 - precision: 0.4878 - recall: 0.7752 - val_accuracy: 0.6154 - val_auc: 0.5714 - val_loss: 0.8386 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 5.0000e-05\nEpoch 23/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 93ms/step - accuracy: 0.6441 - auc: 0.7056 - loss: 0.8623 - precision: 0.5628 - recall: 0.8186 - val_accuracy: 0.6154 - val_auc: 0.5714 - val_loss: 0.8386 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 5.0000e-05\nEpoch 24/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 92ms/step - accuracy: 0.5703 - auc: 0.7311 - loss: 0.8126 - precision: 0.5332 - recall: 0.7295 - val_accuracy: 0.6154 - val_auc: 0.5595 - val_loss: 0.8384 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 5.0000e-05\nEpoch 25/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 93ms/step - accuracy: 0.5020 - auc: 0.5020 - loss: 1.1351 - precision: 0.3973 - recall: 0.5283 - val_accuracy: 0.6154 - val_auc: 0.5595 - val_loss: 0.8381 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 5.0000e-05\nEpoch 26/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 93ms/step - accuracy: 0.5091 - auc: 0.5505 - loss: 0.8910 - precision: 0.5105 - recall: 0.7783 - val_accuracy: 0.6154 - val_auc: 0.5714 - val_loss: 0.8378 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 5.0000e-05\nEpoch 27/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 92ms/step - accuracy: 0.6135 - auc: 0.5797 - loss: 0.9486 - precision: 0.6752 - recall: 0.7023 - val_accuracy: 0.6154 - val_auc: 0.5833 - val_loss: 0.8373 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 5.0000e-05\nEpoch 28/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 93ms/step - accuracy: 0.4905 - auc: 0.5692 - loss: 0.8344 - precision: 0.4712 - recall: 0.6261 - val_accuracy: 0.6154 - val_auc: 0.6071 - val_loss: 0.8371 - val_precision: 0.6000 - val_recall: 0.8571 - learning_rate: 5.0000e-05\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 3 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nRobust Classification Report:\nOptimal Threshold: 0.5181\nAccuracy: 0.469 (95% CI: 0.200-0.733)\nPrecision: 0.453 (95% CI: 0.125-0.800)\nRecall: 0.574 (95% CI: 0.199-1.000)\nSpecificity: 0.376 (95% CI: 0.000-0.750)\nF1: 0.490 (95% CI: 0.154-0.769)\nAuc: 0.395 (95% CI: 0.111-0.722)\n\nDetailed Classification Report:\n              precision    recall  f1-score   support\n\n     Healthy       0.50      0.38      0.43         8\n Parkinson's       0.44      0.57      0.50         7\n\n    accuracy                           0.47        15\n   macro avg       0.47      0.47      0.46        15\nweighted avg       0.47      0.47      0.46        15\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x400 with 2 Axes>","image/png":"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\n"},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"import os\nimport random\nimport pandas as pd\nfrom collections import defaultdict\n\n# Directories\nMRI_PD_DIR = \"/kaggle/input/parkinsons/data/mri_pd\"\nMRI_HC_DIR = \"/kaggle/input/parkinsons/data/mri_hc\"\nAUDIO_PD_DIR = \"/kaggle/input/parkinsons/data/audio_pd\"\nAUDIO_HC_DIR = \"/kaggle/input/parkinsons/data/audio_hc\"\nOUTPUT_CSV = \"/kaggle/working/synthetic_dataset.csv\"\n\n# Config\nNUM_PAIRS = 100  # Total number of samples\nTEST_RATIO = 0.2  # 20% for testing\n\n# Get all files organized by subject ID\ndef organize_files(dir_path, file_type):\n    files = defaultdict(list)\n    for f in os.listdir(dir_path):\n        if file_type == 'mri' and f.endswith('.npy'):\n            subject_id = f.split('_')[0]  # Assuming format: subjectID_*.npy\n            files[subject_id].append(os.path.join(dir_path, f))\n        elif file_type == 'audio' and f.endswith('.wav'):\n            subject_id = f.split('_')[0]  # Assuming format: subjectID_*.wav\n            files[subject_id].append(os.path.join(dir_path, f))\n    return files\n\n# Organize files by subject\nmri_pd_files = organize_files(MRI_PD_DIR, 'mri')\nmri_hc_files = organize_files(MRI_HC_DIR, 'mri')\naudio_pd_files = organize_files(AUDIO_PD_DIR, 'audio')\naudio_hc_files = organize_files(AUDIO_HC_DIR, 'audio')\n\n# Create realistic patient profiles\nsynthetic_data = []\n\n# [Previous code remains the same until the data creation part]\n\n# Get the actual number of available subjects\nnum_pd_subjects = len(pd_subjects)\nnum_hc_subjects = len(hc_subjects)\n\n# Calculate how many samples we can actually create per category\nsamples_per_category = min(NUM_PAIRS//4, num_pd_subjects, num_hc_subjects)\nif samples_per_category == 0:\n    raise ValueError(\"Not enough subjects in one or both categories to create dataset\")\n\n# Reset NUM_PAIRS to what we can actually create\nNUM_PAIRS = samples_per_category * 4\nprint(f\"Creating {NUM_PAIRS} samples ({samples_per_category} per category)\")\n\n# 1. Create true Parkinson's cases (MRI+Audio both positive)\nfor subject in pd_subjects[:samples_per_category]:\n    if subject in audio_pd_files:\n        # Take first MRI and audio file for each subject\n        mri = mri_pd_files[subject][0] if mri_pd_files[subject] else None\n        audio = audio_pd_files[subject][0] if audio_pd_files[subject] else None\n        if mri and audio:\n            synthetic_data.append({\n                \"subject_id\": subject,\n                \"mri_file\": mri,\n                \"audio_file\": audio,\n                \"mri_label\": 1,\n                \"audio_label\": 1,\n                \"combined_label\": 1,\n                \"split\": \"train\" if random.random() > TEST_RATIO else \"test\"\n            })\n\n# 2. Create true healthy cases (MRI+Audio both negative)\nfor subject in hc_subjects[:samples_per_category]:\n    if subject in audio_hc_files:\n        mri = mri_hc_files[subject][0] if mri_hc_files[subject] else None\n        audio = audio_hc_files[subject][0] if audio_hc_files[subject] else None\n        if mri and audio:\n            synthetic_data.append({\n                \"subject_id\": subject,\n                \"mri_file\": mri,\n                \"audio_file\": audio,\n                \"mri_label\": 0,\n                \"audio_label\": 0,\n                \"combined_label\": 0,\n                \"split\": \"train\" if random.random() > TEST_RATIO else \"test\"\n            })\n\n# 3. Create discordant cases (MRI+ but Audio-)\nfor subject in pd_subjects[samples_per_category:samples_per_category*2]:\n    if subject in audio_hc_files:  # Using healthy audio for PD subjects\n        mri = mri_pd_files[subject][0] if mri_pd_files[subject] else None\n        audio = audio_hc_files[subject][0] if audio_hc_files[subject] else None\n        if mri and audio:\n            synthetic_data.append({\n                \"subject_id\": subject,\n                \"mri_file\": mri,\n                \"audio_file\": audio,\n                \"mri_label\": 1,\n                \"audio_label\": 0,\n                \"combined_label\": 1,\n                \"split\": \"train\" if random.random() > TEST_RATIO else \"test\"\n            })\n\n# 4. Create discordant cases (MRI- but Audio+)\nfor subject in hc_subjects[samples_per_category:samples_per_category*2]:\n    if subject in audio_pd_files:  # Using PD audio for healthy subjects\n        mri = mri_hc_files[subject][0] if mri_hc_files[subject] else None\n        audio = audio_pd_files[subject][0] if audio_pd_files[subject] else None\n        if mri and audio:\n            synthetic_data.append({\n                \"subject_id\": subject,\n                \"mri_file\": mri,\n                \"audio_file\": audio,\n                \"mri_label\": 0,\n                \"audio_label\": 1,\n                \"combined_label\": 1,\n                \"split\": \"train\" if random.random() > TEST_RATIO else \"test\"\n            })\n\n# [Rest of the code remains the same]\n\n# Save to CSV\ndf = pd.DataFrame(synthetic_data)\ndf.to_csv(OUTPUT_CSV, index=False)\n\n# Dataset statistics\nprint(f\"\\nDataset created with {len(df)} samples\")\nprint(\"Class distribution:\")\nprint(df['combined_label'].value_counts())\nprint(\"\\nSplit distribution:\")\nprint(df['split'].value_counts())\nprint(\"\\nLabel combinations:\")\nprint(df.groupby(['mri_label', 'audio_label']).size())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-01T03:56:51.190876Z","iopub.execute_input":"2025-05-01T03:56:51.191153Z","iopub.status.idle":"2025-05-01T03:56:51.225197Z","shell.execute_reply.started":"2025-05-01T03:56:51.191133Z","shell.execute_reply":"2025-05-01T03:56:51.224186Z"}},"outputs":[{"name":"stdout","text":"Creating 4 samples (1 per category)\n\nDataset created with 0 samples\nClass distribution:\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/2855309033.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    125\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"\\nDataset created with {len(df)} samples\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Class distribution:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'combined_label'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nSplit distribution:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'split'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4100\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4101\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4102\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4103\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4104\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/range.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    415\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    416\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mHashable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 417\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    418\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_indexing_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    419\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'combined_label'"],"ename":"KeyError","evalue":"'combined_label'","output_type":"error"}],"execution_count":4},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras import layers, regularizers, Model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_auc_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Configuration\nMRI_SHAPE = (64, 64, 64, 1)  # Extracted voxel dimensions\nAUDIO_SHAPE = (100, 13)       # MFCC features (time steps × features)\nMIDBRAIN_COORDS = (85, 130, 110)\n\n# 1. Data Loading and Processing ==============================================\n\ndef extract_midbrain_voxel(mri_data, center_coords=MIDBRAIN_COORDS, voxel_size=(64, 64, 64)):\n    \"\"\"Extract 64×64×64 voxel centered at given coordinates\"\"\"\n    # Handle 4D input (1, depth, height, width)\n    if len(mri_data.shape) == 4:\n        mri_data = mri_data[0]  # Remove batch dimension\n    \n    z, y, x = center_coords\n    dz, dy, dx = voxel_size\n    \n    # Initialize output with zeros (for edge padding)\n    voxel = np.zeros(voxel_size)\n    \n    # Calculate source and target ranges\n    z_src = slice(max(z - dz//2, 0), min(z + dz//2, mri_data.shape[0]))\n    y_src = slice(max(y - dy//2, 0), min(y + dy//2, mri_data.shape[1]))\n    x_src = slice(max(x - dx//2, 0), min(x + dx//2, mri_data.shape[2]))\n    \n    z_tgt = slice(max(dz//2 - z, 0), dz//2 - z + (z_src.stop - z_src.start))\n    y_tgt = slice(max(dy//2 - y, 0), dy//2 - y + (y_src.stop - y_src.start))\n    x_tgt = slice(max(dx//2 - x, 0), dx//2 - x + (x_src.stop - x_src.start))\n    \n    voxel[z_tgt, y_tgt, x_tgt] = mri_data[z_src, y_src, x_src]\n    return voxel\n\ndef load_and_process_data(df):\n    \"\"\"Load and process MRI+audio data\"\"\"\n    mri_data, audio_data, labels = [], [], []\n    \n    for _, row in df.iterrows():\n        try:\n            # Process MRI\n            mri = np.load(row['mri_file'])\n            voxel = extract_midbrain_voxel(mri)\n            mri_data.append(voxel)\n            \n            # Process Audio\n            y, sr = librosa.load(row['audio_file'], sr=22050)\n            mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)\n            \n            # Pad/truncate MFCCs\n            if mfcc.shape[1] < 100:\n                mfcc = np.pad(mfcc, ((0,0), (0, 100 - mfcc.shape[1])))\n            else:\n                mfcc = mfcc[:, :100]\n                \n            audio_data.append(mfcc.T)\n            labels.append(row['combined_label'])\n            \n        except Exception as e:\n            print(f\"Skipping {row['mri_file']}: {str(e)}\")\n            continue\n    \n    return (\n        np.array(mri_data)[..., np.newaxis],  # Add channel dim\n        np.array(audio_data),\n        np.array(labels)\n    )\n\n# 2. Model Architecture ======================================================\n\ndef create_multimodal_model():\n    \"\"\"Build cross-modal model without augmentation\"\"\"\n    \n    # MRI Pathway (3D CNN)\n    mri_input = layers.Input(shape=MRI_SHAPE)\n    x = layers.Conv3D(16, 3, activation='relu', padding='same')(mri_input)\n    x = layers.BatchNormalization()(x)\n    x = layers.MaxPooling3D(2)(x)\n    x = layers.SpatialDropout3D(0.3)(x)\n    \n    x = layers.Conv3D(32, 3, activation='relu', padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.MaxPooling3D(2)(x)\n    x = layers.SpatialDropout3D(0.4)(x)\n    \n    x = layers.GlobalAveragePooling3D()(x)\n    \n    # Audio Pathway (LSTM)\n    audio_input = layers.Input(shape=AUDIO_SHAPE)\n    y = layers.Masking(mask_value=0.)(audio_input)  # Handle padding\n    y = layers.Bidirectional(layers.LSTM(32))(y)\n    y = layers.Dropout(0.5)(y)\n    \n    # Fusion\n    combined = layers.Concatenate()([x, y])\n    z = layers.Dense(64, activation='relu')(combined)\n    z = layers.Dropout(0.6)(z)\n    \n    # Output\n    output = layers.Dense(1, activation='sigmoid')(z)\n    \n    model = Model(inputs=[mri_input, audio_input], outputs=output)\n    \n    model.compile(\n        optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),\n        loss='binary_crossentropy',\n        metrics=['accuracy', tf.keras.metrics.AUC(name='auc')]\n    )\n    \n    return model\n\n# 3. Training Pipeline =======================================================\n\ndef train_and_evaluate():\n    # Load data\n    df = pd.read_csv(\"/kaggle/working/synthetic_dataset.csv\")\n    X_mri, X_audio, y = load_and_process_data(df)\n    \n    # Split data (60-20-20)\n    X_mri_train, X_mri_test, X_audio_train, X_audio_test, y_train, y_test = \\\n        train_test_split(X_mri, X_audio, y, test_size=0.2, random_state=42, stratify=y)\n    X_mri_train, X_mri_val, X_audio_train, X_audio_val, y_train, y_val = \\\n        train_test_split(X_mri_train, X_audio_train, y_train, test_size=0.25, random_state=42, stratify=y_train)\n    \n    # Build model\n    model = create_multimodal_model()\n    model.summary()\n    \n    # Callbacks\n    callbacks = [\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_auc',\n            patience=20,\n            mode='max',\n            restore_best_weights=True\n        ),\n        tf.keras.callbacks.ReduceLROnPlateau(\n            monitor='val_loss',\n            factor=0.5,\n            patience=10,\n            min_lr=1e-6\n        )\n    ]\n    \n    # Train\n    history = model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        validation_data=([X_mri_val, X_audio_val], y_val),\n        epochs=100,\n        batch_size=8,\n        callbacks=callbacks,\n        verbose=1\n    )\n    \n    # Evaluate\n    y_pred = (model.predict([X_mri_test, X_audio_test]) > 0.5).astype(int)\n    y_prob = model.predict([X_mri_test, X_audio_test])\n    \n    print(\"\\nClassification Report:\")\n    print(classification_report(y_test, y_pred, target_names=['Healthy', 'Parkinson\\'s']))\n    \n    # Confusion Matrix\n    cm = confusion_matrix(y_test, y_pred)\n    plt.figure(figsize=(6,6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n                xticklabels=['Healthy', 'Parkinson\\'s'],\n                yticklabels=['Healthy', 'Parkinson\\'s'])\n    plt.title('Confusion Matrix')\n    plt.show()\n    \n    # ROC Curve\n    fpr, tpr, _ = roc_curve(y_test, y_prob)\n    plt.figure(figsize=(6,6))\n    plt.plot(fpr, tpr, label=f'AUC = {roc_auc_score(y_test, y_prob):.3f}')\n    plt.plot([0,1], [0,1], 'k--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC Curve')\n    plt.legend()\n    plt.show()\n\nif __name__ == \"__main__\":\n    train_and_evaluate()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-01T00:32:26.593948Z","iopub.execute_input":"2025-05-01T00:32:26.594585Z","iopub.status.idle":"2025-05-01T00:32:28.725186Z","shell.execute_reply.started":"2025-05-01T00:32:26.594561Z","shell.execute_reply":"2025-05-01T00:32:28.724254Z"}},"outputs":[{"name":"stdout","text":"Skipping /kaggle/input/parkinsons/data/mri_pd/pd_subject24.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject23.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject24.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject42.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject34.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject5.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject47.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject40.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject35.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject34.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject25.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject15.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject25.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject15.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject1.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject27.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject45.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject25.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject2.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject30.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject20.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject34.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject36.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject23.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject8.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject32.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject12.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject38.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject10.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject21.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject6.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject19.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject17.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject33.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject38.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject41.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject28.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject19.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject49.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject43.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject34.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject2.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject39.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject6.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject44.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject1.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject4.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject40.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject24.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject25.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject30.npy: could not broadcast input array from shape (27,64,64) into shape (38,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject48.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject7.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject33.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject38.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject39.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject11.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject15.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject33.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject5.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject44.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject3.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject27.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject34.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject16.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject27.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject48.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject3.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject40.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject26.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject32.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject25.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject27.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject2.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject46.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject20.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject48.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject44.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_pd/pd_subject29.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\nSkipping /kaggle/input/parkinsons/data/mri_hc/hc_subject38.npy: could not broadcast input array from shape (64,64,64) into shape (11,30,50)\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/1972920567.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 190\u001b[0;31m     \u001b[0mtrain_and_evaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/tmp/ipykernel_31/1972920567.py\u001b[0m in \u001b[0;36mtrain_and_evaluate\u001b[0;34m()\u001b[0m\n\u001b[1;32m    126\u001b[0m     \u001b[0;31m# Split data (60-20-20)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m     \u001b[0mX_mri_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_mri_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_audio_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_audio_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 128\u001b[0;31m         \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_mri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_audio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstratify\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    129\u001b[0m     \u001b[0mX_mri_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_mri_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_audio_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_audio_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_val\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_mri_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_audio_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.25\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstratify\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py\u001b[0m in \u001b[0;36mtrain_test_split\u001b[0;34m(test_size, train_size, random_state, shuffle, stratify, *arrays)\u001b[0m\n\u001b[1;32m   2560\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2561\u001b[0m     \u001b[0mn_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_num_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2562\u001b[0;31m     n_train, n_test = _validate_shuffle_split(\n\u001b[0m\u001b[1;32m   2563\u001b[0m         \u001b[0mn_samples\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdefault_test_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.25\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2564\u001b[0m     )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py\u001b[0m in \u001b[0;36m_validate_shuffle_split\u001b[0;34m(n_samples, test_size, train_size, default_test_size)\u001b[0m\n\u001b[1;32m   2234\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2235\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mn_train\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2236\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m   2237\u001b[0m             \u001b[0;34m\"With n_samples={}, test_size={} and train_size={}, the \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2238\u001b[0m             \u001b[0;34m\"resulting train set will be empty. Adjust any of the \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: With n_samples=0, test_size=0.2 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."],"ename":"ValueError","evalue":"With n_samples=0, test_size=0.2 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters.","output_type":"error"}],"execution_count":42},{"cell_type":"code","source":"import numpy as np\nimport librosa\nimport os\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nimport tensorflow as tf\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, BatchNormalization, Concatenate\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.ndimage\n\n# MRI Processing Functions ====================================================\n\ndef extract_midbrain_voxel(volume, center_coords=(85, 130, 110), target_size=(64, 64, 64)):\n    \"\"\"\n    Extract a region around midbrain and resize to target dimensions\n    Args:\n        volume: 3D numpy array (z, y, x)\n        center_coords: (z, y, x) coordinates of midbrain center\n        target_size: desired output dimensions\n    Returns:\n        Normalized and resized 3D voxel\n    \"\"\"\n    # Handle 4D input (1, z, y, x)\n    if volume.ndim == 4:\n        volume = volume[0]  # Remove first dimension\n    \n    z_center, y_center, x_center = center_coords\n    dz, dy, dx = target_size\n    \n    # Calculate extraction bounds\n    z_start = max(z_center - dz//2, 0)\n    z_end = min(z_center + dz//2, volume.shape[0])\n    y_start = max(y_center - dy//2, 0)\n    y_end = min(y_center + dy//2, volume.shape[1])\n    x_start = max(x_center - dx//2, 0)\n    x_end = min(x_center + dx//2, volume.shape[2])\n    \n    # Extract region\n    region = volume[z_start:z_end, y_start:y_end, x_start:x_end]\n    \n    # Resize to target dimensions if needed\n    if region.shape != target_size:\n        zoom_factors = [t/r for t,r in zip(target_size, region.shape)]\n        region = scipy.ndimage.zoom(region, zoom_factors, order=1)\n    \n    # Normalize\n    region = (region - np.min(region)) / (np.max(region) - np.min(region) + 1e-8)\n    \n    return region\n\n# Audio Processing Functions ==================================================\n\ndef process_audio_file(file_path, n_mfcc=13, max_frames=100):\n    \"\"\"Extract MFCC features from audio file\"\"\"\n    y, sr = librosa.load(file_path, sr=22050)\n    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=n_mfcc)\n    \n    # Pad or truncate\n    if mfcc.shape[1] < max_frames:\n        mfcc = np.pad(mfcc, ((0,0), (0, max_frames - mfcc.shape[1])))\n    else:\n        mfcc = mfcc[:, :max_frames]\n    \n    return mfcc.T  # Return (time_steps, features)\n\n# Data Loading ================================================================\n\ndef load_dataset(csv_path):\n    \"\"\"Load and process dataset from CSV\"\"\"\n    df = pd.read_csv(csv_path)\n    mri_data = []\n    audio_data = []\n    labels = []\n    \n    for _, row in tqdm(df.iterrows(), total=len(df), desc=\"Processing data\"):\n        try:\n            # Process MRI\n            mri = np.load(row['mri_file'])\n            voxel = extract_midbrain_voxel(mri)\n            mri_data.append(voxel)\n            \n            # Process Audio\n            mfcc = process_audio_file(row['audio_file'])\n            audio_data.append(mfcc)\n            \n            labels.append(row['combined_label'])\n        except Exception as e:\n            print(f\"Error processing {row['mri_file']}: {str(e)}\")\n            continue\n    \n    # Convert to numpy arrays\n    X_mri = np.array(mri_data)[..., np.newaxis]  # Add channel dimension\n    X_audio = np.array(audio_data)\n    y = np.array(labels)\n    \n    return X_mri, X_audio, y\n\n# Model Architecture ==========================================================\n\ndef create_multimodal_model():\n    \"\"\"Build cross-modal model for Parkinson's classification\"\"\"\n    \n    # MRI Pathway (3D CNN)\n    mri_input = Input(shape=(64, 64, 64, 1))\n    x = Conv3D(16, (3,3,3), activation='relu', padding='same')(mri_input)\n    x = BatchNormalization()(x)\n    x = MaxPooling3D(2)(x)\n    x = Dropout(0.3)(x)\n    \n    x = Conv3D(32, (3,3,3), activation='relu', padding='same')(x)\n    x = BatchNormalization()(x)\n    x = MaxPooling3D(2)(x)\n    x = Dropout(0.4)(x)\n    \n    x = Flatten()(x)\n    x = Dense(64, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    \n    # Audio Pathway (LSTM)\n    audio_input = Input(shape=(100, 13))\n    y = LSTM(32, return_sequences=True)(audio_input)\n    y = LSTM(32)(y)\n    y = Dropout(0.5)(y)\n    \n    # Fusion\n    combined = Concatenate()([x, y])\n    z = Dense(64, activation='relu')(combined)\n    z = Dropout(0.6)(z)\n    \n    # Output\n    output = Dense(1, activation='sigmoid')(z)\n    \n    model = Model(inputs=[mri_input, audio_input], outputs=output)\n    \n    model.compile(\n        optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),\n        loss='binary_crossentropy',\n        metrics=['accuracy', tf.keras.metrics.AUC(name='auc')]\n    )\n    \n    return model\n\n# Training Pipeline ===========================================================\n\ndef main():\n    # Load and process data\n    X_mri, X_audio, y = load_dataset(\"/kaggle/working/synthetic_dataset.csv\")\n    \n    # Split data (using predefined splits from CSV)\n    train_mask = [i for i in range(len(y)) if pd.read_csv(\"/kaggle/working/synthetic_dataset.csv\").iloc[i]['split'] == 'train']\n    test_mask = [i for i in range(len(y)) if pd.read_csv(\"/kaggle/working/synthetic_dataset.csv\").iloc[i]['split'] == 'test']\n    \n    X_mri_train, X_mri_test = X_mri[train_mask], X_mri[test_mask]\n    X_audio_train, X_audio_test = X_audio[train_mask], X_audio[test_mask]\n    y_train, y_test = y[train_mask], y[test_mask]\n    \n    # Further split for validation\n    X_mri_train, X_mri_val, X_audio_train, X_audio_val, y_train, y_val = train_test_split(\n        X_mri_train, X_audio_train, y_train, test_size=0.2, random_state=42, stratify=y_train\n    )\n    \n    # Create model\n    model = create_multimodal_model()\n    model.summary()\n    \n    # Callbacks\n    callbacks = [\n        EarlyStopping(monitor='val_auc', patience=15, mode='max', restore_best_weights=True),\n        ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=7, min_lr=1e-6)\n    ]\n    \n    # Class weights\n    class_weights = {0: 1.5, 1: 1}\n    \n    # Train\n    history = model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        validation_data=([X_mri_val, X_audio_val], y_val),\n        epochs=100,\n        batch_size=8,\n        callbacks=callbacks,\n        class_weight=class_weights,\n        verbose=1\n    )\n    \n    # Evaluate\n    y_pred = (model.predict([X_mri_test, X_audio_test]) > 0.5).astype(int)\n    y_prob = model.predict([X_mri_test, X_audio_test])\n    \n    print(\"\\nClassification Report:\")\n    print(classification_report(y_test, y_pred, target_names=['Healthy', 'Parkinson\\'s']))\n    \n    # Confusion Matrix\n    cm = confusion_matrix(y_test, y_pred)\n    plt.figure(figsize=(6,6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n                xticklabels=['Healthy', 'Parkinson\\'s'],\n                yticklabels=['Healthy', 'Parkinson\\'s'])\n    plt.title('Confusion Matrix')\n    plt.show()\n    \n    # ROC Curve\n    fpr, tpr, _ = roc_curve(y_test, y_prob)\n    plt.figure(figsize=(6,6))\n    plt.plot(fpr, tpr, label=f'AUC = {roc_auc_score(y_test, y_prob):.3f}')\n    plt.plot([0,1], [0,1], 'k--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC Curve')\n    plt.legend()\n    plt.show()\n\nif __name__ == \"__main__\":\n    main()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-01T00:46:18.322193Z","iopub.execute_input":"2025-05-01T00:46:18.322760Z","iopub.status.idle":"2025-05-01T00:46:51.079141Z","shell.execute_reply.started":"2025-05-01T00:46:18.322738Z","shell.execute_reply":"2025-05-01T00:46:51.078357Z"}},"outputs":[{"name":"stderr","text":"Processing data: 100%|██████████| 80/80 [00:03<00:00, 25.56it/s]\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_36\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_36\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input_layer_68            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m1\u001b[0m)  │              \u001b[38;5;34m0\u001b[0m │ -                      │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)              │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ conv3d_79 (\u001b[38;5;33mConv3D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m16\u001b[0m) │            \u001b[38;5;34m448\u001b[0m │ input_layer_68[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ batch_normalization_85    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m16\u001b[0m) │             \u001b[38;5;34m64\u001b[0m │ conv3d_79[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ max_pooling3d_79          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m) │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_8… │\n│ (\u001b[38;5;33mMaxPooling3D\u001b[0m)            │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_112 (\u001b[38;5;33mDropout\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m) │              \u001b[38;5;34m0\u001b[0m │ max_pooling3d_79[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ conv3d_80 (\u001b[38;5;33mConv3D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m) │         \u001b[38;5;34m13,856\u001b[0m │ dropout_112[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ batch_normalization_86    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m) │            \u001b[38;5;34m128\u001b[0m │ conv3d_80[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ max_pooling3d_80          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m) │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_8… │\n│ (\u001b[38;5;33mMaxPooling3D\u001b[0m)            │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_113 (\u001b[38;5;33mDropout\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m) │              \u001b[38;5;34m0\u001b[0m │ max_pooling3d_80[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ input_layer_69            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m13\u001b[0m)        │              \u001b[38;5;34m0\u001b[0m │ -                      │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)              │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ flatten_31 (\u001b[38;5;33mFlatten\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m131072\u001b[0m)         │              \u001b[38;5;34m0\u001b[0m │ dropout_113[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ lstm_61 (\u001b[38;5;33mLSTM\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │          \u001b[38;5;34m5,888\u001b[0m │ input_layer_69[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_114 (\u001b[38;5;33mDense\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │      \u001b[38;5;34m8,388,672\u001b[0m │ flatten_31[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ lstm_62 (\u001b[38;5;33mLSTM\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │          \u001b[38;5;34m8,320\u001b[0m │ lstm_61[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_114 (\u001b[38;5;33mDropout\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ dense_114[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_115 (\u001b[38;5;33mDropout\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ lstm_62[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ concatenate_32            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m96\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ dropout_114[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],     │\n│ (\u001b[38;5;33mConcatenate\u001b[0m)             │                        │                │ dropout_115[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_115 (\u001b[38;5;33mDense\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │          \u001b[38;5;34m6,208\u001b[0m │ concatenate_32[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_116 (\u001b[38;5;33mDropout\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ dense_115[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_116 (\u001b[38;5;33mDense\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m65\u001b[0m │ dropout_116[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)              </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">        Param # </span>┃<span style=\"font-weight: bold\"> Connected to           </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input_layer_68            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)  │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)              │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ conv3d_79 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv3D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>) │            <span style=\"color: #00af00; text-decoration-color: #00af00\">448</span> │ input_layer_68[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ batch_normalization_85    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>) │             <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │ conv3d_79[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ max_pooling3d_79          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>) │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_8… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling3D</span>)            │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_112 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>) │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ max_pooling3d_79[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ conv3d_80 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv3D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>) │         <span style=\"color: #00af00; text-decoration-color: #00af00\">13,856</span> │ dropout_112[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ batch_normalization_86    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>) │            <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │ conv3d_80[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ max_pooling3d_80          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>) │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_8… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling3D</span>)            │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_113 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>) │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ max_pooling3d_80[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ input_layer_69            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>)        │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)              │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ flatten_31 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">131072</span>)         │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dropout_113[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ lstm_61 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">5,888</span> │ input_layer_69[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_114 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │      <span style=\"color: #00af00; text-decoration-color: #00af00\">8,388,672</span> │ flatten_31[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ lstm_62 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │          <span style=\"color: #00af00; text-decoration-color: #00af00\">8,320</span> │ lstm_61[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_114 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dense_114[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_115 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ lstm_62[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ concatenate_32            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">96</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dropout_114[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],     │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>)             │                        │                │ dropout_115[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_115 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │          <span style=\"color: #00af00; text-decoration-color: #00af00\">6,208</span> │ concatenate_32[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dropout_116 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dense_115[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dense_116 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">65</span> │ dropout_116[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m8,423,649\u001b[0m (32.13 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,423,649</span> (32.13 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m8,423,553\u001b[0m (32.13 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,423,553</span> (32.13 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m96\u001b[0m (384.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">96</span> (384.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"Epoch 1/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 198ms/step - accuracy: 0.4303 - auc: 0.4278 - loss: 4.4585 - val_accuracy: 0.4615 - val_auc: 0.5952 - val_loss: 0.7008 - learning_rate: 1.0000e-04\nEpoch 2/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 86ms/step - accuracy: 0.5052 - auc: 0.5298 - loss: 8.2530 - val_accuracy: 0.4615 - val_auc: 0.6190 - val_loss: 0.7027 - learning_rate: 1.0000e-04\nEpoch 3/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.6442 - auc: 0.6605 - loss: 5.2659 - val_accuracy: 0.5385 - val_auc: 0.3810 - val_loss: 0.7290 - learning_rate: 1.0000e-04\nEpoch 4/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 78ms/step - accuracy: 0.5284 - auc: 0.5825 - loss: 8.0902 - val_accuracy: 0.6154 - val_auc: 0.3929 - val_loss: 0.7463 - learning_rate: 1.0000e-04\nEpoch 5/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.4135 - auc: 0.4433 - loss: 4.3109 - val_accuracy: 0.5385 - val_auc: 0.4286 - val_loss: 0.7464 - learning_rate: 1.0000e-04\nEpoch 6/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.5051 - auc: 0.5692 - loss: 3.3073 - val_accuracy: 0.5385 - val_auc: 0.4762 - val_loss: 0.7630 - learning_rate: 1.0000e-04\nEpoch 7/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.6156 - auc: 0.6619 - loss: 1.5826 - val_accuracy: 0.5385 - val_auc: 0.4881 - val_loss: 0.7978 - learning_rate: 1.0000e-04\nEpoch 8/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.5848 - auc: 0.6272 - loss: 2.1858 - val_accuracy: 0.5385 - val_auc: 0.5238 - val_loss: 0.7804 - learning_rate: 1.0000e-04\nEpoch 9/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 78ms/step - accuracy: 0.7619 - auc: 0.8392 - loss: 0.5985 - val_accuracy: 0.5385 - val_auc: 0.5357 - val_loss: 0.7900 - learning_rate: 5.0000e-05\nEpoch 10/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.5730 - auc: 0.6516 - loss: 1.1955 - val_accuracy: 0.5385 - val_auc: 0.5833 - val_loss: 0.8146 - learning_rate: 5.0000e-05\nEpoch 11/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 86ms/step - accuracy: 0.4590 - auc: 0.5732 - loss: 1.0033 - val_accuracy: 0.5385 - val_auc: 0.6667 - val_loss: 0.8811 - learning_rate: 5.0000e-05\nEpoch 12/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.5212 - auc: 0.5937 - loss: 0.8715 - val_accuracy: 0.5385 - val_auc: 0.6667 - val_loss: 0.9304 - learning_rate: 5.0000e-05\nEpoch 13/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 85ms/step - accuracy: 0.6065 - auc: 0.6416 - loss: 0.8651 - val_accuracy: 0.5385 - val_auc: 0.6786 - val_loss: 0.9171 - learning_rate: 5.0000e-05\nEpoch 14/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.7041 - auc: 0.7042 - loss: 0.6876 - val_accuracy: 0.5385 - val_auc: 0.6667 - val_loss: 0.9178 - learning_rate: 5.0000e-05\nEpoch 15/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.6425 - auc: 0.7005 - loss: 0.8113 - val_accuracy: 0.5385 - val_auc: 0.6667 - val_loss: 0.9365 - learning_rate: 5.0000e-05\nEpoch 16/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 78ms/step - accuracy: 0.7533 - auc: 0.8019 - loss: 0.6607 - val_accuracy: 0.5385 - val_auc: 0.6667 - val_loss: 0.9770 - learning_rate: 2.5000e-05\nEpoch 17/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.5987 - auc: 0.7392 - loss: 0.6950 - val_accuracy: 0.5385 - val_auc: 0.6667 - val_loss: 1.0160 - learning_rate: 2.5000e-05\nEpoch 18/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 87ms/step - accuracy: 0.5745 - auc: 0.5987 - loss: 0.7653 - val_accuracy: 0.5385 - val_auc: 0.6786 - val_loss: 1.0521 - learning_rate: 2.5000e-05\nEpoch 19/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.6596 - auc: 0.7783 - loss: 0.7379 - val_accuracy: 0.5385 - val_auc: 0.6429 - val_loss: 1.0874 - learning_rate: 2.5000e-05\nEpoch 20/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.6692 - auc: 0.7785 - loss: 0.6994 - val_accuracy: 0.5385 - val_auc: 0.6548 - val_loss: 1.1448 - learning_rate: 2.5000e-05\nEpoch 21/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 86ms/step - accuracy: 0.4967 - auc: 0.5505 - loss: 0.8003 - val_accuracy: 0.5385 - val_auc: 0.7143 - val_loss: 1.2649 - learning_rate: 2.5000e-05\nEpoch 22/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.5120 - auc: 0.6623 - loss: 0.7162 - val_accuracy: 0.5385 - val_auc: 0.7024 - val_loss: 1.4173 - learning_rate: 2.5000e-05\nEpoch 23/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 78ms/step - accuracy: 0.5881 - auc: 0.6810 - loss: 0.7525 - val_accuracy: 0.5385 - val_auc: 0.7024 - val_loss: 1.4540 - learning_rate: 1.2500e-05\nEpoch 24/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.6213 - auc: 0.6545 - loss: 0.7946 - val_accuracy: 0.5385 - val_auc: 0.7024 - val_loss: 1.4667 - learning_rate: 1.2500e-05\nEpoch 25/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.5718 - auc: 0.7099 - loss: 0.6919 - val_accuracy: 0.5385 - val_auc: 0.7143 - val_loss: 1.4947 - learning_rate: 1.2500e-05\nEpoch 26/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 79ms/step - accuracy: 0.6219 - auc: 0.7232 - loss: 0.7724 - val_accuracy: 0.5385 - val_auc: 0.6905 - val_loss: 1.5297 - learning_rate: 1.2500e-05\nEpoch 27/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 79ms/step - accuracy: 0.7188 - auc: 0.7525 - loss: 0.6602 - val_accuracy: 0.5385 - val_auc: 0.7024 - val_loss: 1.5521 - learning_rate: 1.2500e-05\nEpoch 28/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.5605 - auc: 0.7150 - loss: 0.7482 - val_accuracy: 0.5385 - val_auc: 0.7024 - val_loss: 1.5382 - learning_rate: 1.2500e-05\nEpoch 29/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 78ms/step - accuracy: 0.6804 - auc: 0.7703 - loss: 0.6239 - val_accuracy: 0.5385 - val_auc: 0.7143 - val_loss: 1.5578 - learning_rate: 1.2500e-05\nEpoch 30/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.6306 - auc: 0.6799 - loss: 0.7490 - val_accuracy: 0.5385 - val_auc: 0.6905 - val_loss: 1.5787 - learning_rate: 6.2500e-06\nEpoch 31/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.5436 - auc: 0.6521 - loss: 1.0687 - val_accuracy: 0.5385 - val_auc: 0.6905 - val_loss: 1.5878 - learning_rate: 6.2500e-06\nEpoch 32/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.6057 - auc: 0.7377 - loss: 0.7721 - val_accuracy: 0.5385 - val_auc: 0.6905 - val_loss: 1.5868 - learning_rate: 6.2500e-06\nEpoch 33/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 78ms/step - accuracy: 0.6843 - auc: 0.7183 - loss: 0.8748 - val_accuracy: 0.5385 - val_auc: 0.6786 - val_loss: 1.5784 - learning_rate: 6.2500e-06\nEpoch 34/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 76ms/step - accuracy: 0.7423 - auc: 0.8082 - loss: 0.6264 - val_accuracy: 0.5385 - val_auc: 0.6548 - val_loss: 1.5572 - learning_rate: 6.2500e-06\nEpoch 35/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 77ms/step - accuracy: 0.5808 - auc: 0.6663 - loss: 0.7277 - val_accuracy: 0.5385 - val_auc: 0.6548 - val_loss: 1.5485 - learning_rate: 6.2500e-06\nEpoch 36/100\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 76ms/step - accuracy: 0.5928 - auc: 0.7314 - loss: 0.6901 - val_accuracy: 0.5385 - val_auc: 0.6667 - val_loss: 1.5391 - learning_rate: 6.2500e-06\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 306ms/step\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n\nClassification Report:\n              precision    recall  f1-score   support\n\n     Healthy       0.00      0.00      0.00         8\n Parkinson's       0.47      1.00      0.64         7\n\n    accuracy                           0.47        15\n   macro avg       0.23      0.50      0.32        15\nweighted avg       0.22      0.47      0.30        15\n\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":48},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.utils.class_weight import compute_class_weight\n\n# 1. Enhanced Data Loading with Balance Checking ==============================\n\ndef load_and_balance_data(csv_path):\n    df = pd.read_csv(csv_path)\n    \n    # Check class distribution\n    class_counts = df['combined_label'].value_counts()\n    print(\"Class distribution:\\n\", class_counts)\n    \n    # Process data (using your existing functions)\n    X_mri, X_audio, y = load_dataset(csv_path)\n    \n    return X_mri, X_audio, y\n\n# 2. Improved Model Architecture =============================================\n\ndef create_balanced_model():\n    # MRI Pathway\n    mri_input = Input(shape=(64, 64, 64, 1))\n    x = Conv3D(16, 3, activation='relu', padding='same')(mri_input)\n    x = BatchNormalization()(x)\n    x = MaxPooling3D(2)(x)\n    x = Dropout(0.4)(x)  # Increased dropout\n    \n    x = Conv3D(32, 3, activation='relu', padding='same')(x)\n    x = BatchNormalization()(x)\n    x = MaxPooling3D(2)(x)\n    x = Dropout(0.5)(x)  # Increased dropout\n    \n    x = Flatten()(x)\n    x = Dense(64, activation='relu', kernel_regularizer='l2')(x)  # Added L2 reg\n    x = Dropout(0.6)(x)\n    \n    # Audio Pathway\n    audio_input = Input(shape=(100, 13))\n    y = LSTM(32, return_sequences=True, kernel_regularizer='l2')(audio_input)  # Added L2 reg\n    y = LSTM(32, kernel_regularizer='l2')(y)\n    y = Dropout(0.6)(y)\n    \n    # Fusion with stronger regularization\n    combined = Concatenate()([x, y])\n    z = Dense(64, activation='relu', kernel_regularizer='l2')(combined)\n    z = Dropout(0.7)(z)\n    \n    # Output with bias initialization\n    output = Dense(1, activation='sigmoid', \n                  bias_initializer=tf.keras.initializers.Constant(np.log(class_counts[1]/class_counts[0])))(z)\n    \n    model = Model(inputs=[mri_input, audio_input], outputs=output)\n    \n    # Custom optimizer with lower learning rate\n    optimizer = tf.keras.optimizers.Adam(\n        learning_rate=0.00005,  # Reduced learning rate\n        beta_1=0.9,\n        beta_2=0.999,\n        amsgrad=True\n    )\n    \n    model.compile(\n        optimizer=optimizer,\n        loss='binary_crossentropy',\n        metrics=['accuracy', \n                tf.keras.metrics.AUC(name='auc'),\n                tf.keras.metrics.Precision(name='precision'),\n                tf.keras.metrics.Recall(name='recall')]\n    )\n    return model\n\n# 3. Enhanced Training with Better Monitoring ================================\n\ndef train_model(model, X_mri_train, X_audio_train, y_train, X_mri_val, X_audio_val, y_val):\n    # Compute class weights\n    class_weights = compute_class_weight('balanced', classes=np.unique(y_train), y=y_train)\n    class_weights = {i: weight for i, weight in enumerate(class_weights)}\n    print(\"Class weights:\", class_weights)\n    \n    # Callbacks\n    callbacks = [\n        EarlyStopping(\n            monitor='val_auc',\n            patience=20,\n            mode='max',\n            restore_best_weights=True,\n            min_delta=0.001\n        ),\n        ReduceLROnPlateau(\n            monitor='val_loss',\n            factor=0.5,\n            patience=10,\n            min_lr=1e-6,\n            verbose=1\n        ),\n        tf.keras.callbacks.ModelCheckpoint(\n            'best_model.keras',\n            save_best_only=True,\n            monitor='val_auc',\n            mode='max'\n        )\n    ]\n    \n    # Train with class weights\n    history = model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        validation_data=([X_mri_val, X_audio_val], y_val),\n        epochs=150,  # Increased epochs\n        batch_size=8,\n        callbacks=callbacks,\n        class_weight=class_weights,\n        verbose=1\n    )\n    \n    return history\n\n# 4. Better Evaluation with Optimal Threshold ================================\n\ndef evaluate_model(model, X_mri_test, X_audio_test, y_test):\n    y_prob = model.predict([X_mri_test, X_audio_test])\n    \n    # Find optimal threshold (instead of default 0.5)\n    fpr, tpr, thresholds = roc_curve(y_test, y_prob)\n    optimal_idx = np.argmax(tpr - fpr)\n    optimal_threshold = thresholds[optimal_idx]\n    \n    y_pred = (y_prob > optimal_threshold).astype(int)\n    \n    print(\"\\nOptimal Threshold:\", optimal_threshold)\n    print(classification_report(y_test, y_pred, target_names=['Healthy', 'Parkinson\\'s']))\n    \n    # Confusion matrix\n    cm = confusion_matrix(y_test, y_pred)\n    plt.figure(figsize=(6,6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n                xticklabels=['Healthy', 'Parkinson\\'s'],\n                yticklabels=['Healthy', 'Parkinson\\'s'])\n    plt.title('Confusion Matrix (Optimal Threshold)')\n    plt.show()\n\n# Main Execution =============================================================\n\nif __name__ == \"__main__\":\n    # Load data\n    X_mri, X_audio, y = load_and_balance_data(\"/kaggle/working/synthetic_dataset.csv\")\n    \n    # Split data\n    train_mask = [i for i in range(len(y)) if pd.read_csv(\"/kaggle/working/synthetic_dataset.csv\").iloc[i]['split'] == 'train']\n    test_mask = [i for i in range(len(y)) if pd.read_csv(\"/kaggle/working/synthetic_dataset.csv\").iloc[i]['split'] == 'test']\n    \n    X_mri_train, X_mri_test = X_mri[train_mask], X_mri[test_mask]\n    X_audio_train, X_audio_test = X_audio[train_mask], X_audio[test_mask]\n    y_train, y_test = y[train_mask], y[test_mask]\n    \n    # Further split for validation\n    X_mri_train, X_mri_val, X_audio_train, X_audio_val, y_train, y_val = train_test_split(\n        X_mri_train, X_audio_train, y_train, test_size=0.2, random_state=42, stratify=y_train\n    )\n    \n    # Create and train model\n    model = create_balanced_model()\n    history = train_model(model, X_mri_train, X_audio_train, y_train, X_mri_val, X_audio_val, y_val)\n    \n    # Evaluate\n    model = tf.keras.models.load_model('best_model.keras')\n    evaluate_model(model, X_mri_test, X_audio_test, y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-01T00:48:38.282428Z","iopub.execute_input":"2025-05-01T00:48:38.283044Z","iopub.status.idle":"2025-05-01T00:49:04.341215Z","shell.execute_reply.started":"2025-05-01T00:48:38.283021Z","shell.execute_reply":"2025-05-01T00:49:04.340492Z"}},"outputs":[{"name":"stdout","text":"Class distribution:\n combined_label\n1    40\n0    40\nName: count, dtype: int64\n","output_type":"stream"},{"name":"stderr","text":"Processing data: 100%|██████████| 80/80 [00:03<00:00, 25.64it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class weights: {0: 1.0, 1: 1.0}\nEpoch 1/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 363ms/step - accuracy: 0.4556 - auc: 0.4189 - loss: 6.2583 - precision: 0.4335 - recall: 0.6179 - val_accuracy: 0.6154 - val_auc: 0.7738 - val_loss: 3.4404 - val_precision: 0.6250 - val_recall: 0.7143 - learning_rate: 5.0000e-05\nEpoch 2/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.4723 - auc: 0.5391 - loss: 6.8747 - precision: 0.5188 - recall: 0.6360 - val_accuracy: 0.5385 - val_auc: 0.6667 - val_loss: 3.4221 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 3/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.5562 - auc: 0.5715 - loss: 6.8106 - precision: 0.5239 - recall: 0.6883 - val_accuracy: 0.5385 - val_auc: 0.5000 - val_loss: 3.4068 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 4/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 84ms/step - accuracy: 0.5197 - auc: 0.4347 - loss: 5.3994 - precision: 0.5344 - recall: 0.6516 - val_accuracy: 0.5385 - val_auc: 0.4762 - val_loss: 3.4032 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 5/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.4910 - auc: 0.4912 - loss: 5.4410 - precision: 0.4006 - recall: 0.5153 - val_accuracy: 0.5385 - val_auc: 0.4167 - val_loss: 3.4287 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 6/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.5590 - auc: 0.6026 - loss: 3.7191 - precision: 0.5645 - recall: 0.5857 - val_accuracy: 0.5385 - val_auc: 0.4524 - val_loss: 3.4605 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 7/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.5466 - auc: 0.5685 - loss: 3.5396 - precision: 0.5798 - recall: 0.5797 - val_accuracy: 0.5385 - val_auc: 0.5119 - val_loss: 3.4553 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 8/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.4929 - auc: 0.5570 - loss: 3.8764 - precision: 0.4602 - recall: 0.8661 - val_accuracy: 0.5385 - val_auc: 0.5833 - val_loss: 3.4521 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 9/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.4776 - auc: 0.4644 - loss: 3.5239 - precision: 0.4635 - recall: 0.5979 - val_accuracy: 0.5385 - val_auc: 0.5595 - val_loss: 3.4861 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 10/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.5013 - auc: 0.5462 - loss: 3.5693 - precision: 0.4817 - recall: 0.5272 - val_accuracy: 0.5385 - val_auc: 0.6429 - val_loss: 3.5328 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 11/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.6602 - auc: 0.6583 - loss: 3.5102 - precision: 0.6170 - recall: 0.8010 - val_accuracy: 0.5385 - val_auc: 0.6190 - val_loss: 3.5731 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 12/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.5431 - auc: 0.6391 - loss: 3.4008 - precision: 0.5206 - recall: 0.7326 - val_accuracy: 0.5385 - val_auc: 0.5952 - val_loss: 3.6365 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 13/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 82ms/step - accuracy: 0.6323 - auc: 0.7291 - loss: 3.2988 - precision: 0.6212 - recall: 0.5965 - val_accuracy: 0.5385 - val_auc: 0.6071 - val_loss: 3.6856 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 14/150\n\u001b[1m6/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 74ms/step - accuracy: 0.5500 - auc: 0.6231 - loss: 3.2125 - precision: 0.6380 - recall: 0.5671\nEpoch 14: ReduceLROnPlateau reducing learning rate to 2.499999936844688e-05.\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.5567 - auc: 0.6186 - loss: 3.2136 - precision: 0.6201 - recall: 0.5888 - val_accuracy: 0.5385 - val_auc: 0.5833 - val_loss: 3.7360 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 5.0000e-05\nEpoch 15/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.5822 - auc: 0.4872 - loss: 3.4965 - precision: 0.6089 - recall: 0.6735 - val_accuracy: 0.5385 - val_auc: 0.5476 - val_loss: 3.8103 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 16/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.4318 - auc: 0.5209 - loss: 3.2769 - precision: 0.4868 - recall: 0.4293 - val_accuracy: 0.5385 - val_auc: 0.5714 - val_loss: 3.8462 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 17/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.5582 - auc: 0.5627 - loss: 3.3875 - precision: 0.5968 - recall: 0.7170 - val_accuracy: 0.5385 - val_auc: 0.5833 - val_loss: 3.8450 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 18/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.4828 - auc: 0.5993 - loss: 3.2076 - precision: 0.4635 - recall: 0.5729 - val_accuracy: 0.5385 - val_auc: 0.6548 - val_loss: 3.8551 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 19/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.5785 - auc: 0.7158 - loss: 3.2050 - precision: 0.4719 - recall: 0.7784 - val_accuracy: 0.5385 - val_auc: 0.6429 - val_loss: 3.8246 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 20/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 81ms/step - accuracy: 0.5044 - auc: 0.5670 - loss: 3.2100 - precision: 0.5058 - recall: 0.4913 - val_accuracy: 0.5385 - val_auc: 0.6429 - val_loss: 3.8041 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\nEpoch 21/150\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 80ms/step - accuracy: 0.3938 - auc: 0.3419 - loss: 3.3445 - precision: 0.4352 - recall: 0.5312 - val_accuracy: 0.5385 - val_auc: 0.7143 - val_loss: 3.8069 - val_precision: 0.5385 - val_recall: 1.0000 - learning_rate: 2.5000e-05\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step\n\nOptimal Threshold: 0.50296336\n              precision    recall  f1-score   support\n\n     Healthy       0.57      0.50      0.53         8\n Parkinson's       0.50      0.57      0.53         7\n\n    accuracy                           0.53        15\n   macro avg       0.54      0.54      0.53        15\nweighted avg       0.54      0.53      0.53        15\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras import layers, regularizers\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report, roc_curve\nimport matplotlib.pyplot as plt\n\n# 1. Corrected Model Architecture ============================================\n\ndef create_advanced_model():\n    # MRI Pathway\n    mri_input = layers.Input(shape=(64, 64, 64, 1))\n    \n    x = layers.Conv3D(32, 3, activation='swish', padding='same')(mri_input)\n    x = layers.BatchNormalization()(x)\n    x = layers.MaxPooling3D(2)(x)\n    x = layers.SpatialDropout3D(0.4)(x)\n    \n    x = layers.Conv3D(64, 3, activation='swish', padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.MaxPooling3D(2)(x)\n    x = layers.SpatialDropout3D(0.4)(x)\n    \n    x = layers.Conv3D(128, 3, activation='swish', padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.GlobalAveragePooling3D()(x)\n    \n    # Audio Pathway (with proper attention implementation)\n    audio_input = layers.Input(shape=(100, 13))\n    y = layers.Masking(mask_value=0.)(audio_input)\n    y = layers.Bidirectional(layers.LSTM(64, return_sequences=True))(y)\n    \n    # Proper attention implementation\n    attention = layers.Dense(1, activation='tanh')(y)\n    attention = layers.Flatten()(attention)\n    attention = layers.Activation('softmax')(attention)\n    attention = layers.RepeatVector(64 * 2)(attention)  # 64*2 for bidirectional\n    attention = layers.Permute([2, 1])(attention)\n    y = layers.Multiply()([y, attention])\n    y = layers.GlobalAveragePooling1D()(y)\n    \n    # Cross-modal fusion\n    combined = layers.Concatenate()([x, y])\n    combined = layers.Dense(128, activation='swish')(combined)\n    combined = layers.Dropout(0.6)(combined)\n    \n    # Output\n    output = layers.Dense(1, activation='sigmoid')(combined)\n    \n    model = tf.keras.Model(inputs=[mri_input, audio_input], outputs=output)\n    \n    optimizer = tf.keras.optimizers.AdamW(\n        learning_rate=0.00005,\n        weight_decay=0.001,\n        clipnorm=1.0\n    )\n    \n    model.compile(\n        optimizer=optimizer,\n        loss='binary_crossentropy',\n        metrics=['accuracy', \n                tf.keras.metrics.AUC(name='auc'),\n                tf.keras.metrics.Precision(name='precision'),\n                tf.keras.metrics.Recall(name='recall')]\n    )\n    return model\n\n# 2. Training Pipeline ======================================================\n\ndef train_with_cross_validation(X_mri, X_audio, y, n_splits=3):  # Reduced splits for small dataset\n    kfold = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n    fold_results = []\n    \n    for fold, (train_idx, val_idx) in enumerate(kfold.split(X_mri, y)):\n        print(f\"\\nFold {fold+1}/{n_splits}\")\n        \n        # Split data\n        X_mri_train, X_mri_val = X_mri[train_idx], X_mri[val_idx]\n        X_audio_train, X_audio_val = X_audio[train_idx], X_audio[val_idx]\n        y_train, y_val = y[train_idx], y[val_idx]\n        \n        # Create and train model\n        model = create_advanced_model()\n        history = model.fit(\n            [X_mri_train, X_audio_train], y_train,\n            validation_data=([X_mri_val, X_audio_val], y_val),\n            epochs=150,\n            batch_size=4,\n            callbacks=[\n                tf.keras.callbacks.EarlyStopping(\n                    patience=25,\n                    restore_best_weights=True,\n                    monitor='val_auc',\n                    mode='max'\n                ),\n                tf.keras.callbacks.ReduceLROnPlateau(\n                    patience=15,\n                    factor=0.5,\n                    min_lr=1e-6\n                )\n            ],\n            verbose=1\n        )\n        \n        # Evaluate\n        y_pred = (model.predict([X_mri_val, X_audio_val]) > 0.5).astype(int)\n        report = classification_report(y_val, y_pred, output_dict=True)\n        fold_results.append(report['accuracy'])\n        print(f\"Fold {fold+1} Accuracy: {report['accuracy']:.4f}\")\n    \n    print(f\"\\nCross-validation results: {np.mean(fold_results):.4f} ± {np.std(fold_results):.4f}\")\n\n# 3. Main Execution =========================================================\n\nif __name__ == \"__main__\":\n    # Load data (using your existing load_and_balance_data function)\n    X_mri, X_audio, y = load_and_balance_data(\"/kaggle/working/synthetic_dataset.csv\")\n    \n    # Cross-validate\n    train_with_cross_validation(X_mri, X_audio, y)\n    \n    # Final training on full data\n    print(\"\\nTraining final model on full dataset...\")\n    model = create_advanced_model()\n    model.fit(\n        [X_mri, X_audio], y,\n        epochs=150,\n        batch_size=4,\n        callbacks=[\n            tf.keras.callbacks.ModelCheckpoint(\n                'final_model.keras',\n                save_best_only=True,\n                monitor='loss'\n            )\n        ],\n        validation_split=0.1,\n        verbose=1\n    )\n    \n    # Load best model\n    model = tf.keras.models.load_model('final_model.keras')\n    \n    # Evaluate on test set (assuming you have separate test data)\n    # test_results = model.evaluate([X_mri_test, X_audio_test], y_test)\n    # print(\"Test Accuracy:\", test_results[1])\n    def train_model(model, X_mri_train, X_audio_train, y_train, X_mri_val, X_audio_val, y_val):\n    # Compute class weights\n    class_weights = compute_class_weight('balanced', classes=np.unique(y_train), y=y_train)\n    class_weights = {i: weight for i, weight in enumerate(class_weights)}\n    print(\"Class weights:\", class_weights)\n    \n    # Callbacks\n    callbacks = [\n        EarlyStopping(\n            monitor='val_auc',\n            patience=20,\n            mode='max',\n            restore_best_weights=True,\n            min_delta=0.001\n        ),\n        ReduceLROnPlateau(\n            monitor='val_loss',\n            factor=0.5,\n            patience=10,\n            min_lr=1e-6,\n            verbose=1\n        ),\n        tf.keras.callbacks.ModelCheckpoint(\n            'best_model.keras',\n            save_best_only=True,\n            monitor='val_auc',\n            mode='max'\n        )\n    ]\n    \n    # Train with class weights\n    history = model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        validation_data=([X_mri_val, X_audio_val], y_val),\n        epochs=150,  # Increased epochs\n        batch_size=8,\n        callbacks=callbacks,\n        class_weight=class_weights,\n        verbose=1\n    )\n    \n    return history\n\n# 4. Better Evaluation with Optimal Threshold ================================\n\ndef evaluate_model(model, X_mri_test, X_audio_test, y_test):\n    y_prob = model.predict([X_mri_test, X_audio_test])\n    \n    # Find optimal threshold (instead of default 0.5)\n    fpr, tpr, thresholds = roc_curve(y_test, y_prob)\n    optimal_idx = np.argmax(tpr - fpr)\n    optimal_threshold = thresholds[optimal_idx]\n    \n    y_pred = (y_prob > optimal_threshold).astype(int)\n    \n    print(\"\\nOptimal Threshold:\", optimal_threshold)\n    print(classification_report(y_test, y_pred, target_names=['Healthy', 'Parkinson\\'s']))\n    \n    # Confusion matrix\n    cm = confusion_matrix(y_test, y_pred)\n    plt.figure(figsize=(6,6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n                xticklabels=['Healthy', 'Parkinson\\'s'],\n                yticklabels=['Healthy', 'Parkinson\\'s'])\n    plt.title('Confusion Matrix (Optimal Threshold)')\n    plt.show()\n\n# Main Execution =============================================================\n\nif __name__ == \"__main__\":\n    # Load data\n    X_mri, X_audio, y = load_and_balance_data(\"/kaggle/working/synthetic_dataset.csv\")\n    \n    # Split data\n    train_mask = [i for i in range(len(y)) if pd.read_csv(\"/kaggle/working/synthetic_dataset.csv\").iloc[i]['split'] == 'train']\n    test_mask = [i for i in range(len(y)) if pd.read_csv(\"/kaggle/working/synthetic_dataset.csv\").iloc[i]['split'] == 'test']\n    \n    X_mri_train, X_mri_test = X_mri[train_mask], X_mri[test_mask]\n    X_audio_train, X_audio_test = X_audio[train_mask], X_audio[test_mask]\n    y_train, y_test = y[train_mask], y[test_mask]\n    \n    # Further split for validation\n    X_mri_train, X_mri_val, X_audio_train, X_audio_val, y_train, y_val = train_test_split(\n        X_mri_train, X_audio_train, y_train, test_size=0.2, random_state=42, stratify=y_train\n    )\n    \n    # Create and train model\n    model = create_balanced_model()\n    history = train_model(model, X_mri_train, X_audio_train, y_train, X_mri_val, X_audio_val, y_val)\n    \n    # Evaluate\n    model = tf.keras.models.load_model('best_model.keras')\n    evaluate_model(model, X_mri_test, X_audio_test, y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-01T01:30:45.966363Z","iopub.execute_input":"2025-05-01T01:30:45.967186Z","iopub.status.idle":"2025-05-01T01:30:45.987300Z","shell.execute_reply.started":"2025-05-01T01:30:45.967157Z","shell.execute_reply":"2025-05-01T01:30:45.986409Z"}},"outputs":[{"traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_31/170418690.py\"\u001b[0;36m, line \u001b[0;32m149\u001b[0m\n\u001b[0;31m    class_weights = compute_class_weight('balanced', classes=np.unique(y_train), y=y_train)\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block after function definition on line 147\n"],"ename":"IndentationError","evalue":"expected an indented block after function definition on line 147 (170418690.py, line 149)","output_type":"error"}],"execution_count":52},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras import layers, regularizers\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve\nfrom sklearn.utils.class_weight import compute_class_weight\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nimport tensorflow as tf\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, BatchNormalization, Concatenate\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.ndimage\n\n# MRI Processing Functions ====================================================\n\ndef extract_midbrain_voxel(volume, center_coords=(85, 130, 110), target_size=(64, 64, 64)):\n    \"\"\"\n    Extract a region around midbrain and resize to target dimensions\n    Args:\n        volume: 3D numpy array (z, y, x)\n        center_coords: (z, y, x) coordinates of midbrain center\n        target_size: desired output dimensions\n    Returns:\n        Normalized and resized 3D voxel\n    \"\"\"\n    # Handle 4D input (1, z, y, x)\n    if volume.ndim == 4:\n        volume = volume[0]  # Remove first dimension\n    \n    z_center, y_center, x_center = center_coords\n    dz, dy, dx = target_size\n    \n    # Calculate extraction bounds\n    z_start = max(z_center - dz//2, 0)\n    z_end = min(z_center + dz//2, volume.shape[0])\n    y_start = max(y_center - dy//2, 0)\n    y_end = min(y_center + dy//2, volume.shape[1])\n    x_start = max(x_center - dx//2, 0)\n    x_end = min(x_center + dx//2, volume.shape[2])\n    \n    # Extract region\n    region = volume[z_start:z_end, y_start:y_end, x_start:x_end]\n    \n    # Resize to target dimensions if needed\n    if region.shape != target_size:\n        zoom_factors = [t/r for t,r in zip(target_size, region.shape)]\n        region = scipy.ndimage.zoom(region, zoom_factors, order=1)\n    \n    # Normalize\n    region = (region - np.min(region)) / (np.max(region) - np.min(region) + 1e-8)\n    \n    return region\n\n# Audio Processing Functions ==================================================\n\ndef process_audio_file(file_path, n_mfcc=13, max_frames=100):\n    \"\"\"Extract MFCC features from audio file\"\"\"\n    y, sr = librosa.load(file_path, sr=22050)\n    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=n_mfcc)\n    \n    # Pad or truncate\n    if mfcc.shape[1] < max_frames:\n        mfcc = np.pad(mfcc, ((0,0), (0, max_frames - mfcc.shape[1])))\n    else:\n        mfcc = mfcc[:, :max_frames]\n    \n    return mfcc.T  # Return (time_steps, features)\n\n# Data Loading ================================================================\n\ndef load_dataset(csv_path):\n    \"\"\"Load and process dataset from CSV\"\"\"\n    df = pd.read_csv(csv_path)\n    mri_data = []\n    audio_data = []\n    labels = []\n    \n    for _, row in tqdm(df.iterrows(), total=len(df), desc=\"Processing data\"):\n        try:\n            # Process MRI\n            mri = np.load(row['mri_file'])\n            voxel = extract_midbrain_voxel(mri)\n            mri_data.append(voxel)\n            \n            # Process Audio\n            mfcc = process_audio_file(row['audio_file'])\n            audio_data.append(mfcc)\n            \n            labels.append(row['combined_label'])\n        except Exception as e:\n            print(f\"Error processing {row['mri_file']}: {str(e)}\")\n            continue\n    \n    # Convert to numpy arrays\n    X_mri = np.array(mri_data)[..., np.newaxis]  # Add channel dimension\n    X_audio = np.array(audio_data)\n    y = np.array(labels)\n    \n    return X_mri, X_audio, y\n\n# 1. Data Loading and Processing =============================================\n\ndef load_and_balance_data(csv_path):\n    \"\"\"Load and balance the dataset\"\"\"\n    df = pd.read_csv(csv_path)\n    \n    # Check class distribution\n    class_counts = df['combined_label'].value_counts()\n    print(\"Class distribution:\\n\", class_counts)\n    \n    # Process data (your existing implementation)\n    X_mri, X_audio, y = [], [], []\n    for _, row in df.iterrows():\n        try:\n            # MRI processing\n            mri = np.load(row['mri_file'])\n            if mri.ndim == 4: \n                mri = mri[0]  # Remove channel dim if present\n            voxel = extract_midbrain_voxel(mri)\n            X_mri.append(voxel)\n            \n            # Audio processing\n            mfcc = process_audio_file(row['audio_file'])\n            X_audio.append(mfcc)\n            \n            y.append(row['combined_label'])\n        except Exception as e:\n            print(f\"Skipping {row['mri_file']}: {str(e)}\")\n    \n    return (np.array(X_mri)[..., np.newaxis], \n            np.array(X_audio), \n            np.array(y))\n\n# 2. Model Architecture =====================================================\n\ndef create_advanced_model():\n    \"\"\"Build cross-modal model with attention\"\"\"\n    # MRI Pathway\n    mri_input = layers.Input(shape=(64, 64, 64, 1))\n    \n    x = layers.Conv3D(32, 3, activation='swish', padding='same')(mri_input)\n    x = layers.BatchNormalization()(x)\n    x = layers.MaxPooling3D(2)(x)\n    x = layers.SpatialDropout3D(0.4)(x)\n    \n    x = layers.Conv3D(64, 3, activation='swish', padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.MaxPooling3D(2)(x)\n    x = layers.SpatialDropout3D(0.4)(x)\n    \n    x = layers.Conv3D(128, 3, activation='swish', padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.GlobalAveragePooling3D()(x)\n    \n    # Audio Pathway with attention\n    audio_input = layers.Input(shape=(100, 13))\n    y = layers.Masking(mask_value=0.)(audio_input)\n    y = layers.Bidirectional(layers.LSTM(64, return_sequences=True))(y)\n    \n    # Attention mechanism\n    attention = layers.Dense(1, activation='tanh')(y)\n    attention = layers.Flatten()(attention)\n    attention = layers.Activation('softmax')(attention)\n    attention = layers.RepeatVector(64 * 2)(attention)\n    attention = layers.Permute([2, 1])(attention)\n    y = layers.Multiply()([y, attention])\n    y = layers.GlobalAveragePooling1D()(y)\n    \n    # Fusion\n    combined = layers.Concatenate()([x, y])\n    combined = layers.Dense(128, activation='swish')(combined)\n    combined = layers.Dropout(0.6)(combined)\n    \n    # Output\n    output = layers.Dense(1, activation='sigmoid')(combined)\n    \n    model = tf.keras.Model(inputs=[mri_input, audio_input], outputs=output)\n    \n    optimizer = tf.keras.optimizers.AdamW(\n        learning_rate=0.00005,\n        weight_decay=0.001,\n        clipnorm=1.0\n    )\n    \n    model.compile(\n        optimizer=optimizer,\n        loss='binary_crossentropy',\n        metrics=['accuracy', \n                tf.keras.metrics.AUC(name='auc'),\n                tf.keras.metrics.Precision(name='precision'),\n                tf.keras.metrics.Recall(name='recall')]\n    )\n    return model\n\n# 3. Training Function ======================================================\n\ndef train_model(model, X_mri_train, X_audio_train, y_train, X_mri_val, X_audio_val, y_val):\n    \"\"\"Train the model with proper callbacks and class weights\"\"\"\n    # Compute class weights\n    class_weights = compute_class_weight('balanced', classes=np.unique(y_train), y=y_train)\n    class_weights = {i: weight for i, weight in enumerate(class_weights)}\n    print(\"Class weights:\", class_weights)\n    \n    # Callbacks\n    callbacks = [\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_auc',\n            patience=20,\n            mode='max',\n            restore_best_weights=True,\n            min_delta=0.001\n        ),\n        tf.keras.callbacks.ReduceLROnPlateau(\n            monitor='val_loss',\n            factor=0.5,\n            patience=10,\n            min_lr=1e-6,\n            verbose=1\n        ),\n        tf.keras.callbacks.ModelCheckpoint(\n            'best_model.keras',\n            save_best_only=True,\n            monitor='val_auc',\n            mode='max'\n        )\n    ]\n    \n    # Train with class weights\n    history = model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        validation_data=([X_mri_val, X_audio_val], y_val),\n        epochs=150,\n        batch_size=8,\n        callbacks=callbacks,\n        class_weight=class_weights,\n        verbose=1\n    )\n    \n    return history\n\n# 4. Evaluation Function ====================================================\n\ndef evaluate_model(model, X_mri_test, X_audio_test, y_test):\n    \"\"\"Evaluate model with optimal threshold finding\"\"\"\n    y_prob = model.predict([X_mri_test, X_audio_test])\n    \n    # Find optimal threshold\n    fpr, tpr, thresholds = roc_curve(y_test, y_prob)\n    optimal_idx = np.argmax(tpr - fpr)\n    optimal_threshold = thresholds[optimal_idx]\n    \n    y_pred = (y_prob > optimal_threshold).astype(int)\n    \n    print(\"\\nOptimal Threshold:\", optimal_threshold)\n    print(classification_report(y_test, y_pred, target_names=['Healthy', 'Parkinson\\'s']))\n    \n    # Confusion matrix\n    cm = confusion_matrix(y_test, y_pred)\n    plt.figure(figsize=(6,6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n                xticklabels=['Healthy', 'Parkinson\\'s'],\n                yticklabels=['Healthy', 'Parkinson\\'s'])\n    plt.title('Confusion Matrix (Optimal Threshold)')\n    plt.show()\n\n# 5. Main Execution =========================================================\n\nif __name__ == \"__main__\":\n    # Load and balance data\n    X_mri, X_audio, y = load_and_balance_data(\"/kaggle/working/synthetic_dataset.csv\")\n    \n    # Split data using predefined splits from CSV\n    df = pd.read_csv(\"/kaggle/working/synthetic_dataset.csv\")\n    train_mask = [i for i in range(len(df)) if df.iloc[i]['split'] == 'train']\n    test_mask = [i for i in range(len(df)) if df.iloc[i]['split'] == 'test']\n    \n    X_mri_train, X_mri_test = X_mri[train_mask], X_mri[test_mask]\n    X_audio_train, X_audio_test = X_audio[train_mask], X_audio[test_mask]\n    y_train, y_test = y[train_mask], y[test_mask]\n    \n    # Further split for validation\n    X_mri_train, X_mri_val, X_audio_train, X_audio_val, y_train, y_val = train_test_split(\n        X_mri_train, X_audio_train, y_train, test_size=0.2, random_state=42, stratify=y_train\n    )\n    \n    # Create and train model\n    model = create_advanced_model()\n    history = train_model(model, X_mri_train, X_audio_train, y_train, X_mri_val, X_audio_val, y_val)\n    \n    # Evaluate\n    model = tf.keras.models.load_model('best_model.keras')\n    evaluate_model(model, X_mri_test, X_audio_test, y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-01T04:00:53.989013Z","iopub.execute_input":"2025-05-01T04:00:53.989546Z","iopub.status.idle":"2025-05-01T04:00:54.116995Z","shell.execute_reply.started":"2025-05-01T04:00:53.989522Z","shell.execute_reply":"2025-05-01T04:00:54.116088Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mEmptyDataError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/1233590418.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    288\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    289\u001b[0m     \u001b[0;31m# Load and balance data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 290\u001b[0;31m     \u001b[0mX_mri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_audio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_and_balance_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/kaggle/working/synthetic_dataset.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    291\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    292\u001b[0m     \u001b[0;31m# Split data using predefined splits from CSV\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_31/1233590418.py\u001b[0m in \u001b[0;36mload_and_balance_data\u001b[0;34m(csv_path)\u001b[0m\n\u001b[1;32m    123\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mload_and_balance_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcsv_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m     \u001b[0;34m\"\"\"Load and balance the dataset\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m     \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcsv_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    126\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m     \u001b[0;31m# Check class distribution\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1896\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1897\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1898\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1899\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1900\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m     91\u001b[0m             \u001b[0;31m# Fail here loudly instead of in cython after reading\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m             \u001b[0mimport_optional_dependency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"pyarrow\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 93\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n","\u001b[0;31mEmptyDataError\u001b[0m: No columns to parse from file"],"ename":"EmptyDataError","evalue":"No columns to parse from file","output_type":"error"}],"execution_count":6},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras import layers, regularizers\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport librosa\nimport os\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nimport tensorflow as tf\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, LSTM, Conv3D, MaxPooling3D, Flatten, BatchNormalization, Concatenate\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc\nfrom sklearn.model_selection import StratifiedKFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# 1. Enhanced Data Processing ================================================\n\ndef extract_midbrain_voxel(mri_data, center_coords=(85, 130, 110), target_size=(64, 64, 64)):\n    \"\"\"Precise midbrain extraction with intensity normalization\"\"\"\n    if mri_data.ndim == 4:\n        mri_data = mri_data[0]  # Remove batch dim\n    \n    z, y, x = center_coords\n    dz, dy, dx = target_size\n    \n    # Calculate bounds with safety checks\n    z_start = max(z - dz//2, 0)\n    z_end = min(z + dz//2, mri_data.shape[0])\n    y_start = max(y - dy//2, 0)\n    y_end = min(y + dy//2, mri_data.shape[1])\n    x_start = max(x - dx//2, 0)\n    x_end = min(x + dx//2, mri_data.shape[2])\n    \n    # Extract and normalize\n    voxel = mri_data[z_start:z_end, y_start:y_end, x_start:x_end]\n    voxel = (voxel - np.mean(voxel)) / (np.std(voxel) + 1e-8)\n    \n    # Pad if needed\n    if voxel.shape != target_size:\n        pad_width = [(0, max(0, t-s)) for s,t in zip(voxel.shape, target_size)]\n        voxel = np.pad(voxel, pad_width, mode='constant')\n    \n    return voxel\n\n# 2. Optimized Model Architecture ===========================================\n\ndef create_optimized_model():\n    # MRI Pathway\n    mri_input = layers.Input(shape=(64, 64, 64, 1))\n    \n    x = layers.Conv3D(32, 3, activation='leaky_relu', padding='same')(mri_input)\n    x = layers.BatchNormalization()(x)\n    x = layers.MaxPooling3D(2)(x)\n    x = layers.SpatialDropout3D(0.5)(x)\n    \n    x = layers.Conv3D(64, 3, activation='leaky_relu', padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.MaxPooling3D(2)(x)\n    \n    # Audio Pathway\n    audio_input = layers.Input(shape=(100, 13))\n    y = layers.LSTM(64, return_sequences=True)(audio_input)\n    y = layers.GlobalMaxPooling1D()(y)\n    \n    # Cross-modal fusion\n    combined = layers.Concatenate()([layers.Flatten()(x), y])\n    \n    # Deep fusion network\n    z = layers.Dense(128, activation='leaky_relu')(combined)\n    z = layers.Dropout(0.6)(z)\n    z = layers.Dense(64, activation='leaky_relu')(z)\n    \n    # Output with adjusted bias\n    output = layers.Dense(1, activation='sigmoid',\n                         bias_initializer=tf.keras.initializers.Constant(-1.0))(z)\n    \n    model = tf.keras.Model(inputs=[mri_input, audio_input], outputs=output)\n    \n    optimizer = tf.keras.optimizers.Nadam(\n        learning_rate=0.0001,\n        clipnorm=1.0\n    )\n    \n    model.compile(\n        optimizer=optimizer,\n        loss='binary_crossentropy',\n        metrics=['accuracy', \n                tf.keras.metrics.AUC(name='auc'),\n                tf.keras.metrics.Precision(name='precision'),\n                tf.keras.metrics.Recall(name='recall')]\n    )\n    return model\n\n# 3. Enhanced Training Pipeline =============================================\n\ndef train_model(model, X_mri_train, X_audio_train, y_train, X_mri_val, X_audio_val, y_val):\n    # Dynamic class weighting\n    class_weights = compute_class_weight('balanced', classes=np.unique(y_train), y=y_train)\n    class_weights = {0:1, 1:1.01}  # Boosted weights\n    \n    callbacks = [\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_auc',\n            patience=30,\n            mode='max',\n            restore_best_weights=True\n        ),\n        tf.keras.callbacks.ReduceLROnPlateau(\n            monitor='val_loss',\n            factor=0.5,\n            patience=15,\n            min_lr=1e-6\n        )\n    ]\n    \n    history = model.fit(\n        [X_mri_train, X_audio_train], y_train,\n        validation_data=([X_mri_val, X_audio_val], y_val),\n        epochs=200,\n        batch_size=4,  # Smaller batch size\n        callbacks=callbacks,\n        class_weight=class_weights,\n        verbose=1\n    )\n    return history\n\n# 4. Smart Evaluation =======================================================\n\ndef evaluate_model(model, X_mri_test, X_audio_test, y_test):\n    y_prob = model.predict([X_mri_test, X_audio_test])\n    \n    # Find class-balanced threshold\n    fpr, tpr, thresholds = roc_curve(y_test, y_prob)\n    optimal_idx = np.argmax(tpr - fpr + (1-fpr))  # Favors specificity\n    optimal_threshold = thresholds[optimal_idx]\n    \n    y_pred = (y_prob > optimal_threshold).astype(int)\n    \n    print(f\"\\nOptimal Threshold: {optimal_threshold:.4f}\")\n    print(classification_report(y_test, y_pred, target_names=['Healthy', 'Parkinson\\'s']))\n    \n    # Enhanced confusion matrix\n    cm = confusion_matrix(y_test, y_pred)\n    plt.figure(figsize=(8,6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', \n               xticklabels=['Healthy', 'Parkinson\\'s'],\n               yticklabels=['Healthy', 'Parkinson\\'s'],\n               cbar=False)\n    plt.title(f'Confusion Matrix (Threshold={optimal_threshold:.2f})', pad=20)\n    plt.xlabel('Predicted Label', labelpad=15)\n    plt.ylabel('True Label', labelpad=15)\n    plt.xticks(rotation=45)\n    plt.yticks(rotation=0)\n    plt.show()\n\n# Main Execution ============================================================\n\nif __name__ == \"__main__\":\n    # Load data\n    df = pd.read_csv(\"/kaggle/input/dataset/synthetic_dataset (4).csv\")\n    X_mri, X_audio, y = [], [], []\n    \n    for _, row in df.iterrows():\n        try:\n            # Process MRI\n            mri = np.load(row['mri_file'])\n            voxel = extract_midbrain_voxel(mri)\n            X_mri.append(voxel)\n            \n            # Process Audio\n            y_audio, sr = librosa.load(row['audio_file'], sr=22050)\n            mfcc = librosa.feature.mfcc(y=y_audio, sr=sr, n_mfcc=13)\n            mfcc = np.pad(mfcc, ((0,0), (0, max(0, 100-mfcc.shape[1]))))[:, :100]\n            X_audio.append(mfcc.T)\n            \n            y.append(row['combined_label'])\n        except Exception as e:\n            print(f\"Error processing {row['mri_file']}: {str(e)}\")\n    \n    # Convert to arrays\n    X_mri = np.array(X_mri)[..., np.newaxis]\n    X_audio = np.array(X_audio)\n    y = np.array(y)\n    \n    # Split data\n    train_mask = df['split'] == 'train'\n    test_mask = df['split'] == 'test'\n    \n    X_mri_train, X_mri_test = X_mri[train_mask], X_mri[test_mask]\n    X_audio_train, X_audio_test = X_audio[train_mask], X_audio[test_mask]\n    y_train, y_test = y[train_mask], y[test_mask]\n    \n    # Create and train model\n    model = create_optimized_model()\n    history = train_model(model, X_mri_train, X_audio_train, y_train, \n                         X_mri_val, X_audio_val, y_val)\n    \n    # Evaluate\n    evaluate_model(model, X_mri_test, X_audio_test, y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-01T04:01:59.692103Z","iopub.execute_input":"2025-05-01T04:01:59.692943Z","iopub.status.idle":"2025-05-01T04:02:36.152975Z","shell.execute_reply.started":"2025-05-01T04:01:59.692914Z","shell.execute_reply":"2025-05-01T04:02:36.152057Z"}},"outputs":[{"name":"stderr","text":"I0000 00:00:1746072153.390209      31 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\nI0000 00:00:1746072153.391176      31 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/783690386.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    202\u001b[0m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcreate_optimized_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    203\u001b[0m     history = train_model(model, X_mri_train, X_audio_train, y_train, \n\u001b[0;32m--> 204\u001b[0;31m                          X_mri_val, X_audio_val, y_val)\n\u001b[0m\u001b[1;32m    205\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;31m# Evaluate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'X_mri_val' is not defined"],"ename":"NameError","evalue":"name 'X_mri_val' is not defined","output_type":"error"}],"execution_count":7}]}